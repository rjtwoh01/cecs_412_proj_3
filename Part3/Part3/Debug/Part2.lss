
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a838  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000418d  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e13  00000000  00000000  0000faf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00013908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002ee61  00000000  00000000  00013cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000278b  00000000  00000000  00042b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0004529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ab61  00000000  00000000  0004558c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__bad_interrupt>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
   a:	00 00       	nop
   c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
   e:	00 00       	nop
  10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
  12:	00 00       	nop
  14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
  16:	00 00       	nop
  18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f7 c0       	rjmp	.+494    	; 0x210 <__bad_interrupt>
  22:	00 00       	nop
  24:	f5 c0       	rjmp	.+490    	; 0x210 <__bad_interrupt>
  26:	00 00       	nop
  28:	f3 c0       	rjmp	.+486    	; 0x210 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f1 c0       	rjmp	.+482    	; 0x210 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ef c0       	rjmp	.+478    	; 0x210 <__bad_interrupt>
  32:	00 00       	nop
  34:	ed c0       	rjmp	.+474    	; 0x210 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c0       	rjmp	.+470    	; 0x210 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c0       	rjmp	.+454    	; 0x210 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e1 c0       	rjmp	.+450    	; 0x210 <__bad_interrupt>
  4e:	00 00       	nop
  50:	df c0       	rjmp	.+446    	; 0x210 <__bad_interrupt>
  52:	00 00       	nop
  54:	dd c0       	rjmp	.+442    	; 0x210 <__bad_interrupt>
  56:	00 00       	nop
  58:	db c0       	rjmp	.+438    	; 0x210 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d9 c0       	rjmp	.+434    	; 0x210 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d7 c0       	rjmp	.+430    	; 0x210 <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c0       	rjmp	.+426    	; 0x210 <__bad_interrupt>
  66:	00 00       	nop
  68:	d3 c0       	rjmp	.+422    	; 0x210 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d1 c0       	rjmp	.+418    	; 0x210 <__bad_interrupt>
  6e:	00 00       	nop
  70:	cf c0       	rjmp	.+414    	; 0x210 <__bad_interrupt>
  72:	00 00       	nop
  74:	cd c0       	rjmp	.+410    	; 0x210 <__bad_interrupt>
  76:	00 00       	nop
  78:	cb c0       	rjmp	.+406    	; 0x210 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c9 c0       	rjmp	.+402    	; 0x210 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c7 c0       	rjmp	.+398    	; 0x210 <__bad_interrupt>
  82:	00 00       	nop
  84:	c5 c0       	rjmp	.+394    	; 0x210 <__bad_interrupt>
  86:	00 00       	nop
  88:	c3 c0       	rjmp	.+390    	; 0x210 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 c0       	rjmp	.+386    	; 0x210 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bf c0       	rjmp	.+382    	; 0x210 <__bad_interrupt>
  92:	00 00       	nop
  94:	bd c0       	rjmp	.+378    	; 0x210 <__bad_interrupt>
  96:	00 00       	nop
  98:	bb c0       	rjmp	.+374    	; 0x210 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b9 c0       	rjmp	.+370    	; 0x210 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b7 c0       	rjmp	.+366    	; 0x210 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b5 c0       	rjmp	.+362    	; 0x210 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b3 c0       	rjmp	.+358    	; 0x210 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b1 c0       	rjmp	.+354    	; 0x210 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	af c0       	rjmp	.+350    	; 0x210 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ad c0       	rjmp	.+346    	; 0x210 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ab c0       	rjmp	.+342    	; 0x210 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a9 c0       	rjmp	.+338    	; 0x210 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a7 c0       	rjmp	.+334    	; 0x210 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a3 c0       	rjmp	.+326    	; 0x210 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c0       	rjmp	.+322    	; 0x210 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9f c0       	rjmp	.+318    	; 0x210 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9d c0       	rjmp	.+314    	; 0x210 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9b c0       	rjmp	.+310    	; 0x210 <__bad_interrupt>
  da:	00 00       	nop
  dc:	99 c0       	rjmp	.+306    	; 0x210 <__bad_interrupt>
  de:	00 00       	nop
  e0:	97 c0       	rjmp	.+302    	; 0x210 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	95 c0       	rjmp	.+298    	; 0x210 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	93 c0       	rjmp	.+294    	; 0x210 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	91 c0       	rjmp	.+290    	; 0x210 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8f c0       	rjmp	.+286    	; 0x210 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8d c0       	rjmp	.+282    	; 0x210 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8b c0       	rjmp	.+278    	; 0x210 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	89 c0       	rjmp	.+274    	; 0x210 <__bad_interrupt>
  fe:	00 00       	nop
 100:	87 c0       	rjmp	.+270    	; 0x210 <__bad_interrupt>
 102:	00 00       	nop
 104:	85 c0       	rjmp	.+266    	; 0x210 <__bad_interrupt>
 106:	00 00       	nop
 108:	83 c0       	rjmp	.+262    	; 0x210 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	81 c0       	rjmp	.+258    	; 0x210 <__bad_interrupt>
 10e:	00 00       	nop
 110:	7f c0       	rjmp	.+254    	; 0x210 <__bad_interrupt>
 112:	00 00       	nop
 114:	7d c0       	rjmp	.+250    	; 0x210 <__bad_interrupt>
 116:	00 00       	nop
 118:	7b c0       	rjmp	.+246    	; 0x210 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	79 c0       	rjmp	.+242    	; 0x210 <__bad_interrupt>
 11e:	00 00       	nop
 120:	77 c0       	rjmp	.+238    	; 0x210 <__bad_interrupt>
 122:	00 00       	nop
 124:	75 c0       	rjmp	.+234    	; 0x210 <__bad_interrupt>
 126:	00 00       	nop
 128:	73 c0       	rjmp	.+230    	; 0x210 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	71 c0       	rjmp	.+226    	; 0x210 <__bad_interrupt>
 12e:	00 00       	nop
 130:	6f c0       	rjmp	.+222    	; 0x210 <__bad_interrupt>
 132:	00 00       	nop
 134:	6d c0       	rjmp	.+218    	; 0x210 <__bad_interrupt>
 136:	00 00       	nop
 138:	6b c0       	rjmp	.+214    	; 0x210 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	69 c0       	rjmp	.+210    	; 0x210 <__bad_interrupt>
 13e:	00 00       	nop
 140:	67 c0       	rjmp	.+206    	; 0x210 <__bad_interrupt>
 142:	00 00       	nop
 144:	65 c0       	rjmp	.+202    	; 0x210 <__bad_interrupt>
 146:	00 00       	nop
 148:	63 c0       	rjmp	.+198    	; 0x210 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	61 c0       	rjmp	.+194    	; 0x210 <__bad_interrupt>
 14e:	00 00       	nop
 150:	5f c0       	rjmp	.+190    	; 0x210 <__bad_interrupt>
 152:	00 00       	nop
 154:	5d c0       	rjmp	.+186    	; 0x210 <__bad_interrupt>
 156:	00 00       	nop
 158:	5b c0       	rjmp	.+182    	; 0x210 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	59 c0       	rjmp	.+178    	; 0x210 <__bad_interrupt>
 15e:	00 00       	nop
 160:	57 c0       	rjmp	.+174    	; 0x210 <__bad_interrupt>
 162:	00 00       	nop
 164:	55 c0       	rjmp	.+170    	; 0x210 <__bad_interrupt>
 166:	00 00       	nop
 168:	53 c0       	rjmp	.+166    	; 0x210 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	51 c0       	rjmp	.+162    	; 0x210 <__bad_interrupt>
 16e:	00 00       	nop
 170:	4f c0       	rjmp	.+158    	; 0x210 <__bad_interrupt>
 172:	00 00       	nop
 174:	4d c0       	rjmp	.+154    	; 0x210 <__bad_interrupt>
 176:	00 00       	nop
 178:	4b c0       	rjmp	.+150    	; 0x210 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	49 c0       	rjmp	.+146    	; 0x210 <__bad_interrupt>
 17e:	00 00       	nop
 180:	47 c0       	rjmp	.+142    	; 0x210 <__bad_interrupt>
 182:	00 00       	nop
 184:	45 c0       	rjmp	.+138    	; 0x210 <__bad_interrupt>
 186:	00 00       	nop
 188:	43 c0       	rjmp	.+134    	; 0x210 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__bad_interrupt>
 18e:	00 00       	nop
 190:	3f c0       	rjmp	.+126    	; 0x210 <__bad_interrupt>
 192:	00 00       	nop
 194:	3d c0       	rjmp	.+122    	; 0x210 <__bad_interrupt>
 196:	00 00       	nop
 198:	3b c0       	rjmp	.+118    	; 0x210 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	39 c0       	rjmp	.+114    	; 0x210 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	37 c0       	rjmp	.+110    	; 0x210 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	33 c0       	rjmp	.+102    	; 0x210 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	31 c0       	rjmp	.+98     	; 0x210 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2d c0       	rjmp	.+90     	; 0x210 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	23 c0       	rjmp	.+70     	; 0x210 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	5f d5       	rcall	.+2750   	; 0xccc <main>
 20e:	5e c6       	rjmp	.+3260   	; 0xecc <_exit>

00000210 <__bad_interrupt>:
 210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 212:	04 c0       	rjmp	.+8      	; 0x21c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 214:	61 50       	subi	r22, 0x01	; 1
 216:	71 09       	sbc	r23, r1
 218:	81 09       	sbc	r24, r1
 21a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 21c:	61 15       	cp	r22, r1
 21e:	71 05       	cpc	r23, r1
 220:	81 05       	cpc	r24, r1
 222:	91 05       	cpc	r25, r1
 224:	b9 f7       	brne	.-18     	; 0x214 <__portable_avr_delay_cycles+0x2>
 226:	08 95       	ret

00000228 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
 228:	bf 92       	push	r11
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	1f 92       	push	r1
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 240:	00 e0       	ldi	r16, 0x00	; 0
 242:	16 e0       	ldi	r17, 0x06	; 6
 244:	68 94       	set
 246:	ff 24       	eor	r15, r15
 248:	f3 f8       	bld	r15, 3
 24a:	f8 01       	movw	r30, r16
 24c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
 24e:	6e e0       	ldi	r22, 0x0E	; 14
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	dd df       	rcall	.-70     	; 0x212 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 258:	f8 01       	movw	r30, r16
 25a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
 25c:	6e e0       	ldi	r22, 0x0E	; 14
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	d6 df       	rcall	.-84     	; 0x212 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
 266:	0f 2e       	mov	r0, r31
 268:	fb e2       	ldi	r31, 0x2B	; 43
 26a:	bf 2e       	mov	r11, r31
 26c:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
 26e:	b9 82       	std	Y+1, r11	; 0x01
 270:	80 ea       	ldi	r24, 0xA0	; 160
 272:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
 274:	13 d2       	rcall	.+1062   	; 0x69c <usart_spi_init>
 276:	c1 2c       	mov	r12, r1
 278:	d1 2c       	mov	r13, r1
 27a:	76 01       	movw	r14, r12
 27c:	00 e4       	ldi	r16, 0x40	; 64
 27e:	12 e4       	ldi	r17, 0x42	; 66
 280:	2f e0       	ldi	r18, 0x0F	; 15
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	43 e0       	ldi	r20, 0x03	; 3
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	80 ea       	ldi	r24, 0xA0	; 160
 28e:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 290:	34 d2       	rcall	.+1128   	; 0x6fa <usart_spi_setup_device>
 292:	00 e6       	ldi	r16, 0x60	; 96
 294:	16 e0       	ldi	r17, 0x06	; 6
 296:	ff 24       	eor	r15, r15
 298:	f3 94       	inc	r15
 29a:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 29c:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 29e:	b9 82       	std	Y+1, r11	; 0x01
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	80 ea       	ldi	r24, 0xA0	; 160
 2a8:	99 e0       	ldi	r25, 0x09	; 9
 2aa:	41 d2       	rcall	.+1154   	; 0x72e <usart_spi_select_device>
 2ac:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 2ae:	f6 82       	std	Z+6, r15	; 0x06
 2b0:	e0 ea       	ldi	r30, 0xA0	; 160
 2b2:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <st7565r_init+0x8c>
 2ba:	80 ea       	ldi	r24, 0xA0	; 160
 2bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 2c0:	e0 ea       	ldi	r30, 0xA0	; 160
 2c2:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <st7565r_init+0x9c>
 2ca:	e0 ea       	ldi	r30, 0xA0	; 160
 2cc:	f9 e0       	ldi	r31, 0x09	; 9
 2ce:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 2d0:	81 83       	std	Z+1, r24	; 0x01
 2d2:	80 81       	ld	r24, Z
 2d4:	be 01       	movw	r22, r28
 2d6:	6f 5f       	subi	r22, 0xFF	; 255
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 2dc:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 2de:	3d d2       	rcall	.+1146   	; 0x75a <usart_spi_deselect_device>
 2e0:	8b e2       	ldi	r24, 0x2B	; 43
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	80 ea       	ldi	r24, 0xA0	; 160
 2ec:	99 e0       	ldi	r25, 0x09	; 9
 2ee:	1f d2       	rcall	.+1086   	; 0x72e <usart_spi_select_device>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 2f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 2f6:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 2f8:	f9 e0       	ldi	r31, 0x09	; 9
 2fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 2fc:	85 ff       	sbrs	r24, 5
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <st7565r_init+0xd2>
 300:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 302:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 306:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 308:	f9 e0       	ldi	r31, 0x09	; 9
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 30c:	86 ff       	sbrs	r24, 6
 30e:	fd cf       	rjmp	.-6      	; 0x30a <st7565r_init+0xe2>
 310:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 312:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 314:	80 e4       	ldi	r24, 0x40	; 64
 316:	81 83       	std	Z+1, r24	; 0x01
 318:	80 81       	ld	r24, Z
 31a:	be 01       	movw	r22, r28
 31c:	6f 5f       	subi	r22, 0xFF	; 255
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 320:	80 ea       	ldi	r24, 0xA0	; 160
 322:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 324:	1a d2       	rcall	.+1076   	; 0x75a <usart_spi_deselect_device>
 326:	8b e2       	ldi	r24, 0x2B	; 43
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	be 01       	movw	r22, r28
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	99 e0       	ldi	r25, 0x09	; 9
 334:	fc d1       	rcall	.+1016   	; 0x72e <usart_spi_select_device>
 336:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 338:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 33c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 33e:	f9 e0       	ldi	r31, 0x09	; 9
 340:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 342:	85 ff       	sbrs	r24, 5
 344:	fd cf       	rjmp	.-6      	; 0x340 <st7565r_init+0x118>
 346:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 348:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 34c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 34e:	f9 e0       	ldi	r31, 0x09	; 9
 350:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 352:	86 ff       	sbrs	r24, 6
 354:	fd cf       	rjmp	.-6      	; 0x350 <st7565r_init+0x128>
 356:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 358:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	81 83       	std	Z+1, r24	; 0x01
 35e:	80 81       	ld	r24, Z
 360:	be 01       	movw	r22, r28
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 366:	80 ea       	ldi	r24, 0xA0	; 160
 368:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 36a:	f7 d1       	rcall	.+1006   	; 0x75a <usart_spi_deselect_device>
 36c:	8b e2       	ldi	r24, 0x2B	; 43
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	80 ea       	ldi	r24, 0xA0	; 160
 378:	99 e0       	ldi	r25, 0x09	; 9
 37a:	d9 d1       	rcall	.+946    	; 0x72e <usart_spi_select_device>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 37e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 382:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 384:	f9 e0       	ldi	r31, 0x09	; 9
 386:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 388:	85 ff       	sbrs	r24, 5
 38a:	fd cf       	rjmp	.-6      	; 0x386 <st7565r_init+0x15e>
 38c:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 38e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 392:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 394:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	86 ff       	sbrs	r24, 6
 39a:	fd cf       	rjmp	.-6      	; 0x396 <st7565r_init+0x16e>
 39c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 39e:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	81 83       	std	Z+1, r24	; 0x01
 3a4:	80 81       	ld	r24, Z
 3a6:	be 01       	movw	r22, r28
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 3ac:	80 ea       	ldi	r24, 0xA0	; 160
 3ae:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 3b0:	d4 d1       	rcall	.+936    	; 0x75a <usart_spi_deselect_device>
 3b2:	8b e2       	ldi	r24, 0x2B	; 43
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	be 01       	movw	r22, r28
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	80 ea       	ldi	r24, 0xA0	; 160
 3be:	99 e0       	ldi	r25, 0x09	; 9
 3c0:	b6 d1       	rcall	.+876    	; 0x72e <usart_spi_select_device>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 3c4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 3c8:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 3ca:	f9 e0       	ldi	r31, 0x09	; 9
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	fd cf       	rjmp	.-6      	; 0x3cc <st7565r_init+0x1a4>
 3d2:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 3d4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 3d8:	e0 ea       	ldi	r30, 0xA0	; 160
 3da:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 3dc:	81 81       	ldd	r24, Z+1	; 0x01
 3de:	86 ff       	sbrs	r24, 6
 3e0:	fd cf       	rjmp	.-6      	; 0x3dc <st7565r_init+0x1b4>
 3e2:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 3e4:	f9 e0       	ldi	r31, 0x09	; 9
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	81 83       	std	Z+1, r24	; 0x01
 3ea:	80 81       	ld	r24, Z
 3ec:	be 01       	movw	r22, r28
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 3f4:	99 e0       	ldi	r25, 0x09	; 9
 3f6:	b1 d1       	rcall	.+866    	; 0x75a <usart_spi_deselect_device>
 3f8:	8b e2       	ldi	r24, 0x2B	; 43
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	80 ea       	ldi	r24, 0xA0	; 160
 404:	99 e0       	ldi	r25, 0x09	; 9
 406:	93 d1       	rcall	.+806    	; 0x72e <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 40e:	e0 ea       	ldi	r30, 0xA0	; 160
 410:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 412:	81 81       	ldd	r24, Z+1	; 0x01
 414:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 416:	fd cf       	rjmp	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 418:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 41a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 41e:	e0 ea       	ldi	r30, 0xA0	; 160
 420:	f9 e0       	ldi	r31, 0x09	; 9
 422:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 424:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 426:	fd cf       	rjmp	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 428:	e0 ea       	ldi	r30, 0xA0	; 160
 42a:	f9 e0       	ldi	r31, 0x09	; 9
 42c:	80 e4       	ldi	r24, 0x40	; 64
 42e:	81 83       	std	Z+1, r24	; 0x01
 430:	80 81       	ld	r24, Z
 432:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 438:	80 ea       	ldi	r24, 0xA0	; 160
 43a:	99 e0       	ldi	r25, 0x09	; 9
 43c:	8e d1       	rcall	.+796    	; 0x75a <usart_spi_deselect_device>
 43e:	8b e2       	ldi	r24, 0x2B	; 43
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	be 01       	movw	r22, r28
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	80 ea       	ldi	r24, 0xA0	; 160
 44a:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 44c:	70 d1       	rcall	.+736    	; 0x72e <usart_spi_select_device>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 454:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 456:	f9 e0       	ldi	r31, 0x09	; 9
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 45c:	fd cf       	rjmp	.-6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 462:	e0 ea       	ldi	r30, 0xA0	; 160
 464:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 466:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 468:	86 ff       	sbrs	r24, 6
 46a:	fd cf       	rjmp	.-6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46c:	e0 ea       	ldi	r30, 0xA0	; 160
 46e:	f9 e0       	ldi	r31, 0x09	; 9
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	81 83       	std	Z+1, r24	; 0x01
 474:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	80 ea       	ldi	r24, 0xA0	; 160
 47e:	99 e0       	ldi	r25, 0x09	; 9
 480:	6c d1       	rcall	.+728    	; 0x75a <usart_spi_deselect_device>
 482:	8b e2       	ldi	r24, 0x2B	; 43
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	be 01       	movw	r22, r28
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 48e:	99 e0       	ldi	r25, 0x09	; 9
 490:	4e d1       	rcall	.+668    	; 0x72e <usart_spi_select_device>
 492:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 494:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 498:	e0 ea       	ldi	r30, 0xA0	; 160
 49a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 49c:	81 81       	ldd	r24, Z+1	; 0x01
 49e:	85 ff       	sbrs	r24, 5
 4a0:	fd cf       	rjmp	.-6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 4a2:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 4a4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 4a8:	e0 ea       	ldi	r30, 0xA0	; 160
 4aa:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 4ac:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 4ae:	86 ff       	sbrs	r24, 6
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b2:	e0 ea       	ldi	r30, 0xA0	; 160
 4b4:	f9 e0       	ldi	r31, 0x09	; 9
 4b6:	80 e4       	ldi	r24, 0x40	; 64
 4b8:	81 83       	std	Z+1, r24	; 0x01
 4ba:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	99 e0       	ldi	r25, 0x09	; 9
 4c6:	49 d1       	rcall	.+658    	; 0x75a <usart_spi_deselect_device>
 4c8:	8b e2       	ldi	r24, 0x2B	; 43
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	be 01       	movw	r22, r28
 4ce:	6f 5f       	subi	r22, 0xFF	; 255
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 4d4:	99 e0       	ldi	r25, 0x09	; 9
 4d6:	2b d1       	rcall	.+598    	; 0x72e <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 4de:	e0 ea       	ldi	r30, 0xA0	; 160
 4e0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 4e2:	81 81       	ldd	r24, Z+1	; 0x01
 4e4:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e8:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 4ea:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 4ee:	e0 ea       	ldi	r30, 0xA0	; 160
 4f0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 4f2:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 4f4:	86 ff       	sbrs	r24, 6
 4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f8:	e0 ea       	ldi	r30, 0xA0	; 160
 4fa:	f9 e0       	ldi	r31, 0x09	; 9
 4fc:	80 e4       	ldi	r24, 0x40	; 64
 4fe:	81 83       	std	Z+1, r24	; 0x01
 500:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 502:	be 01       	movw	r22, r28
 504:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	80 ea       	ldi	r24, 0xA0	; 160
 50a:	99 e0       	ldi	r25, 0x09	; 9
 50c:	26 d1       	rcall	.+588    	; 0x75a <usart_spi_deselect_device>
 50e:	8b e2       	ldi	r24, 0x2B	; 43
 510:	89 83       	std	Y+1, r24	; 0x01
 512:	be 01       	movw	r22, r28
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 518:	80 ea       	ldi	r24, 0xA0	; 160
 51a:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 51c:	08 d1       	rcall	.+528    	; 0x72e <usart_spi_select_device>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 520:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 524:	e0 ea       	ldi	r30, 0xA0	; 160
 526:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 528:	81 81       	ldd	r24, Z+1	; 0x01
 52a:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 52c:	fd cf       	rjmp	.-6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 52e:	81 e2       	ldi	r24, 0x21	; 33
 530:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 534:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 536:	f9 e0       	ldi	r31, 0x09	; 9
 538:	81 81       	ldd	r24, Z+1	; 0x01
 53a:	86 ff       	sbrs	r24, 6
 53c:	fd cf       	rjmp	.-6      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 53e:	e0 ea       	ldi	r30, 0xA0	; 160
 540:	f9 e0       	ldi	r31, 0x09	; 9
 542:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 544:	81 83       	std	Z+1, r24	; 0x01
 546:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 548:	be 01       	movw	r22, r28
 54a:	6f 5f       	subi	r22, 0xFF	; 255
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	80 ea       	ldi	r24, 0xA0	; 160
 550:	99 e0       	ldi	r25, 0x09	; 9
 552:	03 d1       	rcall	.+518    	; 0x75a <usart_spi_deselect_device>
 554:	8b e2       	ldi	r24, 0x2B	; 43
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 560:	99 e0       	ldi	r25, 0x09	; 9
 562:	e5 d0       	rcall	.+458    	; 0x72e <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 56a:	e0 ea       	ldi	r30, 0xA0	; 160
 56c:	f9 e0       	ldi	r31, 0x09	; 9
 56e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 570:	85 ff       	sbrs	r24, 5
 572:	fd cf       	rjmp	.-6      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 574:	8f ea       	ldi	r24, 0xAF	; 175
 576:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 57a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 57c:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 57e:	81 81       	ldd	r24, Z+1	; 0x01
 580:	86 ff       	sbrs	r24, 6
 582:	fd cf       	rjmp	.-6      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 584:	e0 ea       	ldi	r30, 0xA0	; 160
 586:	f9 e0       	ldi	r31, 0x09	; 9
 588:	80 e4       	ldi	r24, 0x40	; 64
 58a:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
 58c:	80 81       	ld	r24, Z
 58e:	be 01       	movw	r22, r28
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	80 ea       	ldi	r24, 0xA0	; 160
 596:	99 e0       	ldi	r25, 0x09	; 9
 598:	e0 d0       	rcall	.+448    	; 0x75a <usart_spi_deselect_device>
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	bf 90       	pop	r11
 5ae:	08 95       	ret

000005b0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	1f 92       	push	r1
 5b6:	1f 92       	push	r1
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 5bc:	8f ef       	ldi	r24, 0xFF	; 255
 5be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 5c2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 5c6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 5ca:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 5ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 5d2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 5d6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
 5da:	6c e0       	ldi	r22, 0x0C	; 12
 5dc:	81 e4       	ldi	r24, 0x41	; 65
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	21 d1       	rcall	.+578    	; 0x824 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 5e2:	8f b7       	in	r24, 0x3f	; 63
 5e4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 5e6:	f8 94       	cli
	return flags;
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 5ea:	e0 e5       	ldi	r30, 0x50	; 80
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 5f4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 5f6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 5f8:	81 ff       	sbrs	r24, 1
 5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	80 e4       	ldi	r24, 0x40	; 64
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	10 d1       	rcall	.+544    	; 0x824 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 604:	8f b7       	in	r24, 0x3f	; 63
 606:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 608:	f8 94       	cli
	return flags;
 60a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 60c:	e0 e5       	ldi	r30, 0x50	; 80
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 616:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	1f 92       	push	r1
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 62c:	9f b7       	in	r25, 0x3f	; 63
 62e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 630:	f8 94       	cli
	return flags;
 632:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 634:	e8 2f       	mov	r30, r24
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	e0 59       	subi	r30, 0x90	; 144
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	60 95       	com	r22
 63e:	80 81       	ld	r24, Z
 640:	68 23       	and	r22, r24
 642:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 644:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 646:	0f 90       	pop	r0
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 658:	c6 2f       	mov	r28, r22
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	de 01       	movw	r26, r28
 65e:	02 2e       	mov	r0, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <ioport_configure_port_pin+0x18>
 662:	b5 95       	asr	r27
 664:	a7 95       	ror	r26
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <ioport_configure_port_pin+0x14>
 66a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 66c:	50 8b       	std	Z+16, r21	; 0x10
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 674:	28 30       	cpi	r18, 0x08	; 8
 676:	31 05       	cpc	r19, r1
 678:	89 f7       	brne	.-30     	; 0x65c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 67a:	40 ff       	sbrs	r20, 0
 67c:	0a c0       	rjmp	.+20     	; 0x692 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 67e:	41 ff       	sbrs	r20, 1
 680:	03 c0       	rjmp	.+6      	; 0x688 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 682:	fc 01       	movw	r30, r24
 684:	65 83       	std	Z+5, r22	; 0x05
 686:	02 c0       	rjmp	.+4      	; 0x68c <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 688:	fc 01       	movw	r30, r24
 68a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 68c:	fc 01       	movw	r30, r24
 68e:	61 83       	std	Z+1, r22	; 0x01
 690:	02 c0       	rjmp	.+4      	; 0x696 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 692:	fc 01       	movw	r30, r24
 694:	62 83       	std	Z+2, r22	; 0x02
	}
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
 69c:	80 3a       	cpi	r24, 0xA0	; 160
 69e:	28 e0       	ldi	r18, 0x08	; 8
 6a0:	92 07       	cpc	r25, r18
 6a2:	21 f4       	brne	.+8      	; 0x6ac <usart_spi_init+0x10>
 6a4:	60 e1       	ldi	r22, 0x10	; 16
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	bc cf       	rjmp	.-136    	; 0x622 <sysclk_enable_module>
 6aa:	08 95       	ret
 6ac:	80 3b       	cpi	r24, 0xB0	; 176
 6ae:	28 e0       	ldi	r18, 0x08	; 8
 6b0:	92 07       	cpc	r25, r18
 6b2:	21 f4       	brne	.+8      	; 0x6bc <usart_spi_init+0x20>
 6b4:	60 e2       	ldi	r22, 0x20	; 32
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	b4 cf       	rjmp	.-152    	; 0x622 <sysclk_enable_module>
 6ba:	08 95       	ret
 6bc:	80 3a       	cpi	r24, 0xA0	; 160
 6be:	29 e0       	ldi	r18, 0x09	; 9
 6c0:	92 07       	cpc	r25, r18
 6c2:	21 f4       	brne	.+8      	; 0x6cc <usart_spi_init+0x30>
 6c4:	60 e1       	ldi	r22, 0x10	; 16
 6c6:	84 e0       	ldi	r24, 0x04	; 4
 6c8:	ac cf       	rjmp	.-168    	; 0x622 <sysclk_enable_module>
 6ca:	08 95       	ret
 6cc:	80 3b       	cpi	r24, 0xB0	; 176
 6ce:	29 e0       	ldi	r18, 0x09	; 9
 6d0:	92 07       	cpc	r25, r18
 6d2:	21 f4       	brne	.+8      	; 0x6dc <usart_spi_init+0x40>
 6d4:	60 e2       	ldi	r22, 0x20	; 32
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	a4 cf       	rjmp	.-184    	; 0x622 <sysclk_enable_module>
 6da:	08 95       	ret
 6dc:	80 3a       	cpi	r24, 0xA0	; 160
 6de:	2a e0       	ldi	r18, 0x0A	; 10
 6e0:	92 07       	cpc	r25, r18
 6e2:	21 f4       	brne	.+8      	; 0x6ec <usart_spi_init+0x50>
 6e4:	60 e1       	ldi	r22, 0x10	; 16
 6e6:	85 e0       	ldi	r24, 0x05	; 5
 6e8:	9c cf       	rjmp	.-200    	; 0x622 <sysclk_enable_module>
 6ea:	08 95       	ret
 6ec:	80 3a       	cpi	r24, 0xA0	; 160
 6ee:	9b 40       	sbci	r25, 0x0B	; 11
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <usart_spi_init+0x5c>
 6f2:	60 e1       	ldi	r22, 0x10	; 16
 6f4:	86 e0       	ldi	r24, 0x06	; 6
 6f6:	95 cf       	rjmp	.-214    	; 0x622 <sysclk_enable_module>
 6f8:	08 95       	ret

000006fa <usart_spi_setup_device>:
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	00 d0       	rcall	.+0      	; 0x704 <usart_spi_setup_device+0xa>
 704:	00 d0       	rcall	.+0      	; 0x706 <usart_spi_setup_device+0xc>
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	09 83       	std	Y+1, r16	; 0x01
 70c:	1a 83       	std	Y+2, r17	; 0x02
 70e:	2b 83       	std	Y+3, r18	; 0x03
 710:	3c 83       	std	Y+4, r19	; 0x04
 712:	4d 83       	std	Y+5, r20	; 0x05
 714:	1e 82       	std	Y+6, r1	; 0x06
 716:	be 01       	movw	r22, r28
 718:	6f 5f       	subi	r22, 0xFF	; 255
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	ba d0       	rcall	.+372    	; 0x892 <usart_init_spi>
 71e:	26 96       	adiw	r28, 0x06	; 6
 720:	cd bf       	out	0x3d, r28	; 61
 722:	de bf       	out	0x3e, r29	; 62
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	08 95       	ret

0000072e <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
 72e:	fb 01       	movw	r30, r22
 730:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 732:	e8 2f       	mov	r30, r24
 734:	e6 95       	lsr	r30
 736:	e6 95       	lsr	r30
 738:	e6 95       	lsr	r30
 73a:	40 e2       	ldi	r20, 0x20	; 32
 73c:	e4 9f       	mul	r30, r20
 73e:	f0 01       	movw	r30, r0
 740:	11 24       	eor	r1, r1
 742:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 744:	87 70       	andi	r24, 0x07	; 7
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	a9 01       	movw	r20, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <usart_spi_select_device+0x24>
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	8a 95       	dec	r24
 754:	e2 f7       	brpl	.-8      	; 0x74e <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 756:	46 83       	std	Z+6, r20	; 0x06
 758:	08 95       	ret

0000075a <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
 75a:	fb 01       	movw	r30, r22
 75c:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 75e:	e8 2f       	mov	r30, r24
 760:	e6 95       	lsr	r30
 762:	e6 95       	lsr	r30
 764:	e6 95       	lsr	r30
 766:	40 e2       	ldi	r20, 0x20	; 32
 768:	e4 9f       	mul	r30, r20
 76a:	f0 01       	movw	r30, r0
 76c:	11 24       	eor	r1, r1
 76e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 770:	87 70       	andi	r24, 0x07	; 7
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	a9 01       	movw	r20, r18
 778:	02 c0       	rjmp	.+4      	; 0x77e <usart_spi_deselect_device+0x24>
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	8a 95       	dec	r24
 780:	e2 f7       	brpl	.-8      	; 0x77a <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 782:	45 83       	std	Z+5, r20	; 0x05
 784:	08 95       	ret

00000786 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 786:	43 e0       	ldi	r20, 0x03	; 3
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	80 ee       	ldi	r24, 0xE0	; 224
 78e:	97 e0       	ldi	r25, 0x07	; 7
 790:	5e df       	rcall	.-324    	; 0x64e <ioport_configure_port_pin>
 792:	43 e0       	ldi	r20, 0x03	; 3
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	62 e0       	ldi	r22, 0x02	; 2
 798:	80 ee       	ldi	r24, 0xE0	; 224
 79a:	97 e0       	ldi	r25, 0x07	; 7
 79c:	58 df       	rcall	.-336    	; 0x64e <ioport_configure_port_pin>
 79e:	43 e0       	ldi	r20, 0x03	; 3
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	60 e1       	ldi	r22, 0x10	; 16
 7a4:	80 e6       	ldi	r24, 0x60	; 96
 7a6:	96 e0       	ldi	r25, 0x06	; 6
 7a8:	52 df       	rcall	.-348    	; 0x64e <ioport_configure_port_pin>
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	50 e4       	ldi	r21, 0x40	; 64
 7ae:	60 e2       	ldi	r22, 0x20	; 32
 7b0:	80 e6       	ldi	r24, 0x60	; 96
 7b2:	96 e0       	ldi	r25, 0x06	; 6
 7b4:	4c df       	rcall	.-360    	; 0x64e <ioport_configure_port_pin>
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	5b e1       	ldi	r21, 0x1B	; 27
 7ba:	60 e2       	ldi	r22, 0x20	; 32
 7bc:	80 e8       	ldi	r24, 0x80	; 128
 7be:	96 e0       	ldi	r25, 0x06	; 6
 7c0:	46 df       	rcall	.-372    	; 0x64e <ioport_configure_port_pin>
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	5b e1       	ldi	r21, 0x1B	; 27
 7c6:	62 e0       	ldi	r22, 0x02	; 2
 7c8:	80 ea       	ldi	r24, 0xA0	; 160
 7ca:	96 e0       	ldi	r25, 0x06	; 6
 7cc:	40 df       	rcall	.-384    	; 0x64e <ioport_configure_port_pin>
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	5b e1       	ldi	r21, 0x1B	; 27
 7d2:	64 e0       	ldi	r22, 0x04	; 4
 7d4:	80 ea       	ldi	r24, 0xA0	; 160
 7d6:	96 e0       	ldi	r25, 0x06	; 6
 7d8:	3a df       	rcall	.-396    	; 0x64e <ioport_configure_port_pin>
 7da:	43 e0       	ldi	r20, 0x03	; 3
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	80 e6       	ldi	r24, 0x60	; 96
 7e2:	96 e0       	ldi	r25, 0x06	; 6
 7e4:	34 df       	rcall	.-408    	; 0x64e <ioport_configure_port_pin>
 7e6:	43 e0       	ldi	r20, 0x03	; 3
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	68 e0       	ldi	r22, 0x08	; 8
 7ec:	80 e6       	ldi	r24, 0x60	; 96
 7ee:	96 e0       	ldi	r25, 0x06	; 6
 7f0:	2e df       	rcall	.-420    	; 0x64e <ioport_configure_port_pin>
 7f2:	43 e0       	ldi	r20, 0x03	; 3
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	68 e0       	ldi	r22, 0x08	; 8
 7f8:	80 ea       	ldi	r24, 0xA0	; 160
 7fa:	96 e0       	ldi	r25, 0x06	; 6
 7fc:	28 df       	rcall	.-432    	; 0x64e <ioport_configure_port_pin>
 7fe:	43 e0       	ldi	r20, 0x03	; 3
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	80 e6       	ldi	r24, 0x60	; 96
 806:	96 e0       	ldi	r25, 0x06	; 6
 808:	22 df       	rcall	.-444    	; 0x64e <ioport_configure_port_pin>
 80a:	43 e0       	ldi	r20, 0x03	; 3
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	68 e0       	ldi	r22, 0x08	; 8
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	96 e0       	ldi	r25, 0x06	; 6
 814:	1c df       	rcall	.-456    	; 0x64e <ioport_configure_port_pin>
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	60 e1       	ldi	r22, 0x10	; 16
 81c:	80 e8       	ldi	r24, 0x80	; 128
 81e:	96 e0       	ldi	r25, 0x06	; 6
 820:	16 cf       	rjmp	.-468    	; 0x64e <ioport_configure_port_pin>
 822:	08 95       	ret

00000824 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 824:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 826:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 828:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 82a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 82c:	60 83       	st	Z, r22
	ret                             // Return to caller
 82e:	08 95       	ret

00000830 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
 842:	d9 01       	movw	r26, r18
 844:	c8 01       	movw	r24, r16
 846:	b6 95       	lsr	r27
 848:	a7 95       	ror	r26
 84a:	97 95       	ror	r25
 84c:	87 95       	ror	r24
 84e:	48 17       	cp	r20, r24
 850:	59 07       	cpc	r21, r25
 852:	6a 07       	cpc	r22, r26
 854:	7b 07       	cpc	r23, r27
 856:	70 f4       	brcc	.+28     	; 0x874 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
 858:	6a 01       	movw	r12, r20
 85a:	7b 01       	movw	r14, r22
 85c:	cc 0c       	add	r12, r12
 85e:	dd 1c       	adc	r13, r13
 860:	ee 1c       	adc	r14, r14
 862:	ff 1c       	adc	r15, r15
 864:	c9 01       	movw	r24, r18
 866:	b8 01       	movw	r22, r16
 868:	a7 01       	movw	r20, r14
 86a:	96 01       	movw	r18, r12
 86c:	0d d3       	rcall	.+1562   	; 0xe88 <__udivmodsi4>
 86e:	21 50       	subi	r18, 0x01	; 1
 870:	31 09       	sbc	r19, r1
 872:	02 c0       	rjmp	.+4      	; 0x878 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
 878:	83 2f       	mov	r24, r19
 87a:	8f 70       	andi	r24, 0x0F	; 15
 87c:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
 87e:	2e 83       	std	Y+6, r18	; 0x06
}
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	08 95       	ret

00000892 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
 892:	df 92       	push	r13
 894:	ef 92       	push	r14
 896:	ff 92       	push	r15
 898:	0f 93       	push	r16
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	1f 92       	push	r1
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	7c 01       	movw	r14, r24
 8a8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <usart_init_spi+0x1e>
 8ae:	b2 c1       	rjmp	.+868    	; 0xc14 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 8b0:	80 3c       	cpi	r24, 0xC0	; 192
 8b2:	91 05       	cpc	r25, r1
 8b4:	21 f4       	brne	.+8      	; 0x8be <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 8b6:	60 e1       	ldi	r22, 0x10	; 16
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	b3 de       	rcall	.-666    	; 0x622 <sysclk_enable_module>
 8bc:	ab c1       	rjmp	.+854    	; 0xc14 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	e8 16       	cp	r14, r24
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	f8 06       	cpc	r15, r24
 8c6:	21 f4       	brne	.+8      	; 0x8d0 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 8c8:	62 e0       	ldi	r22, 0x02	; 2
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	aa de       	rcall	.-684    	; 0x622 <sysclk_enable_module>
 8ce:	a2 c1       	rjmp	.+836    	; 0xc14 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 8d0:	e1 14       	cp	r14, r1
 8d2:	e1 e0       	ldi	r30, 0x01	; 1
 8d4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 8d6:	21 f4       	brne	.+8      	; 0x8e0 <usart_init_spi+0x4e>
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	a2 de       	rcall	.-700    	; 0x622 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 8de:	9a c1       	rjmp	.+820    	; 0xc14 <usart_init_spi+0x382>
 8e0:	f0 e8       	ldi	r31, 0x80	; 128
 8e2:	ef 16       	cp	r14, r31
 8e4:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 8e6:	ff 06       	cpc	r15, r31
 8e8:	21 f4       	brne	.+8      	; 0x8f2 <usart_init_spi+0x60>
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	99 de       	rcall	.-718    	; 0x622 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 8f0:	91 c1       	rjmp	.+802    	; 0xc14 <usart_init_spi+0x382>
 8f2:	30 e9       	ldi	r19, 0x90	; 144
 8f4:	e3 16       	cp	r14, r19
 8f6:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 8f8:	f3 06       	cpc	r15, r19
 8fa:	21 f4       	brne	.+8      	; 0x904 <usart_init_spi+0x72>
 8fc:	61 e0       	ldi	r22, 0x01	; 1
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	90 de       	rcall	.-736    	; 0x622 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 902:	88 c1       	rjmp	.+784    	; 0xc14 <usart_init_spi+0x382>
 904:	e1 14       	cp	r14, r1
 906:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 908:	f8 06       	cpc	r15, r24
 90a:	21 f4       	brne	.+8      	; 0x914 <usart_init_spi+0x82>
 90c:	62 e0       	ldi	r22, 0x02	; 2
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	88 de       	rcall	.-752    	; 0x622 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 912:	80 c1       	rjmp	.+768    	; 0xc14 <usart_init_spi+0x382>
 914:	e0 e4       	ldi	r30, 0x40	; 64
 916:	ee 16       	cp	r14, r30
 918:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 91a:	fe 06       	cpc	r15, r30
 91c:	21 f4       	brne	.+8      	; 0x926 <usart_init_spi+0x94>
 91e:	62 e0       	ldi	r22, 0x02	; 2
 920:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 922:	7f de       	rcall	.-770    	; 0x622 <sysclk_enable_module>
 924:	77 c1       	rjmp	.+750    	; 0xc14 <usart_init_spi+0x382>
 926:	f0 e2       	ldi	r31, 0x20	; 32
 928:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 92a:	f3 e0       	ldi	r31, 0x03	; 3
 92c:	ff 06       	cpc	r15, r31
 92e:	21 f4       	brne	.+8      	; 0x938 <usart_init_spi+0xa6>
 930:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	76 de       	rcall	.-788    	; 0x622 <sysclk_enable_module>
 936:	6e c1       	rjmp	.+732    	; 0xc14 <usart_init_spi+0x382>
 938:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 93a:	38 e0       	ldi	r19, 0x08	; 8
 93c:	f3 06       	cpc	r15, r19
 93e:	21 f4       	brne	.+8      	; 0x948 <usart_init_spi+0xb6>
 940:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	6e de       	rcall	.-804    	; 0x622 <sysclk_enable_module>
 946:	66 c1       	rjmp	.+716    	; 0xc14 <usart_init_spi+0x382>
 948:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 94a:	89 e0       	ldi	r24, 0x09	; 9
 94c:	f8 06       	cpc	r15, r24
 94e:	21 f4       	brne	.+8      	; 0x958 <usart_init_spi+0xc6>
 950:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 952:	84 e0       	ldi	r24, 0x04	; 4
 954:	66 de       	rcall	.-820    	; 0x622 <sysclk_enable_module>
 956:	5e c1       	rjmp	.+700    	; 0xc14 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 958:	e1 14       	cp	r14, r1
 95a:	ea e0       	ldi	r30, 0x0A	; 10
 95c:	fe 06       	cpc	r15, r30
 95e:	21 f4       	brne	.+8      	; 0x968 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	5e de       	rcall	.-836    	; 0x622 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 966:	56 c1       	rjmp	.+684    	; 0xc14 <usart_init_spi+0x382>
 968:	e1 14       	cp	r14, r1
 96a:	fb e0       	ldi	r31, 0x0B	; 11
 96c:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 96e:	21 f4       	brne	.+8      	; 0x978 <usart_init_spi+0xe6>
 970:	61 e0       	ldi	r22, 0x01	; 1
 972:	86 e0       	ldi	r24, 0x06	; 6
 974:	56 de       	rcall	.-852    	; 0x622 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 976:	4e c1       	rjmp	.+668    	; 0xc14 <usart_init_spi+0x382>
 978:	30 e4       	ldi	r19, 0x40	; 64
 97a:	e3 16       	cp	r14, r19
 97c:	38 e0       	ldi	r19, 0x08	; 8
 97e:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 980:	21 f4       	brne	.+8      	; 0x98a <usart_init_spi+0xf8>
 982:	62 e0       	ldi	r22, 0x02	; 2
 984:	83 e0       	ldi	r24, 0x03	; 3
 986:	4d de       	rcall	.-870    	; 0x622 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 988:	45 c1       	rjmp	.+650    	; 0xc14 <usart_init_spi+0x382>
 98a:	80 e4       	ldi	r24, 0x40	; 64
 98c:	e8 16       	cp	r14, r24
 98e:	89 e0       	ldi	r24, 0x09	; 9
 990:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 992:	21 f4       	brne	.+8      	; 0x99c <usart_init_spi+0x10a>
 994:	62 e0       	ldi	r22, 0x02	; 2
 996:	84 e0       	ldi	r24, 0x04	; 4
 998:	44 de       	rcall	.-888    	; 0x622 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 99a:	3c c1       	rjmp	.+632    	; 0xc14 <usart_init_spi+0x382>
 99c:	e0 e4       	ldi	r30, 0x40	; 64
 99e:	ee 16       	cp	r14, r30
 9a0:	ea e0       	ldi	r30, 0x0A	; 10
 9a2:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 9a4:	21 f4       	brne	.+8      	; 0x9ae <usart_init_spi+0x11c>
 9a6:	62 e0       	ldi	r22, 0x02	; 2
 9a8:	85 e0       	ldi	r24, 0x05	; 5
 9aa:	3b de       	rcall	.-906    	; 0x622 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 9ac:	33 c1       	rjmp	.+614    	; 0xc14 <usart_init_spi+0x382>
 9ae:	f0 e9       	ldi	r31, 0x90	; 144
 9b0:	ef 16       	cp	r14, r31
 9b2:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 9b4:	ff 06       	cpc	r15, r31
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <usart_init_spi+0x12e>
 9b8:	64 e0       	ldi	r22, 0x04	; 4
 9ba:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 9bc:	32 de       	rcall	.-924    	; 0x622 <sysclk_enable_module>
 9be:	2a c1       	rjmp	.+596    	; 0xc14 <usart_init_spi+0x382>
 9c0:	30 e9       	ldi	r19, 0x90	; 144
 9c2:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 9c4:	39 e0       	ldi	r19, 0x09	; 9
 9c6:	f3 06       	cpc	r15, r19
 9c8:	21 f4       	brne	.+8      	; 0x9d2 <usart_init_spi+0x140>
 9ca:	64 e0       	ldi	r22, 0x04	; 4
 9cc:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 9ce:	29 de       	rcall	.-942    	; 0x622 <sysclk_enable_module>
 9d0:	21 c1       	rjmp	.+578    	; 0xc14 <usart_init_spi+0x382>
 9d2:	80 e9       	ldi	r24, 0x90	; 144
 9d4:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 9d6:	8a e0       	ldi	r24, 0x0A	; 10
 9d8:	f8 06       	cpc	r15, r24
 9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_spi+0x152>
 9dc:	64 e0       	ldi	r22, 0x04	; 4
 9de:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 9e0:	20 de       	rcall	.-960    	; 0x622 <sysclk_enable_module>
 9e2:	18 c1       	rjmp	.+560    	; 0xc14 <usart_init_spi+0x382>
 9e4:	e0 e9       	ldi	r30, 0x90	; 144
 9e6:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 9e8:	eb e0       	ldi	r30, 0x0B	; 11
 9ea:	fe 06       	cpc	r15, r30
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <usart_init_spi+0x164>
 9ee:	64 e0       	ldi	r22, 0x04	; 4
 9f0:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 9f2:	17 de       	rcall	.-978    	; 0x622 <sysclk_enable_module>
 9f4:	0f c1       	rjmp	.+542    	; 0xc14 <usart_init_spi+0x382>
 9f6:	f0 ec       	ldi	r31, 0xC0	; 192
 9f8:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 9fa:	f8 e0       	ldi	r31, 0x08	; 8
 9fc:	ff 06       	cpc	r15, r31
 9fe:	21 f4       	brne	.+8      	; 0xa08 <usart_init_spi+0x176>
 a00:	68 e0       	ldi	r22, 0x08	; 8
 a02:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 a04:	0e de       	rcall	.-996    	; 0x622 <sysclk_enable_module>
 a06:	06 c1       	rjmp	.+524    	; 0xc14 <usart_init_spi+0x382>
 a08:	30 ec       	ldi	r19, 0xC0	; 192
 a0a:	e3 16       	cp	r14, r19
 a0c:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 a0e:	f3 06       	cpc	r15, r19
 a10:	21 f4       	brne	.+8      	; 0xa1a <usart_init_spi+0x188>
 a12:	68 e0       	ldi	r22, 0x08	; 8
 a14:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 a16:	05 de       	rcall	.-1014   	; 0x622 <sysclk_enable_module>
 a18:	fd c0       	rjmp	.+506    	; 0xc14 <usart_init_spi+0x382>
 a1a:	80 ea       	ldi	r24, 0xA0	; 160
 a1c:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
 a1e:	88 e0       	ldi	r24, 0x08	; 8
 a20:	f8 06       	cpc	r15, r24
 a22:	61 f4       	brne	.+24     	; 0xa3c <usart_init_spi+0x1aa>
 a24:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
 a26:	83 e0       	ldi	r24, 0x03	; 3
 a28:	fc dd       	rcall	.-1032   	; 0x622 <sysclk_enable_module>
 a2a:	e0 ea       	ldi	r30, 0xA0	; 160
 a2c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 a2e:	84 81       	ldd	r24, Z+4	; 0x04
 a30:	8f 7e       	andi	r24, 0xEF	; 239
 a32:	84 83       	std	Z+4, r24	; 0x04
 a34:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 a36:	24 81       	ldd	r18, Z+4	; 0x04
 a38:	22 50       	subi	r18, 0x02	; 2
 a3a:	4c c0       	rjmp	.+152    	; 0xad4 <usart_init_spi+0x242>
 a3c:	f0 ea       	ldi	r31, 0xA0	; 160
 a3e:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 a40:	f9 e0       	ldi	r31, 0x09	; 9
 a42:	ff 06       	cpc	r15, r31
 a44:	21 f4       	brne	.+8      	; 0xa4e <usart_init_spi+0x1bc>
 a46:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 a48:	84 e0       	ldi	r24, 0x04	; 4
 a4a:	eb dd       	rcall	.-1066   	; 0x622 <sysclk_enable_module>
 a4c:	e3 c0       	rjmp	.+454    	; 0xc14 <usart_init_spi+0x382>
 a4e:	30 ea       	ldi	r19, 0xA0	; 160
 a50:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 a52:	3a e0       	ldi	r19, 0x0A	; 10
 a54:	f3 06       	cpc	r15, r19
 a56:	21 f4       	brne	.+8      	; 0xa60 <usart_init_spi+0x1ce>
 a58:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 a5a:	85 e0       	ldi	r24, 0x05	; 5
 a5c:	e2 dd       	rcall	.-1084   	; 0x622 <sysclk_enable_module>
 a5e:	da c0       	rjmp	.+436    	; 0xc14 <usart_init_spi+0x382>
 a60:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 a62:	e8 16       	cp	r14, r24
 a64:	8b e0       	ldi	r24, 0x0B	; 11
 a66:	f8 06       	cpc	r15, r24
 a68:	21 f4       	brne	.+8      	; 0xa72 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 a6a:	60 e1       	ldi	r22, 0x10	; 16
 a6c:	86 e0       	ldi	r24, 0x06	; 6
 a6e:	d9 dd       	rcall	.-1102   	; 0x622 <sysclk_enable_module>
 a70:	d1 c0       	rjmp	.+418    	; 0xc14 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 a72:	e0 eb       	ldi	r30, 0xB0	; 176
 a74:	ee 16       	cp	r14, r30
 a76:	e8 e0       	ldi	r30, 0x08	; 8
 a78:	fe 06       	cpc	r15, r30
 a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 a7c:	60 e2       	ldi	r22, 0x20	; 32
 a7e:	83 e0       	ldi	r24, 0x03	; 3
 a80:	d0 dd       	rcall	.-1120   	; 0x622 <sysclk_enable_module>
 a82:	c8 c0       	rjmp	.+400    	; 0xc14 <usart_init_spi+0x382>
 a84:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 a86:	ef 16       	cp	r14, r31
 a88:	f9 e0       	ldi	r31, 0x09	; 9
 a8a:	ff 06       	cpc	r15, r31
 a8c:	21 f4       	brne	.+8      	; 0xa96 <usart_init_spi+0x204>
 a8e:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 a90:	84 e0       	ldi	r24, 0x04	; 4
 a92:	c7 dd       	rcall	.-1138   	; 0x622 <sysclk_enable_module>
 a94:	bf c0       	rjmp	.+382    	; 0xc14 <usart_init_spi+0x382>
 a96:	30 e8       	ldi	r19, 0x80	; 128
 a98:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 a9a:	34 e0       	ldi	r19, 0x04	; 4
 a9c:	f3 06       	cpc	r15, r19
 a9e:	21 f4       	brne	.+8      	; 0xaa8 <usart_init_spi+0x216>
 aa0:	60 e4       	ldi	r22, 0x40	; 64
 aa2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 aa4:	be dd       	rcall	.-1156   	; 0x622 <sysclk_enable_module>
 aa6:	b6 c0       	rjmp	.+364    	; 0xc14 <usart_init_spi+0x382>
 aa8:	80 ea       	ldi	r24, 0xA0	; 160
 aaa:	e8 16       	cp	r14, r24
 aac:	84 e0       	ldi	r24, 0x04	; 4
 aae:	f8 06       	cpc	r15, r24
 ab0:	21 f4       	brne	.+8      	; 0xaba <usart_init_spi+0x228>
 ab2:	60 e4       	ldi	r22, 0x40	; 64
 ab4:	85 e0       	ldi	r24, 0x05	; 5
 ab6:	b5 dd       	rcall	.-1174   	; 0x622 <sysclk_enable_module>
 ab8:	ad c0       	rjmp	.+346    	; 0xc14 <usart_init_spi+0x382>
 aba:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
 abc:	84 81       	ldd	r24, Z+4	; 0x04
 abe:	8f 7e       	andi	r24, 0xEF	; 239
 ac0:	84 83       	std	Z+4, r24	; 0x04
 ac2:	fb 01       	movw	r30, r22
 ac4:	24 81       	ldd	r18, Z+4	; 0x04
 ac6:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
 ac8:	c7 01       	movw	r24, r14
 aca:	f0 ea       	ldi	r31, 0xA0	; 160
 acc:	ef 16       	cp	r14, r31
 ace:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
 ad0:	ff 06       	cpc	r15, r31
 ad2:	49 f4       	brne	.+18     	; 0xae6 <usart_init_spi+0x254>
 ad4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
 ad8:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
 ada:	a5 c0       	rjmp	.+330    	; 0xc26 <usart_init_spi+0x394>
 adc:	0f 2e       	mov	r0, r31
 ade:	f1 e1       	ldi	r31, 0x11	; 17
 ae0:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
 ae2:	f0 2d       	mov	r31, r0
 ae4:	a4 c0       	rjmp	.+328    	; 0xc2e <usart_init_spi+0x39c>
 ae6:	80 3b       	cpi	r24, 0xB0	; 176
 ae8:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
 aea:	93 07       	cpc	r25, r19
 aec:	91 f0       	breq	.+36     	; 0xb12 <usart_init_spi+0x280>
 aee:	80 3a       	cpi	r24, 0xA0	; 160
 af0:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
 af2:	9e 07       	cpc	r25, r30
 af4:	49 f4       	brne	.+18     	; 0xb08 <usart_init_spi+0x276>
 af6:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
 afa:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
 afc:	9b c0       	rjmp	.+310    	; 0xc34 <usart_init_spi+0x3a2>
 afe:	0f 2e       	mov	r0, r31
 b00:	f9 e1       	ldi	r31, 0x19	; 25
 b02:	df 2e       	mov	r13, r31
 b04:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
 b06:	16 c0       	rjmp	.+44     	; 0xb34 <usart_init_spi+0x2a2>
 b08:	80 3b       	cpi	r24, 0xB0	; 176
 b0a:	f9 e0       	ldi	r31, 0x09	; 9
 b0c:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
 b0e:	f1 f0       	breq	.+60     	; 0xb4c <usart_init_spi+0x2ba>
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <usart_init_spi+0x288>
 b12:	0f 2e       	mov	r0, r31
 b14:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
 b16:	df 2e       	mov	r13, r31
 b18:	f0 2d       	mov	r31, r0
 b1a:	80 3a       	cpi	r24, 0xA0	; 160
 b1c:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
 b1e:	93 07       	cpc	r25, r19
 b20:	49 f4       	brne	.+18     	; 0xb34 <usart_init_spi+0x2a2>
 b22:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
 b26:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
 b28:	8a c0       	rjmp	.+276    	; 0xc3e <usart_init_spi+0x3ac>
 b2a:	0f 2e       	mov	r0, r31
 b2c:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
 b2e:	df 2e       	mov	r13, r31
 b30:	f0 2d       	mov	r31, r0
 b32:	15 c0       	rjmp	.+42     	; 0xb5e <usart_init_spi+0x2cc>
 b34:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
 b36:	9b 40       	sbci	r25, 0x0B	; 11
 b38:	91 f4       	brne	.+36     	; 0xb5e <usart_init_spi+0x2cc>
 b3a:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
 b3e:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
 b40:	0a c0       	rjmp	.+20     	; 0xb56 <usart_init_spi+0x2c4>
 b42:	0f 2e       	mov	r0, r31
 b44:	f9 e2       	ldi	r31, 0x29	; 41
 b46:	df 2e       	mov	r13, r31
 b48:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
 b4a:	09 c0       	rjmp	.+18     	; 0xb5e <usart_init_spi+0x2cc>
 b4c:	0f 2e       	mov	r0, r31
 b4e:	fd e1       	ldi	r31, 0x1D	; 29
 b50:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 b52:	f0 2d       	mov	r31, r0
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <usart_init_spi+0x2cc>
 b56:	0f 2e       	mov	r0, r31
 b58:	fd e2       	ldi	r31, 0x2D	; 45
 b5a:	df 2e       	mov	r13, r31
 b5c:	f0 2d       	mov	r31, r0
 b5e:	ed 2d       	mov	r30, r13
 b60:	e6 95       	lsr	r30
 b62:	e6 95       	lsr	r30
 b64:	e6 95       	lsr	r30
 b66:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 b68:	e3 9f       	mul	r30, r19
 b6a:	f0 01       	movw	r30, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	fa 5f       	subi	r31, 0xFA	; 250
 b70:	3d 2d       	mov	r19, r13
 b72:	37 70       	andi	r19, 0x07	; 7
 b74:	81 e0       	ldi	r24, 0x01	; 1
 b76:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 b78:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <usart_init_spi+0x2ee>
 b7c:	88 0f       	add	r24, r24
 b7e:	99 1f       	adc	r25, r25
 b80:	0a 94       	dec	r0
 b82:	e2 f7       	brpl	.-8      	; 0xb7c <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
 b84:	81 83       	std	Z+1, r24	; 0x01
 b86:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
 b88:	10 f0       	brcs	.+4      	; 0xb8e <usart_init_spi+0x2fc>
 b8a:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 b8c:	01 c0       	rjmp	.+2      	; 0xb90 <usart_init_spi+0x2fe>
 b8e:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
 b90:	df 01       	movw	r26, r30
	return flags;
 b92:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
 b94:	a3 0f       	add	r26, r19
 b96:	b1 1d       	adc	r27, r1
 b98:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
 b9a:	99 83       	std	Y+1, r25	; 0x01
 b9c:	f8 94       	cli
 b9e:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 ba0:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 ba2:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 ba4:	2c 93       	st	X, r18
 ba6:	9c 91       	ld	r25, X
 ba8:	94 2b       	or	r25, r20
 baa:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
 bac:	3f bf       	out	0x3f, r19	; 63
 bae:	85 83       	std	Z+5, r24	; 0x05
 bb0:	f7 01       	movw	r30, r14
 bb2:	85 81       	ldd	r24, Z+5	; 0x05
 bb4:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
 bb6:	85 83       	std	Z+5, r24	; 0x05
 bb8:	f8 01       	movw	r30, r16
 bba:	84 81       	ldd	r24, Z+4	; 0x04
 bbc:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
 bbe:	81 30       	cpi	r24, 0x01	; 1
 bc0:	29 f4       	brne	.+10     	; 0xbcc <usart_init_spi+0x33a>
 bc2:	f7 01       	movw	r30, r14
 bc4:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
 bc6:	82 60       	ori	r24, 0x02	; 2
 bc8:	85 83       	std	Z+5, r24	; 0x05
 bca:	04 c0       	rjmp	.+8      	; 0xbd4 <usart_init_spi+0x342>
 bcc:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
 bce:	85 81       	ldd	r24, Z+5	; 0x05
 bd0:	8d 7f       	andi	r24, 0xFD	; 253
 bd2:	85 83       	std	Z+5, r24	; 0x05
 bd4:	f8 01       	movw	r30, r16
 bd6:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
 bd8:	88 23       	and	r24, r24
 bda:	29 f0       	breq	.+10     	; 0xbe6 <usart_init_spi+0x354>
 bdc:	f7 01       	movw	r30, r14
 bde:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 be0:	84 60       	ori	r24, 0x04	; 4
 be2:	85 83       	std	Z+5, r24	; 0x05
 be4:	04 c0       	rjmp	.+8      	; 0xbee <usart_init_spi+0x35c>
 be6:	f7 01       	movw	r30, r14
 be8:	85 81       	ldd	r24, Z+5	; 0x05
 bea:	8b 7f       	andi	r24, 0xFB	; 251
 bec:	85 83       	std	Z+5, r24	; 0x05
 bee:	f8 01       	movw	r30, r16
 bf0:	40 81       	ld	r20, Z
 bf2:	51 81       	ldd	r21, Z+1	; 0x01
 bf4:	62 81       	ldd	r22, Z+2	; 0x02
 bf6:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 bf8:	00 e0       	ldi	r16, 0x00	; 0
 bfa:	12 e1       	ldi	r17, 0x12	; 18
 bfc:	2a e7       	ldi	r18, 0x7A	; 122
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 c00:	c7 01       	movw	r24, r14
 c02:	16 de       	rcall	.-980    	; 0x830 <usart_spi_set_baudrate>
 c04:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 c06:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
 c08:	88 60       	ori	r24, 0x08	; 8
 c0a:	84 83       	std	Z+4, r24	; 0x04
 c0c:	84 81       	ldd	r24, Z+4	; 0x04
 c0e:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
 c10:	84 83       	std	Z+4, r24	; 0x04
 c12:	1a c0       	rjmp	.+52     	; 0xc48 <usart_init_spi+0x3b6>
 c14:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
 c16:	84 81       	ldd	r24, Z+4	; 0x04
 c18:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
 c1a:	84 83       	std	Z+4, r24	; 0x04
 c1c:	f8 01       	movw	r30, r16
 c1e:	24 81       	ldd	r18, Z+4	; 0x04
 c20:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
 c22:	c7 01       	movw	r24, r14
 c24:	60 cf       	rjmp	.-320    	; 0xae6 <usart_init_spi+0x254>
 c26:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
 c28:	f5 e1       	ldi	r31, 0x15	; 21
 c2a:	df 2e       	mov	r13, r31
 c2c:	f0 2d       	mov	r31, r0
 c2e:	80 ea       	ldi	r24, 0xA0	; 160
 c30:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
 c32:	6a cf       	rjmp	.-300    	; 0xb08 <usart_init_spi+0x276>
 c34:	0f 2e       	mov	r0, r31
 c36:	fd e1       	ldi	r31, 0x1D	; 29
 c38:	df 2e       	mov	r13, r31
 c3a:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 c3c:	7b cf       	rjmp	.-266    	; 0xb34 <usart_init_spi+0x2a2>
 c3e:	0f 2e       	mov	r0, r31
 c40:	f5 e2       	ldi	r31, 0x25	; 37
 c42:	df 2e       	mov	r13, r31
 c44:	f0 2d       	mov	r31, r0
 c46:	8b cf       	rjmp	.-234    	; 0xb5e <usart_init_spi+0x2cc>
 c48:	0f 90       	pop	r0
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	1f 91       	pop	r17
 c50:	0f 91       	pop	r16
 c52:	ff 90       	pop	r15
 c54:	ef 90       	pop	r14
 c56:	df 90       	pop	r13
 c58:	08 95       	ret

00000c5a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	71 09       	sbc	r23, r1
 c60:	81 09       	sbc	r24, r1
 c62:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 c64:	61 15       	cp	r22, r1
 c66:	71 05       	cpc	r23, r1
 c68:	81 05       	cpc	r24, r1
 c6a:	91 05       	cpc	r25, r1
 c6c:	b9 f7       	brne	.-18     	; 0xc5c <__portable_avr_delay_cycles+0x2>
 c6e:	08 95       	ret

00000c70 <st7565r_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
 c70:	1f 93       	push	r17
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	1f 92       	push	r1
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
 c7c:	18 2f       	mov	r17, r24
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 c7e:	8b e2       	ldi	r24, 0x2B	; 43
 c80:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 c82:	be 01       	movw	r22, r28
 c84:	6f 5f       	subi	r22, 0xFF	; 255
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	80 ea       	ldi	r24, 0xA0	; 160
 c8a:	99 e0       	ldi	r25, 0x09	; 9
 c8c:	50 dd       	rcall	.-1376   	; 0x72e <usart_spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 c94:	e0 ea       	ldi	r30, 0xA0	; 160
 c96:	f9 e0       	ldi	r31, 0x09	; 9
 c98:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 c9a:	85 ff       	sbrs	r24, 5
 c9c:	fd cf       	rjmp	.-6      	; 0xc98 <st7565r_write_command+0x28>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 c9e:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 ca2:	e0 ea       	ldi	r30, 0xA0	; 160
 ca4:	f9 e0       	ldi	r31, 0x09	; 9
 ca6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 ca8:	86 ff       	sbrs	r24, 6
 caa:	fd cf       	rjmp	.-6      	; 0xca6 <st7565r_write_command+0x36>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 cac:	e0 ea       	ldi	r30, 0xA0	; 160
 cae:	f9 e0       	ldi	r31, 0x09	; 9
 cb0:	80 e4       	ldi	r24, 0x40	; 64
 cb2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 cb4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 cb6:	be 01       	movw	r22, r28
 cb8:	6f 5f       	subi	r22, 0xFF	; 255
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	80 ea       	ldi	r24, 0xA0	; 160
 cbe:	99 e0       	ldi	r25, 0x09	; 9
 cc0:	4c dd       	rcall	.-1384   	; 0x75a <usart_spi_deselect_device>
	spi_select_device(ST7565R_SPI, &device);
	ioport_set_pin_low(ST7565R_A0_PIN);
	spi_write_single(ST7565R_SPI, command);
	spi_deselect_device(ST7565R_SPI, &device);
#endif
}
 cc2:	0f 90       	pop	r0
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	1f 91       	pop	r17
 cca:	08 95       	ret

00000ccc <main>:
#include <sysclk.h>
#include <st7565r.h>
#include "led.h"

int main(void)
{
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	1f 92       	push	r1
 cd2:	cd b7       	in	r28, 0x3d	; 61
	uint8_t column_address;
	//! store the LCD controller start draw line
	uint8_t start_line_address = 0;

	board_init();
	sysclk_init();
 cd4:	de b7       	in	r29, 0x3e	; 62
 cd6:	57 dd       	rcall	.-1362   	; 0x786 <board_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 cd8:	6b dc       	rcall	.-1834   	; 0x5b0 <sysclk_init>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 cda:	80 e1       	ldi	r24, 0x10	; 16
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 cdc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 ce0:	a3 da       	rcall	.-2746   	; 0x228 <st7565r_init>
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 ce2:	80 eb       	ldi	r24, 0xB0	; 176
 ce4:	c5 df       	rcall	.-118    	; 0xc70 <st7565r_write_command>
 ce6:	80 e1       	ldi	r24, 0x10	; 16
	// set addresses at beginning of display
	st7565r_set_page_address(0);
	st7565r_set_column_address(0);

	// fill display with lines
	for (page_address = 0; page_address <= 4; page_address++) {
 ce8:	c3 df       	rcall	.-122    	; 0xc70 <st7565r_write_command>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 cea:	80 e0       	ldi	r24, 0x00	; 0
 cec:	c1 df       	rcall	.-126    	; 0xc70 <st7565r_write_command>
 cee:	61 2c       	mov	r6, r1
 cf0:	0f 2e       	mov	r0, r31
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 cf2:	fb e2       	ldi	r31, 0x2B	; 43
 cf4:	8f 2e       	mov	r8, r31
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 cf6:	f0 2d       	mov	r31, r0
 cf8:	00 ea       	ldi	r16, 0xA0	; 160
 cfa:	19 e0       	ldi	r17, 0x09	; 9
 cfc:	0f 2e       	mov	r0, r31
 cfe:	f0 e6       	ldi	r31, 0x60	; 96
 d00:	cf 2e       	mov	r12, r31
 d02:	f6 e0       	ldi	r31, 0x06	; 6
 d04:	df 2e       	mov	r13, r31
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 d06:	f0 2d       	mov	r31, r0
 d08:	aa 24       	eor	r10, r10
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 d0a:	a3 94       	inc	r10
 d0c:	e0 2e       	mov	r14, r16
 d0e:	f1 2e       	mov	r15, r17
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 d10:	68 94       	set
 d12:	99 24       	eor	r9, r9
 d14:	96 f8       	bld	r9, 6
 d16:	0f 2e       	mov	r0, r31
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 d18:	fa ea       	ldi	r31, 0xAA	; 170
 d1a:	7f 2e       	mov	r7, r31
 d1c:	f0 2d       	mov	r31, r0
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 d1e:	86 2d       	mov	r24, r6
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 d20:	8f 70       	andi	r24, 0x0F	; 15
 d22:	80 6b       	ori	r24, 0xB0	; 176
 d24:	b8 2e       	mov	r11, r24
 d26:	89 82       	std	Y+1, r8	; 0x01
 d28:	be 01       	movw	r22, r28
 d2a:	6f 5f       	subi	r22, 0xFF	; 255
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255
 d2e:	c8 01       	movw	r24, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 d30:	fe dc       	rcall	.-1540   	; 0x72e <usart_spi_select_device>
 d32:	f6 01       	movw	r30, r12
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 d34:	a6 82       	std	Z+6, r10	; 0x06
 d36:	f8 01       	movw	r30, r16
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 d38:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 d3a:	85 ff       	sbrs	r24, 5
 d3c:	fc cf       	rjmp	.-8      	; 0xd36 <main+0x6a>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 d3e:	b0 82       	st	Z, r11
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 d40:	f8 01       	movw	r30, r16
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 d42:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 d44:	86 ff       	sbrs	r24, 6
 d46:	fc cf       	rjmp	.-8      	; 0xd40 <main+0x74>
 d48:	91 82       	std	Z+1, r9	; 0x01
 d4a:	80 81       	ld	r24, Z
 d4c:	be 01       	movw	r22, r28
 d4e:	6f 5f       	subi	r22, 0xFF	; 255
 d50:	7f 4f       	sbci	r23, 0xFF	; 255
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 d52:	c8 01       	movw	r24, r16
 d54:	02 dd       	rcall	.-1532   	; 0x75a <usart_spi_deselect_device>
 d56:	b1 2c       	mov	r11, r1
 d58:	8b 2d       	mov	r24, r11
 d5a:	8f 77       	andi	r24, 0x7F	; 127
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 d5c:	82 95       	swap	r24
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 d5e:	8f 70       	andi	r24, 0x0F	; 15
 d60:	80 61       	ori	r24, 0x10	; 16
 d62:	58 2e       	mov	r5, r24
 d64:	89 82       	std	Y+1, r8	; 0x01
 d66:	be 01       	movw	r22, r28
 d68:	6f 5f       	subi	r22, 0xFF	; 255
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	8e 2d       	mov	r24, r14
 d6e:	9f 2d       	mov	r25, r15
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 d70:	de dc       	rcall	.-1604   	; 0x72e <usart_spi_select_device>
 d72:	f6 01       	movw	r30, r12
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 d74:	a6 82       	std	Z+6, r10	; 0x06
 d76:	f8 01       	movw	r30, r16
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 d78:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 d7a:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 d7c:	fc cf       	rjmp	.-8      	; 0xd76 <main+0xaa>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 d7e:	50 82       	st	Z, r5
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 d80:	f8 01       	movw	r30, r16
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 d82:	81 81       	ldd	r24, Z+1	; 0x01
 d84:	86 ff       	sbrs	r24, 6
 d86:	fc cf       	rjmp	.-8      	; 0xd80 <main+0xb4>
 d88:	91 82       	std	Z+1, r9	; 0x01
 d8a:	80 81       	ld	r24, Z
 d8c:	be 01       	movw	r22, r28
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 d8e:	6f 5f       	subi	r22, 0xFF	; 255
 d90:	7f 4f       	sbci	r23, 0xFF	; 255
 d92:	8e 2d       	mov	r24, r14
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 d94:	9f 2d       	mov	r25, r15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 d96:	e1 dc       	rcall	.-1598   	; 0x75a <usart_spi_deselect_device>
 d98:	fb 2d       	mov	r31, r11
 d9a:	ff 70       	andi	r31, 0x0F	; 15
 d9c:	5f 2e       	mov	r5, r31
 d9e:	89 82       	std	Y+1, r8	; 0x01
 da0:	be 01       	movw	r22, r28
 da2:	6f 5f       	subi	r22, 0xFF	; 255
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8e 2d       	mov	r24, r14
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 da8:	9f 2d       	mov	r25, r15
 daa:	c1 dc       	rcall	.-1662   	; 0x72e <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 dac:	f6 01       	movw	r30, r12
 dae:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 db0:	f8 01       	movw	r30, r16
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 db2:	81 81       	ldd	r24, Z+1	; 0x01
 db4:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 db6:	fc cf       	rjmp	.-8      	; 0xdb0 <main+0xe4>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 db8:	50 82       	st	Z, r5
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 dba:	f8 01       	movw	r30, r16
 dbc:	81 81       	ldd	r24, Z+1	; 0x01
 dbe:	86 ff       	sbrs	r24, 6
 dc0:	fc cf       	rjmp	.-8      	; 0xdba <main+0xee>
 dc2:	91 82       	std	Z+1, r9	; 0x01
 dc4:	80 81       	ld	r24, Z
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 dc6:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 dc8:	6f 5f       	subi	r22, 0xFF	; 255
 dca:	7f 4f       	sbci	r23, 0xFF	; 255
 dcc:	8e 2d       	mov	r24, r14
 dce:	9f 2d       	mov	r25, r15
 dd0:	c4 dc       	rcall	.-1656   	; 0x75a <usart_spi_deselect_device>
 dd2:	89 82       	std	Y+1, r8	; 0x01
 dd4:	be 01       	movw	r22, r28
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 dd6:	6f 5f       	subi	r22, 0xFF	; 255
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 dda:	8e 2d       	mov	r24, r14
 ddc:	9f 2d       	mov	r25, r15
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 dde:	a7 dc       	rcall	.-1714   	; 0x72e <usart_spi_select_device>
 de0:	f6 01       	movw	r30, r12
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 de2:	a5 82       	std	Z+5, r10	; 0x05
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 de4:	f8 01       	movw	r30, r16
 de6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 de8:	85 ff       	sbrs	r24, 5
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 dea:	fc cf       	rjmp	.-8      	; 0xde4 <main+0x118>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 dec:	70 82       	st	Z, r7
 dee:	f8 01       	movw	r30, r16
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 df0:	81 81       	ldd	r24, Z+1	; 0x01
 df2:	86 ff       	sbrs	r24, 6
 df4:	fc cf       	rjmp	.-8      	; 0xdee <main+0x122>
 df6:	91 82       	std	Z+1, r9	; 0x01
 df8:	80 81       	ld	r24, Z
 dfa:	f6 01       	movw	r30, r12
 dfc:	a6 82       	std	Z+6, r10	; 0x06
		st7565r_set_page_address(page_address);
		for (column_address = 0; column_address < 128; column_address++) {
 dfe:	be 01       	movw	r22, r28
 e00:	6f 5f       	subi	r22, 0xFF	; 255
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8e 2d       	mov	r24, r14
	// set addresses at beginning of display
	st7565r_set_page_address(0);
	st7565r_set_column_address(0);

	// fill display with lines
	for (page_address = 0; page_address <= 4; page_address++) {
 e06:	9f 2d       	mov	r25, r15
 e08:	a8 dc       	rcall	.-1712   	; 0x75a <usart_spi_deselect_device>
 e0a:	b3 94       	inc	r11
 e0c:	f0 e8       	ldi	r31, 0x80	; 128
 e0e:	bf 12       	cpse	r11, r31
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 e10:	a3 cf       	rjmp	.-186    	; 0xd58 <main+0x8c>
 e12:	63 94       	inc	r6
 e14:	85 e0       	ldi	r24, 0x05	; 5
 e16:	68 12       	cpse	r6, r24
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 e18:	82 cf       	rjmp	.-252    	; 0xd1e <main+0x52>
 e1a:	80 e0       	ldi	r24, 0x00	; 0
 e1c:	0f 2e       	mov	r0, r31
 e1e:	fb e2       	ldi	r31, 0x2B	; 43
 e20:	9f 2e       	mov	r9, r31
 e22:	f0 2d       	mov	r31, r0
 e24:	00 ea       	ldi	r16, 0xA0	; 160
 e26:	19 e0       	ldi	r17, 0x09	; 9
 e28:	0f 2e       	mov	r0, r31
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 e2a:	f0 e6       	ldi	r31, 0x60	; 96
 e2c:	cf 2e       	mov	r12, r31
		}
	}

	// scroll the display using hardware support in the LCD controller
	while (true) {
		st7565r_set_display_start_line_address(start_line_address++);
 e2e:	f6 e0       	ldi	r31, 0x06	; 6
 e30:	df 2e       	mov	r13, r31
 e32:	f0 2d       	mov	r31, r0
 */
static inline void st7565r_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 e34:	aa 24       	eor	r10, r10
 e36:	a3 94       	inc	r10
 e38:	68 94       	set
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 e3a:	bb 24       	eor	r11, r11
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 e3c:	b6 f8       	bld	r11, 6
 e3e:	ee 24       	eor	r14, r14
 e40:	e3 94       	inc	r14
 e42:	e8 0e       	add	r14, r24
 e44:	8f 73       	andi	r24, 0x3F	; 63
 e46:	80 64       	ori	r24, 0x40	; 64
 e48:	f8 2e       	mov	r15, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 e4a:	99 82       	std	Y+1, r9	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 e4c:	be 01       	movw	r22, r28
 e4e:	6f 5f       	subi	r22, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 e50:	7f 4f       	sbci	r23, 0xFF	; 255
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 e52:	c8 01       	movw	r24, r16
 e54:	6c dc       	rcall	.-1832   	; 0x72e <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 e56:	f6 01       	movw	r30, r12
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 e58:	a6 82       	std	Z+6, r10	; 0x06
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 e5a:	f8 01       	movw	r30, r16
 e5c:	81 81       	ldd	r24, Z+1	; 0x01
 e5e:	85 ff       	sbrs	r24, 5
 e60:	fc cf       	rjmp	.-8      	; 0xe5a <main+0x18e>
 e62:	f0 82       	st	Z, r15
 e64:	f8 01       	movw	r30, r16
		delay_ms(250);
 e66:	81 81       	ldd	r24, Z+1	; 0x01
 e68:	86 ff       	sbrs	r24, 6
 e6a:	fc cf       	rjmp	.-8      	; 0xe64 <main+0x198>
 e6c:	b1 82       	std	Z+1, r11	; 0x01
 e6e:	80 81       	ld	r24, Z
 e70:	be 01       	movw	r22, r28
		}
	}

	// scroll the display using hardware support in the LCD controller
	while (true) {
		st7565r_set_display_start_line_address(start_line_address++);
 e72:	6f 5f       	subi	r22, 0xFF	; 255
		delay_ms(250);
	}
 e74:	7f 4f       	sbci	r23, 0xFF	; 255
 e76:	c8 01       	movw	r24, r16
 e78:	70 dc       	rcall	.-1824   	; 0x75a <usart_spi_deselect_device>
 e7a:	66 e1       	ldi	r22, 0x16	; 22
 e7c:	76 e1       	ldi	r23, 0x16	; 22
 e7e:	85 e0       	ldi	r24, 0x05	; 5
 e80:	90 e0       	ldi	r25, 0x00	; 0
 e82:	eb de       	rcall	.-554    	; 0xc5a <__portable_avr_delay_cycles>
 e84:	8e 2d       	mov	r24, r14
 e86:	db cf       	rjmp	.-74     	; 0xe3e <main+0x172>

00000e88 <__udivmodsi4>:
 e88:	a1 e2       	ldi	r26, 0x21	; 33
 e8a:	1a 2e       	mov	r1, r26
 e8c:	aa 1b       	sub	r26, r26
 e8e:	bb 1b       	sub	r27, r27
 e90:	fd 01       	movw	r30, r26
 e92:	0d c0       	rjmp	.+26     	; 0xeae <__udivmodsi4_ep>

00000e94 <__udivmodsi4_loop>:
 e94:	aa 1f       	adc	r26, r26
 e96:	bb 1f       	adc	r27, r27
 e98:	ee 1f       	adc	r30, r30
 e9a:	ff 1f       	adc	r31, r31
 e9c:	a2 17       	cp	r26, r18
 e9e:	b3 07       	cpc	r27, r19
 ea0:	e4 07       	cpc	r30, r20
 ea2:	f5 07       	cpc	r31, r21
 ea4:	20 f0       	brcs	.+8      	; 0xeae <__udivmodsi4_ep>
 ea6:	a2 1b       	sub	r26, r18
 ea8:	b3 0b       	sbc	r27, r19
 eaa:	e4 0b       	sbc	r30, r20
 eac:	f5 0b       	sbc	r31, r21

00000eae <__udivmodsi4_ep>:
 eae:	66 1f       	adc	r22, r22
 eb0:	77 1f       	adc	r23, r23
 eb2:	88 1f       	adc	r24, r24
 eb4:	99 1f       	adc	r25, r25
 eb6:	1a 94       	dec	r1
 eb8:	69 f7       	brne	.-38     	; 0xe94 <__udivmodsi4_loop>
 eba:	60 95       	com	r22
 ebc:	70 95       	com	r23
 ebe:	80 95       	com	r24
 ec0:	90 95       	com	r25
 ec2:	9b 01       	movw	r18, r22
 ec4:	ac 01       	movw	r20, r24
 ec6:	bd 01       	movw	r22, r26
 ec8:	cf 01       	movw	r24, r30
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>


Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d8  00802000  00001806  0000189a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008021d8  008021d8  00001a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b4da  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004245  00000000  00000000  0000d16a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042b4  00000000  00000000  000113af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00015664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002efcb  00000000  00000000  00015aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fd1  00000000  00000000  00044a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00047a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ab9b  00000000  00000000  00047ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	38 c1       	rjmp	.+624    	; 0x272 <__ctors_end>
       2:	00 00       	nop
       4:	57 c1       	rjmp	.+686    	; 0x2b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c1       	rjmp	.+682    	; 0x2b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c1       	rjmp	.+678    	; 0x2b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c1       	rjmp	.+674    	; 0x2b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c1       	rjmp	.+670    	; 0x2b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	4d c1       	rjmp	.+666    	; 0x2b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c1       	rjmp	.+662    	; 0x2b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c1       	rjmp	.+658    	; 0x2b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c1       	rjmp	.+654    	; 0x2b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c1       	rjmp	.+650    	; 0x2b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c1       	rjmp	.+646    	; 0x2b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c1       	rjmp	.+642    	; 0x2b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c1       	rjmp	.+638    	; 0x2b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c1       	rjmp	.+634    	; 0x2b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c1       	rjmp	.+630    	; 0x2b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	39 c1       	rjmp	.+626    	; 0x2b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	37 c1       	rjmp	.+622    	; 0x2b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	35 c1       	rjmp	.+618    	; 0x2b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	33 c1       	rjmp	.+614    	; 0x2b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	31 c1       	rjmp	.+610    	; 0x2b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	2f c1       	rjmp	.+606    	; 0x2b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c1       	rjmp	.+602    	; 0x2b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c1       	rjmp	.+598    	; 0x2b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c1       	rjmp	.+594    	; 0x2b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c1       	rjmp	.+590    	; 0x2b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c1       	rjmp	.+586    	; 0x2b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c1       	rjmp	.+582    	; 0x2b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	21 c1       	rjmp	.+578    	; 0x2b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	1f c1       	rjmp	.+574    	; 0x2b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c1       	rjmp	.+570    	; 0x2b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1b c1       	rjmp	.+566    	; 0x2b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	19 c1       	rjmp	.+562    	; 0x2b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	17 c1       	rjmp	.+558    	; 0x2b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	15 c1       	rjmp	.+554    	; 0x2b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	13 c1       	rjmp	.+550    	; 0x2b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	11 c1       	rjmp	.+546    	; 0x2b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	0f c1       	rjmp	.+542    	; 0x2b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	0d c1       	rjmp	.+538    	; 0x2b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0b c1       	rjmp	.+534    	; 0x2b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	09 c1       	rjmp	.+530    	; 0x2b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	07 c1       	rjmp	.+526    	; 0x2b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	05 c1       	rjmp	.+522    	; 0x2b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	03 c1       	rjmp	.+518    	; 0x2b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	01 c1       	rjmp	.+514    	; 0x2b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ff c0       	rjmp	.+510    	; 0x2b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	fd c0       	rjmp	.+506    	; 0x2b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fb c0       	rjmp	.+502    	; 0x2b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f9 c0       	rjmp	.+498    	; 0x2b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f7 c0       	rjmp	.+494    	; 0x2b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f5 c0       	rjmp	.+490    	; 0x2b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f3 c0       	rjmp	.+486    	; 0x2b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f1 c0       	rjmp	.+482    	; 0x2b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ef c0       	rjmp	.+478    	; 0x2b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ed c0       	rjmp	.+474    	; 0x2b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	eb c0       	rjmp	.+470    	; 0x2b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e9 c0       	rjmp	.+466    	; 0x2b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e7 c0       	rjmp	.+462    	; 0x2b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e5 c0       	rjmp	.+458    	; 0x2b4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e3 c0       	rjmp	.+454    	; 0x2b4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e1 c0       	rjmp	.+450    	; 0x2b4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	df c0       	rjmp	.+446    	; 0x2b4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	dd c0       	rjmp	.+442    	; 0x2b4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	db c0       	rjmp	.+438    	; 0x2b4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d9 c0       	rjmp	.+434    	; 0x2b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	d7 c0       	rjmp	.+430    	; 0x2b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	d5 c0       	rjmp	.+426    	; 0x2b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	d3 c0       	rjmp	.+422    	; 0x2b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	d1 c0       	rjmp	.+418    	; 0x2b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	cf c0       	rjmp	.+414    	; 0x2b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	cd c0       	rjmp	.+410    	; 0x2b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	cb c0       	rjmp	.+406    	; 0x2b4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	c9 c0       	rjmp	.+402    	; 0x2b4 <__bad_interrupt>
     122:	00 00       	nop
     124:	c7 c0       	rjmp	.+398    	; 0x2b4 <__bad_interrupt>
     126:	00 00       	nop
     128:	c5 c0       	rjmp	.+394    	; 0x2b4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	c3 c0       	rjmp	.+390    	; 0x2b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	c1 c0       	rjmp	.+386    	; 0x2b4 <__bad_interrupt>
     132:	00 00       	nop
     134:	bf c0       	rjmp	.+382    	; 0x2b4 <__bad_interrupt>
     136:	00 00       	nop
     138:	bd c0       	rjmp	.+378    	; 0x2b4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	bb c0       	rjmp	.+374    	; 0x2b4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	b9 c0       	rjmp	.+370    	; 0x2b4 <__bad_interrupt>
     142:	00 00       	nop
     144:	b7 c0       	rjmp	.+366    	; 0x2b4 <__bad_interrupt>
     146:	00 00       	nop
     148:	b5 c0       	rjmp	.+362    	; 0x2b4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	b3 c0       	rjmp	.+358    	; 0x2b4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	b1 c0       	rjmp	.+354    	; 0x2b4 <__bad_interrupt>
     152:	00 00       	nop
     154:	af c0       	rjmp	.+350    	; 0x2b4 <__bad_interrupt>
     156:	00 00       	nop
     158:	ad c0       	rjmp	.+346    	; 0x2b4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ab c0       	rjmp	.+342    	; 0x2b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	a9 c0       	rjmp	.+338    	; 0x2b4 <__bad_interrupt>
     162:	00 00       	nop
     164:	a7 c0       	rjmp	.+334    	; 0x2b4 <__bad_interrupt>
     166:	00 00       	nop
     168:	a5 c0       	rjmp	.+330    	; 0x2b4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a3 c0       	rjmp	.+326    	; 0x2b4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	a1 c0       	rjmp	.+322    	; 0x2b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	9f c0       	rjmp	.+318    	; 0x2b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	9d c0       	rjmp	.+314    	; 0x2b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	9b c0       	rjmp	.+310    	; 0x2b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	99 c0       	rjmp	.+306    	; 0x2b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	97 c0       	rjmp	.+302    	; 0x2b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	95 c0       	rjmp	.+298    	; 0x2b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	93 c0       	rjmp	.+294    	; 0x2b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	91 c0       	rjmp	.+290    	; 0x2b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	8f c0       	rjmp	.+286    	; 0x2b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	8d c0       	rjmp	.+282    	; 0x2b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	8b c0       	rjmp	.+278    	; 0x2b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	89 c0       	rjmp	.+274    	; 0x2b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	87 c0       	rjmp	.+270    	; 0x2b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	85 c0       	rjmp	.+266    	; 0x2b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	83 c0       	rjmp	.+262    	; 0x2b4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	81 c0       	rjmp	.+258    	; 0x2b4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	7f c0       	rjmp	.+254    	; 0x2b4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	7d c0       	rjmp	.+250    	; 0x2b4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	7b c0       	rjmp	.+246    	; 0x2b4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	79 c0       	rjmp	.+242    	; 0x2b4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	77 c0       	rjmp	.+238    	; 0x2b4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	75 c0       	rjmp	.+234    	; 0x2b4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	73 c0       	rjmp	.+230    	; 0x2b4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	71 c0       	rjmp	.+226    	; 0x2b4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	6f c0       	rjmp	.+222    	; 0x2b4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	6d c0       	rjmp	.+218    	; 0x2b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	6b c0       	rjmp	.+214    	; 0x2b4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	69 c0       	rjmp	.+210    	; 0x2b4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	67 c0       	rjmp	.+206    	; 0x2b4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	65 c0       	rjmp	.+202    	; 0x2b4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	63 c0       	rjmp	.+198    	; 0x2b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	61 c0       	rjmp	.+194    	; 0x2b4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	5f c0       	rjmp	.+190    	; 0x2b4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	5d c0       	rjmp	.+186    	; 0x2b4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	2a 09       	sbc	r18, r10
     1fe:	57 09       	sbc	r21, r7
     200:	57 09       	sbc	r21, r7
     202:	57 09       	sbc	r21, r7
     204:	57 09       	sbc	r21, r7
     206:	57 09       	sbc	r21, r7
     208:	57 09       	sbc	r21, r7
     20a:	57 09       	sbc	r21, r7
     20c:	57 09       	sbc	r21, r7
     20e:	57 09       	sbc	r21, r7
     210:	57 09       	sbc	r21, r7
     212:	57 09       	sbc	r21, r7
     214:	57 09       	sbc	r21, r7
     216:	57 09       	sbc	r21, r7
     218:	4b 09       	sbc	r20, r11
     21a:	57 09       	sbc	r21, r7
     21c:	48 09       	sbc	r20, r8
     21e:	2d 09       	sbc	r18, r13
     220:	30 09       	sbc	r19, r0
     222:	33 09       	sbc	r19, r3
     224:	36 09       	sbc	r19, r6
     226:	39 09       	sbc	r19, r9
     228:	3c 09       	sbc	r19, r12
     22a:	3f 09       	sbc	r19, r15
     22c:	42 09       	sbc	r20, r2
     22e:	45 09       	sbc	r20, r5
     230:	57 09       	sbc	r21, r7
     232:	57 09       	sbc	r21, r7
     234:	57 09       	sbc	r21, r7
     236:	57 09       	sbc	r21, r7
     238:	57 09       	sbc	r21, r7
     23a:	57 09       	sbc	r21, r7
     23c:	57 09       	sbc	r21, r7
     23e:	dc 08       	sbc	r13, r12
     240:	df 08       	sbc	r13, r15
     242:	e2 08       	sbc	r14, r2
     244:	e5 08       	sbc	r14, r5
     246:	e8 08       	sbc	r14, r8
     248:	eb 08       	sbc	r14, r11
     24a:	ee 08       	sbc	r14, r14
     24c:	f1 08       	sbc	r15, r1
     24e:	f4 08       	sbc	r15, r4
     250:	f7 08       	sbc	r15, r7
     252:	fa 08       	sbc	r15, r10
     254:	fd 08       	sbc	r15, r13
     256:	00 09       	sbc	r16, r0
     258:	03 09       	sbc	r16, r3
     25a:	06 09       	sbc	r16, r6
     25c:	09 09       	sbc	r16, r9
     25e:	0c 09       	sbc	r16, r12
     260:	0f 09       	sbc	r16, r15
     262:	12 09       	sbc	r17, r2
     264:	15 09       	sbc	r17, r5
     266:	18 09       	sbc	r17, r8
     268:	1b 09       	sbc	r17, r11
     26a:	1e 09       	sbc	r17, r14
     26c:	21 09       	sbc	r18, r1
     26e:	24 09       	sbc	r18, r4
     270:	27 09       	sbc	r18, r7

00000272 <__ctors_end>:
     272:	11 24       	eor	r1, r1
     274:	1f be       	out	0x3f, r1	; 63
     276:	cf ef       	ldi	r28, 0xFF	; 255
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	df e5       	ldi	r29, 0x5F	; 95
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	00 e0       	ldi	r16, 0x00	; 0
     280:	0c bf       	out	0x3c, r16	; 60

00000282 <__do_copy_data>:
     282:	11 e2       	ldi	r17, 0x21	; 33
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	e6 e0       	ldi	r30, 0x06	; 6
     28a:	f8 e1       	ldi	r31, 0x18	; 24
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	0b bf       	out	0x3b, r16	; 59
     290:	02 c0       	rjmp	.+4      	; 0x296 <__do_copy_data+0x14>
     292:	07 90       	elpm	r0, Z+
     294:	0d 92       	st	X+, r0
     296:	a8 3d       	cpi	r26, 0xD8	; 216
     298:	b1 07       	cpc	r27, r17
     29a:	d9 f7       	brne	.-10     	; 0x292 <__do_copy_data+0x10>

0000029c <__do_clear_bss>:
     29c:	21 e2       	ldi	r18, 0x21	; 33
     29e:	a8 ed       	ldi	r26, 0xD8	; 216
     2a0:	b1 e2       	ldi	r27, 0x21	; 33
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
     2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
     2a6:	ab 3d       	cpi	r26, 0xDB	; 219
     2a8:	b2 07       	cpc	r27, r18
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
     2ac:	0e 94 a2 0b 	call	0x1744	; 0x1744 <main>
     2b0:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <_exit>

000002b4 <__bad_interrupt>:
     2b4:	a5 ce       	rjmp	.-694    	; 0x0 <__vectors>

000002b6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     2b8:	61 50       	subi	r22, 0x01	; 1
     2ba:	71 09       	sbc	r23, r1
     2bc:	81 09       	sbc	r24, r1
     2be:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     2c0:	61 15       	cp	r22, r1
     2c2:	71 05       	cpc	r23, r1
     2c4:	81 05       	cpc	r24, r1
     2c6:	91 05       	cpc	r25, r1
     2c8:	b9 f7       	brne	.-18     	; 0x2b8 <__portable_avr_delay_cycles+0x2>
     2ca:	08 95       	ret

000002cc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	16 e0       	ldi	r17, 0x06	; 6
     2e8:	68 94       	set
     2ea:	ff 24       	eor	r15, r15
     2ec:	f3 f8       	bld	r15, 3
     2ee:	f8 01       	movw	r30, r16
     2f0:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     2f2:	6e e0       	ldi	r22, 0x0E	; 14
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	dd df       	rcall	.-70     	; 0x2b6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2fc:	f8 01       	movw	r30, r16
     2fe:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     300:	6e e0       	ldi	r22, 0x0E	; 14
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	d6 df       	rcall	.-84     	; 0x2b6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     30a:	0f 2e       	mov	r0, r31
     30c:	fb e2       	ldi	r31, 0x2B	; 43
     30e:	bf 2e       	mov	r11, r31
     310:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     312:	b9 82       	std	Y+1, r11	; 0x01
     314:	80 ea       	ldi	r24, 0xA0	; 160
     316:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     318:	13 d2       	rcall	.+1062   	; 0x740 <usart_spi_init>
     31a:	c1 2c       	mov	r12, r1
     31c:	d1 2c       	mov	r13, r1
     31e:	76 01       	movw	r14, r12
     320:	00 e4       	ldi	r16, 0x40	; 64
     322:	12 e4       	ldi	r17, 0x42	; 66
     324:	2f e0       	ldi	r18, 0x0F	; 15
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	43 e0       	ldi	r20, 0x03	; 3
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	80 ea       	ldi	r24, 0xA0	; 160
     332:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     334:	34 d2       	rcall	.+1128   	; 0x79e <usart_spi_setup_device>
     336:	00 e6       	ldi	r16, 0x60	; 96
     338:	16 e0       	ldi	r17, 0x06	; 6
     33a:	ff 24       	eor	r15, r15
     33c:	f3 94       	inc	r15
     33e:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     340:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     342:	b9 82       	std	Y+1, r11	; 0x01
     344:	be 01       	movw	r22, r28
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	80 ea       	ldi	r24, 0xA0	; 160
     34c:	99 e0       	ldi	r25, 0x09	; 9
     34e:	41 d2       	rcall	.+1154   	; 0x7d2 <usart_spi_select_device>
     350:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     352:	f6 82       	std	Z+6, r15	; 0x06
     354:	e0 ea       	ldi	r30, 0xA0	; 160
     356:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     358:	81 81       	ldd	r24, Z+1	; 0x01
     35a:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     35c:	fd cf       	rjmp	.-6      	; 0x358 <st7565r_init+0x8c>
     35e:	80 ea       	ldi	r24, 0xA0	; 160
     360:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     364:	e0 ea       	ldi	r30, 0xA0	; 160
     366:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     368:	81 81       	ldd	r24, Z+1	; 0x01
     36a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     36c:	fd cf       	rjmp	.-6      	; 0x368 <st7565r_init+0x9c>
     36e:	e0 ea       	ldi	r30, 0xA0	; 160
     370:	f9 e0       	ldi	r31, 0x09	; 9
     372:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     374:	81 83       	std	Z+1, r24	; 0x01
     376:	80 81       	ld	r24, Z
     378:	be 01       	movw	r22, r28
     37a:	6f 5f       	subi	r22, 0xFF	; 255
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     380:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     382:	3d d2       	rcall	.+1146   	; 0x7fe <usart_spi_deselect_device>
     384:	8b e2       	ldi	r24, 0x2B	; 43
     386:	89 83       	std	Y+1, r24	; 0x01
     388:	be 01       	movw	r22, r28
     38a:	6f 5f       	subi	r22, 0xFF	; 255
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	80 ea       	ldi	r24, 0xA0	; 160
     390:	99 e0       	ldi	r25, 0x09	; 9
     392:	1f d2       	rcall	.+1086   	; 0x7d2 <usart_spi_select_device>
     394:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     396:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     39a:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     39c:	f9 e0       	ldi	r31, 0x09	; 9
     39e:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3a0:	85 ff       	sbrs	r24, 5
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <st7565r_init+0xd2>
     3a4:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3a6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     3aa:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3ac:	f9 e0       	ldi	r31, 0x09	; 9
     3ae:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3b0:	86 ff       	sbrs	r24, 6
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <st7565r_init+0xe2>
     3b4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3b6:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	80 81       	ld	r24, Z
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     3c4:	80 ea       	ldi	r24, 0xA0	; 160
     3c6:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     3c8:	1a d2       	rcall	.+1076   	; 0x7fe <usart_spi_deselect_device>
     3ca:	8b e2       	ldi	r24, 0x2B	; 43
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	be 01       	movw	r22, r28
     3d0:	6f 5f       	subi	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	fc d1       	rcall	.+1016   	; 0x7d2 <usart_spi_select_device>
     3da:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3dc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3e0:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3e2:	f9 e0       	ldi	r31, 0x09	; 9
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <st7565r_init+0x118>
     3ea:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3ec:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     3f0:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3f2:	f9 e0       	ldi	r31, 0x09	; 9
     3f4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3f6:	86 ff       	sbrs	r24, 6
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <st7565r_init+0x128>
     3fa:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3fc:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3fe:	80 e4       	ldi	r24, 0x40	; 64
     400:	81 83       	std	Z+1, r24	; 0x01
     402:	80 81       	ld	r24, Z
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     40a:	80 ea       	ldi	r24, 0xA0	; 160
     40c:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     40e:	f7 d1       	rcall	.+1006   	; 0x7fe <usart_spi_deselect_device>
     410:	8b e2       	ldi	r24, 0x2B	; 43
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	be 01       	movw	r22, r28
     416:	6f 5f       	subi	r22, 0xFF	; 255
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	80 ea       	ldi	r24, 0xA0	; 160
     41c:	99 e0       	ldi	r25, 0x09	; 9
     41e:	d9 d1       	rcall	.+946    	; 0x7d2 <usart_spi_select_device>
     420:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     422:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     426:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     428:	f9 e0       	ldi	r31, 0x09	; 9
     42a:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     42c:	85 ff       	sbrs	r24, 5
     42e:	fd cf       	rjmp	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     432:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     436:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     438:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	86 ff       	sbrs	r24, 6
     43e:	fd cf       	rjmp	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     440:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     442:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	81 83       	std	Z+1, r24	; 0x01
     448:	80 81       	ld	r24, Z
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     454:	d4 d1       	rcall	.+936    	; 0x7fe <usart_spi_deselect_device>
     456:	8b e2       	ldi	r24, 0x2B	; 43
     458:	89 83       	std	Y+1, r24	; 0x01
     45a:	be 01       	movw	r22, r28
     45c:	6f 5f       	subi	r22, 0xFF	; 255
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	80 ea       	ldi	r24, 0xA0	; 160
     462:	99 e0       	ldi	r25, 0x09	; 9
     464:	b6 d1       	rcall	.+876    	; 0x7d2 <usart_spi_select_device>
     466:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     468:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     46c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     46e:	f9 e0       	ldi	r31, 0x09	; 9
     470:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     472:	85 ff       	sbrs	r24, 5
     474:	fd cf       	rjmp	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     476:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     478:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     47c:	e0 ea       	ldi	r30, 0xA0	; 160
     47e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     480:	81 81       	ldd	r24, Z+1	; 0x01
     482:	86 ff       	sbrs	r24, 6
     484:	fd cf       	rjmp	.-6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     486:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     488:	f9 e0       	ldi	r31, 0x09	; 9
     48a:	80 e4       	ldi	r24, 0x40	; 64
     48c:	81 83       	std	Z+1, r24	; 0x01
     48e:	80 81       	ld	r24, Z
     490:	be 01       	movw	r22, r28
     492:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     498:	99 e0       	ldi	r25, 0x09	; 9
     49a:	b1 d1       	rcall	.+866    	; 0x7fe <usart_spi_deselect_device>
     49c:	8b e2       	ldi	r24, 0x2B	; 43
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	be 01       	movw	r22, r28
     4a2:	6f 5f       	subi	r22, 0xFF	; 255
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	99 e0       	ldi	r25, 0x09	; 9
     4aa:	93 d1       	rcall	.+806    	; 0x7d2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4b2:	e0 ea       	ldi	r30, 0xA0	; 160
     4b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4bc:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     4be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     4c2:	e0 ea       	ldi	r30, 0xA0	; 160
     4c4:	f9 e0       	ldi	r31, 0x09	; 9
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     4c8:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4cc:	e0 ea       	ldi	r30, 0xA0	; 160
     4ce:	f9 e0       	ldi	r31, 0x09	; 9
     4d0:	80 e4       	ldi	r24, 0x40	; 64
     4d2:	81 83       	std	Z+1, r24	; 0x01
     4d4:	80 81       	ld	r24, Z
     4d6:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4dc:	80 ea       	ldi	r24, 0xA0	; 160
     4de:	99 e0       	ldi	r25, 0x09	; 9
     4e0:	8e d1       	rcall	.+796    	; 0x7fe <usart_spi_deselect_device>
     4e2:	8b e2       	ldi	r24, 0x2B	; 43
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	be 01       	movw	r22, r28
     4e8:	6f 5f       	subi	r22, 0xFF	; 255
     4ea:	7f 4f       	sbci	r23, 0xFF	; 255
     4ec:	80 ea       	ldi	r24, 0xA0	; 160
     4ee:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4f0:	70 d1       	rcall	.+736    	; 0x7d2 <usart_spi_select_device>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4f8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	81 81       	ldd	r24, Z+1	; 0x01
     4fe:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     500:	fd cf       	rjmp	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     502:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     506:	e0 ea       	ldi	r30, 0xA0	; 160
     508:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     50a:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     50c:	86 ff       	sbrs	r24, 6
     50e:	fd cf       	rjmp	.-6      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     510:	e0 ea       	ldi	r30, 0xA0	; 160
     512:	f9 e0       	ldi	r31, 0x09	; 9
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	81 83       	std	Z+1, r24	; 0x01
     518:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	99 e0       	ldi	r25, 0x09	; 9
     524:	6c d1       	rcall	.+728    	; 0x7fe <usart_spi_deselect_device>
     526:	8b e2       	ldi	r24, 0x2B	; 43
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	4e d1       	rcall	.+668    	; 0x7d2 <usart_spi_select_device>
     536:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     538:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     53c:	e0 ea       	ldi	r30, 0xA0	; 160
     53e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     540:	81 81       	ldd	r24, Z+1	; 0x01
     542:	85 ff       	sbrs	r24, 5
     544:	fd cf       	rjmp	.-6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     546:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     548:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     54c:	e0 ea       	ldi	r30, 0xA0	; 160
     54e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     550:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     552:	86 ff       	sbrs	r24, 6
     554:	fd cf       	rjmp	.-6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     556:	e0 ea       	ldi	r30, 0xA0	; 160
     558:	f9 e0       	ldi	r31, 0x09	; 9
     55a:	80 e4       	ldi	r24, 0x40	; 64
     55c:	81 83       	std	Z+1, r24	; 0x01
     55e:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	49 d1       	rcall	.+658    	; 0x7fe <usart_spi_deselect_device>
     56c:	8b e2       	ldi	r24, 0x2B	; 43
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	be 01       	movw	r22, r28
     572:	6f 5f       	subi	r22, 0xFF	; 255
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     578:	99 e0       	ldi	r25, 0x09	; 9
     57a:	2b d1       	rcall	.+598    	; 0x7d2 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     582:	e0 ea       	ldi	r30, 0xA0	; 160
     584:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     586:	81 81       	ldd	r24, Z+1	; 0x01
     588:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58a:	fd cf       	rjmp	.-6      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     58c:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     592:	e0 ea       	ldi	r30, 0xA0	; 160
     594:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     596:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     598:	86 ff       	sbrs	r24, 6
     59a:	fd cf       	rjmp	.-6      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59c:	e0 ea       	ldi	r30, 0xA0	; 160
     59e:	f9 e0       	ldi	r31, 0x09	; 9
     5a0:	80 e4       	ldi	r24, 0x40	; 64
     5a2:	81 83       	std	Z+1, r24	; 0x01
     5a4:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	80 ea       	ldi	r24, 0xA0	; 160
     5ae:	99 e0       	ldi	r25, 0x09	; 9
     5b0:	26 d1       	rcall	.+588    	; 0x7fe <usart_spi_deselect_device>
     5b2:	8b e2       	ldi	r24, 0x2B	; 43
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5bc:	80 ea       	ldi	r24, 0xA0	; 160
     5be:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c0:	08 d1       	rcall	.+528    	; 0x7d2 <usart_spi_select_device>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ca:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
     5ce:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5d2:	81 e2       	ldi	r24, 0x21	; 33
     5d4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d8:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5da:	f9 e0       	ldi	r31, 0x09	; 9
     5dc:	81 81       	ldd	r24, Z+1	; 0x01
     5de:	86 ff       	sbrs	r24, 6
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e2:	e0 ea       	ldi	r30, 0xA0	; 160
     5e4:	f9 e0       	ldi	r31, 0x09	; 9
     5e6:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e8:	81 83       	std	Z+1, r24	; 0x01
     5ea:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ec:	be 01       	movw	r22, r28
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	80 ea       	ldi	r24, 0xA0	; 160
     5f4:	99 e0       	ldi	r25, 0x09	; 9
     5f6:	03 d1       	rcall	.+518    	; 0x7fe <usart_spi_deselect_device>
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     604:	99 e0       	ldi	r25, 0x09	; 9
     606:	e5 d0       	rcall	.+458    	; 0x7d2 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60e:	e0 ea       	ldi	r30, 0xA0	; 160
     610:	f9 e0       	ldi	r31, 0x09	; 9
     612:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     614:	85 ff       	sbrs	r24, 5
     616:	fd cf       	rjmp	.-6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     618:	8f ea       	ldi	r24, 0xAF	; 175
     61a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     61e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     620:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     622:	81 81       	ldd	r24, Z+1	; 0x01
     624:	86 ff       	sbrs	r24, 6
     626:	fd cf       	rjmp	.-6      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     628:	e0 ea       	ldi	r30, 0xA0	; 160
     62a:	f9 e0       	ldi	r31, 0x09	; 9
     62c:	80 e4       	ldi	r24, 0x40	; 64
     62e:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     630:	80 81       	ld	r24, Z
     632:	be 01       	movw	r22, r28
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	99 e0       	ldi	r25, 0x09	; 9
     63c:	e0 d0       	rcall	.+448    	; 0x7fe <usart_spi_deselect_device>
     63e:	0f 90       	pop	r0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	08 95       	ret

00000654 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	1f 92       	push	r1
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     666:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     66a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     66e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     672:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     676:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     67a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     67e:	6c e0       	ldi	r22, 0x0C	; 12
     680:	81 e4       	ldi	r24, 0x41	; 65
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	21 d1       	rcall	.+578    	; 0x8c8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     686:	8f b7       	in	r24, 0x3f	; 63
     688:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     68a:	f8 94       	cli
	return flags;
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     68e:	e0 e5       	ldi	r30, 0x50	; 80
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	82 60       	ori	r24, 0x02	; 2
     696:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     698:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     69a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     69c:	81 ff       	sbrs	r24, 1
     69e:	fd cf       	rjmp	.-6      	; 0x69a <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	80 e4       	ldi	r24, 0x40	; 64
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	10 d1       	rcall	.+544    	; 0x8c8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6a8:	8f b7       	in	r24, 0x3f	; 63
     6aa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6ac:	f8 94       	cli
	return flags;
     6ae:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     6b0:	e0 e5       	ldi	r30, 0x50	; 80
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	8e 7f       	andi	r24, 0xFE	; 254
     6b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6ba:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	1f 92       	push	r1
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6d0:	9f b7       	in	r25, 0x3f	; 63
     6d2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     6d4:	f8 94       	cli
	return flags;
     6d6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     6d8:	e8 2f       	mov	r30, r24
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e0 59       	subi	r30, 0x90	; 144
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	60 95       	com	r22
     6e2:	80 81       	ld	r24, Z
     6e4:	68 23       	and	r22, r24
     6e6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6e8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     6ea:	0f 90       	pop	r0
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     6fc:	c6 2f       	mov	r28, r22
     6fe:	d0 e0       	ldi	r29, 0x00	; 0
     700:	de 01       	movw	r26, r28
     702:	02 2e       	mov	r0, r18
     704:	02 c0       	rjmp	.+4      	; 0x70a <ioport_configure_port_pin+0x18>
     706:	b5 95       	asr	r27
     708:	a7 95       	ror	r26
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <ioport_configure_port_pin+0x14>
     70e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     710:	50 8b       	std	Z+16, r21	; 0x10
     712:	2f 5f       	subi	r18, 0xFF	; 255
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     718:	28 30       	cpi	r18, 0x08	; 8
     71a:	31 05       	cpc	r19, r1
     71c:	89 f7       	brne	.-30     	; 0x700 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     71e:	40 ff       	sbrs	r20, 0
     720:	0a c0       	rjmp	.+20     	; 0x736 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     722:	41 ff       	sbrs	r20, 1
     724:	03 c0       	rjmp	.+6      	; 0x72c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     726:	fc 01       	movw	r30, r24
     728:	65 83       	std	Z+5, r22	; 0x05
     72a:	02 c0       	rjmp	.+4      	; 0x730 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     72c:	fc 01       	movw	r30, r24
     72e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     730:	fc 01       	movw	r30, r24
     732:	61 83       	std	Z+1, r22	; 0x01
     734:	02 c0       	rjmp	.+4      	; 0x73a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     736:	fc 01       	movw	r30, r24
     738:	62 83       	std	Z+2, r22	; 0x02
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     740:	80 3a       	cpi	r24, 0xA0	; 160
     742:	28 e0       	ldi	r18, 0x08	; 8
     744:	92 07       	cpc	r25, r18
     746:	21 f4       	brne	.+8      	; 0x750 <usart_spi_init+0x10>
     748:	60 e1       	ldi	r22, 0x10	; 16
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	bc cf       	rjmp	.-136    	; 0x6c6 <sysclk_enable_module>
     74e:	08 95       	ret
     750:	80 3b       	cpi	r24, 0xB0	; 176
     752:	28 e0       	ldi	r18, 0x08	; 8
     754:	92 07       	cpc	r25, r18
     756:	21 f4       	brne	.+8      	; 0x760 <usart_spi_init+0x20>
     758:	60 e2       	ldi	r22, 0x20	; 32
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	b4 cf       	rjmp	.-152    	; 0x6c6 <sysclk_enable_module>
     75e:	08 95       	ret
     760:	80 3a       	cpi	r24, 0xA0	; 160
     762:	29 e0       	ldi	r18, 0x09	; 9
     764:	92 07       	cpc	r25, r18
     766:	21 f4       	brne	.+8      	; 0x770 <usart_spi_init+0x30>
     768:	60 e1       	ldi	r22, 0x10	; 16
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	ac cf       	rjmp	.-168    	; 0x6c6 <sysclk_enable_module>
     76e:	08 95       	ret
     770:	80 3b       	cpi	r24, 0xB0	; 176
     772:	29 e0       	ldi	r18, 0x09	; 9
     774:	92 07       	cpc	r25, r18
     776:	21 f4       	brne	.+8      	; 0x780 <usart_spi_init+0x40>
     778:	60 e2       	ldi	r22, 0x20	; 32
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	a4 cf       	rjmp	.-184    	; 0x6c6 <sysclk_enable_module>
     77e:	08 95       	ret
     780:	80 3a       	cpi	r24, 0xA0	; 160
     782:	2a e0       	ldi	r18, 0x0A	; 10
     784:	92 07       	cpc	r25, r18
     786:	21 f4       	brne	.+8      	; 0x790 <usart_spi_init+0x50>
     788:	60 e1       	ldi	r22, 0x10	; 16
     78a:	85 e0       	ldi	r24, 0x05	; 5
     78c:	9c cf       	rjmp	.-200    	; 0x6c6 <sysclk_enable_module>
     78e:	08 95       	ret
     790:	80 3a       	cpi	r24, 0xA0	; 160
     792:	9b 40       	sbci	r25, 0x0B	; 11
     794:	19 f4       	brne	.+6      	; 0x79c <usart_spi_init+0x5c>
     796:	60 e1       	ldi	r22, 0x10	; 16
     798:	86 e0       	ldi	r24, 0x06	; 6
     79a:	95 cf       	rjmp	.-214    	; 0x6c6 <sysclk_enable_module>
     79c:	08 95       	ret

0000079e <usart_spi_setup_device>:
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <usart_spi_setup_device+0xa>
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <usart_spi_setup_device+0xc>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	09 83       	std	Y+1, r16	; 0x01
     7b0:	1a 83       	std	Y+2, r17	; 0x02
     7b2:	2b 83       	std	Y+3, r18	; 0x03
     7b4:	3c 83       	std	Y+4, r19	; 0x04
     7b6:	4d 83       	std	Y+5, r20	; 0x05
     7b8:	1e 82       	std	Y+6, r1	; 0x06
     7ba:	be 01       	movw	r22, r28
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	e8 d2       	rcall	.+1488   	; 0xd92 <usart_init_spi>
     7c2:	26 96       	adiw	r28, 0x06	; 6
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     7d2:	fb 01       	movw	r30, r22
     7d4:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     7d6:	e8 2f       	mov	r30, r24
     7d8:	e6 95       	lsr	r30
     7da:	e6 95       	lsr	r30
     7dc:	e6 95       	lsr	r30
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	e4 9f       	mul	r30, r20
     7e2:	f0 01       	movw	r30, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     7e8:	87 70       	andi	r24, 0x07	; 7
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	a9 01       	movw	r20, r18
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <usart_spi_select_device+0x24>
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	8a 95       	dec	r24
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     7fa:	46 83       	std	Z+6, r20	; 0x06
     7fc:	08 95       	ret

000007fe <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     7fe:	fb 01       	movw	r30, r22
     800:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     802:	e8 2f       	mov	r30, r24
     804:	e6 95       	lsr	r30
     806:	e6 95       	lsr	r30
     808:	e6 95       	lsr	r30
     80a:	40 e2       	ldi	r20, 0x20	; 32
     80c:	e4 9f       	mul	r30, r20
     80e:	f0 01       	movw	r30, r0
     810:	11 24       	eor	r1, r1
     812:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     814:	87 70       	andi	r24, 0x07	; 7
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	a9 01       	movw	r20, r18
     81c:	02 c0       	rjmp	.+4      	; 0x822 <usart_spi_deselect_device+0x24>
     81e:	44 0f       	add	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	8a 95       	dec	r24
     824:	e2 f7       	brpl	.-8      	; 0x81e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     826:	45 83       	std	Z+5, r20	; 0x05
     828:	08 95       	ret

0000082a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     82a:	43 e0       	ldi	r20, 0x03	; 3
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	80 ee       	ldi	r24, 0xE0	; 224
     832:	97 e0       	ldi	r25, 0x07	; 7
     834:	5e df       	rcall	.-324    	; 0x6f2 <ioport_configure_port_pin>
     836:	43 e0       	ldi	r20, 0x03	; 3
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	80 ee       	ldi	r24, 0xE0	; 224
     83e:	97 e0       	ldi	r25, 0x07	; 7
     840:	58 df       	rcall	.-336    	; 0x6f2 <ioport_configure_port_pin>
     842:	43 e0       	ldi	r20, 0x03	; 3
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	60 e1       	ldi	r22, 0x10	; 16
     848:	80 e6       	ldi	r24, 0x60	; 96
     84a:	96 e0       	ldi	r25, 0x06	; 6
     84c:	52 df       	rcall	.-348    	; 0x6f2 <ioport_configure_port_pin>
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	50 e4       	ldi	r21, 0x40	; 64
     852:	60 e2       	ldi	r22, 0x20	; 32
     854:	80 e6       	ldi	r24, 0x60	; 96
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	4c df       	rcall	.-360    	; 0x6f2 <ioport_configure_port_pin>
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	5b e1       	ldi	r21, 0x1B	; 27
     85e:	60 e2       	ldi	r22, 0x20	; 32
     860:	80 e8       	ldi	r24, 0x80	; 128
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	46 df       	rcall	.-372    	; 0x6f2 <ioport_configure_port_pin>
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	5b e1       	ldi	r21, 0x1B	; 27
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	96 e0       	ldi	r25, 0x06	; 6
     870:	40 df       	rcall	.-384    	; 0x6f2 <ioport_configure_port_pin>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	5b e1       	ldi	r21, 0x1B	; 27
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	80 ea       	ldi	r24, 0xA0	; 160
     87a:	96 e0       	ldi	r25, 0x06	; 6
     87c:	3a df       	rcall	.-396    	; 0x6f2 <ioport_configure_port_pin>
     87e:	43 e0       	ldi	r20, 0x03	; 3
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	80 e6       	ldi	r24, 0x60	; 96
     886:	96 e0       	ldi	r25, 0x06	; 6
     888:	34 df       	rcall	.-408    	; 0x6f2 <ioport_configure_port_pin>
     88a:	43 e0       	ldi	r20, 0x03	; 3
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	68 e0       	ldi	r22, 0x08	; 8
     890:	80 e6       	ldi	r24, 0x60	; 96
     892:	96 e0       	ldi	r25, 0x06	; 6
     894:	2e df       	rcall	.-420    	; 0x6f2 <ioport_configure_port_pin>
     896:	43 e0       	ldi	r20, 0x03	; 3
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	68 e0       	ldi	r22, 0x08	; 8
     89c:	80 ea       	ldi	r24, 0xA0	; 160
     89e:	96 e0       	ldi	r25, 0x06	; 6
     8a0:	28 df       	rcall	.-432    	; 0x6f2 <ioport_configure_port_pin>
     8a2:	43 e0       	ldi	r20, 0x03	; 3
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	80 e6       	ldi	r24, 0x60	; 96
     8aa:	96 e0       	ldi	r25, 0x06	; 6
     8ac:	22 df       	rcall	.-444    	; 0x6f2 <ioport_configure_port_pin>
     8ae:	43 e0       	ldi	r20, 0x03	; 3
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	68 e0       	ldi	r22, 0x08	; 8
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	96 e0       	ldi	r25, 0x06	; 6
     8b8:	1c df       	rcall	.-456    	; 0x6f2 <ioport_configure_port_pin>
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	60 e1       	ldi	r22, 0x10	; 16
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	96 e0       	ldi	r25, 0x06	; 6
     8c4:	16 cf       	rjmp	.-468    	; 0x6f2 <ioport_configure_port_pin>
     8c6:	08 95       	ret

000008c8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     8c8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     8ca:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     8cc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     8ce:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     8d0:	60 83       	st	Z, r22
	ret                             // Return to caller
     8d2:	08 95       	ret

000008d4 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     8d4:	fc 01       	movw	r30, r24
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	95 ff       	sbrs	r25, 5
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <usart_putchar+0x2>
     8dc:	60 83       	st	Z, r22
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	08 95       	ret

000008e4 <usart_getchar>:
     8e4:	fc 01       	movw	r30, r24
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	99 23       	and	r25, r25
     8ea:	ec f7       	brge	.-6      	; 0x8e6 <usart_getchar+0x2>
     8ec:	80 81       	ld	r24, Z
     8ee:	08 95       	ret

000008f0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	7c 01       	movw	r14, r24
     90c:	4a 01       	movw	r8, r20
     90e:	5b 01       	movw	r10, r22
     910:	28 01       	movw	r4, r16
     912:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     914:	fc 01       	movw	r30, r24
     916:	84 81       	ldd	r24, Z+4	; 0x04
     918:	82 ff       	sbrs	r24, 2
     91a:	16 c0       	rjmp	.+44     	; 0x948 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     91c:	d9 01       	movw	r26, r18
     91e:	c8 01       	movw	r24, r16
     920:	68 94       	set
     922:	12 f8       	bld	r1, 2
     924:	b6 95       	lsr	r27
     926:	a7 95       	ror	r26
     928:	97 95       	ror	r25
     92a:	87 95       	ror	r24
     92c:	16 94       	lsr	r1
     92e:	d1 f7       	brne	.-12     	; 0x924 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     930:	b9 01       	movw	r22, r18
     932:	a8 01       	movw	r20, r16
     934:	03 2e       	mov	r0, r19
     936:	36 e1       	ldi	r19, 0x16	; 22
     938:	76 95       	lsr	r23
     93a:	67 95       	ror	r22
     93c:	57 95       	ror	r21
     93e:	47 95       	ror	r20
     940:	3a 95       	dec	r19
     942:	d1 f7       	brne	.-12     	; 0x938 <usart_set_baudrate+0x48>
     944:	30 2d       	mov	r19, r0
     946:	15 c0       	rjmp	.+42     	; 0x972 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     948:	d9 01       	movw	r26, r18
     94a:	c8 01       	movw	r24, r16
     94c:	68 94       	set
     94e:	13 f8       	bld	r1, 3
     950:	b6 95       	lsr	r27
     952:	a7 95       	ror	r26
     954:	97 95       	ror	r25
     956:	87 95       	ror	r24
     958:	16 94       	lsr	r1
     95a:	d1 f7       	brne	.-12     	; 0x950 <usart_set_baudrate+0x60>
		min_rate /= 2;
     95c:	b9 01       	movw	r22, r18
     95e:	a8 01       	movw	r20, r16
     960:	03 2e       	mov	r0, r19
     962:	37 e1       	ldi	r19, 0x17	; 23
     964:	76 95       	lsr	r23
     966:	67 95       	ror	r22
     968:	57 95       	ror	r21
     96a:	47 95       	ror	r20
     96c:	3a 95       	dec	r19
     96e:	d1 f7       	brne	.-12     	; 0x964 <usart_set_baudrate+0x74>
     970:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     972:	88 15       	cp	r24, r8
     974:	99 05       	cpc	r25, r9
     976:	aa 05       	cpc	r26, r10
     978:	bb 05       	cpc	r27, r11
     97a:	08 f4       	brcc	.+2      	; 0x97e <usart_set_baudrate+0x8e>
     97c:	a2 c0       	rjmp	.+324    	; 0xac2 <usart_set_baudrate+0x1d2>
     97e:	84 16       	cp	r8, r20
     980:	95 06       	cpc	r9, r21
     982:	a6 06       	cpc	r10, r22
     984:	b7 06       	cpc	r11, r23
     986:	08 f4       	brcc	.+2      	; 0x98a <usart_set_baudrate+0x9a>
     988:	9e c0       	rjmp	.+316    	; 0xac6 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     98a:	f7 01       	movw	r30, r14
     98c:	84 81       	ldd	r24, Z+4	; 0x04
     98e:	82 fd       	sbrc	r24, 2
     990:	04 c0       	rjmp	.+8      	; 0x99a <usart_set_baudrate+0xaa>
		baud *= 2;
     992:	88 0c       	add	r8, r8
     994:	99 1c       	adc	r9, r9
     996:	aa 1c       	adc	r10, r10
     998:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     99a:	c3 01       	movw	r24, r6
     99c:	b2 01       	movw	r22, r4
     99e:	a5 01       	movw	r20, r10
     9a0:	94 01       	movw	r18, r8
     9a2:	05 d7       	rcall	.+3594   	; 0x17ae <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     9a4:	2f 3f       	cpi	r18, 0xFF	; 255
     9a6:	31 05       	cpc	r19, r1
     9a8:	41 05       	cpc	r20, r1
     9aa:	51 05       	cpc	r21, r1
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <usart_set_baudrate+0xc0>
     9ae:	8d c0       	rjmp	.+282    	; 0xaca <usart_set_baudrate+0x1da>
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	c9 ef       	ldi	r28, 0xF9	; 249
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <usart_set_baudrate+0xd6>
     9bc:	28 17       	cp	r18, r24
     9be:	39 07       	cpc	r19, r25
     9c0:	4a 07       	cpc	r20, r26
     9c2:	5b 07       	cpc	r21, r27
     9c4:	58 f0       	brcs	.+22     	; 0x9dc <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     9ce:	cd 3f       	cpi	r28, 0xFD	; 253
     9d0:	0c f4       	brge	.+2      	; 0x9d4 <usart_set_baudrate+0xe4>
			limit |= 1;
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9d6:	c7 30       	cpi	r28, 0x07	; 7
     9d8:	89 f7       	brne	.-30     	; 0x9bc <usart_set_baudrate+0xcc>
     9da:	4d c0       	rjmp	.+154    	; 0xa76 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     9dc:	cc 23       	and	r28, r28
     9de:	0c f0       	brlt	.+2      	; 0x9e2 <usart_set_baudrate+0xf2>
     9e0:	4a c0       	rjmp	.+148    	; 0xa76 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9e2:	d5 01       	movw	r26, r10
     9e4:	c4 01       	movw	r24, r8
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	aa 1f       	adc	r26, r26
     9f4:	bb 1f       	adc	r27, r27
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	48 1a       	sub	r4, r24
     a00:	59 0a       	sbc	r5, r25
     a02:	6a 0a       	sbc	r6, r26
     a04:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     a06:	ce 3f       	cpi	r28, 0xFE	; 254
     a08:	ec f4       	brge	.+58     	; 0xa44 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     a0a:	8d ef       	ldi	r24, 0xFD	; 253
     a0c:	9f ef       	ldi	r25, 0xFF	; 255
     a0e:	8c 1b       	sub	r24, r28
     a10:	91 09       	sbc	r25, r1
     a12:	c7 fd       	sbrc	r28, 7
     a14:	93 95       	inc	r25
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <usart_set_baudrate+0x130>
     a18:	44 0c       	add	r4, r4
     a1a:	55 1c       	adc	r5, r5
     a1c:	66 1c       	adc	r6, r6
     a1e:	77 1c       	adc	r7, r7
     a20:	8a 95       	dec	r24
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <usart_set_baudrate+0x128>
     a24:	d5 01       	movw	r26, r10
     a26:	c4 01       	movw	r24, r8
     a28:	b6 95       	lsr	r27
     a2a:	a7 95       	ror	r26
     a2c:	97 95       	ror	r25
     a2e:	87 95       	ror	r24
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	64 0d       	add	r22, r4
     a36:	75 1d       	adc	r23, r5
     a38:	86 1d       	adc	r24, r6
     a3a:	97 1d       	adc	r25, r7
     a3c:	a5 01       	movw	r20, r10
     a3e:	94 01       	movw	r18, r8
     a40:	b6 d6       	rcall	.+3436   	; 0x17ae <__udivmodsi4>
     a42:	35 c0       	rjmp	.+106    	; 0xaae <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	8c 0f       	add	r24, r28
     a48:	a5 01       	movw	r20, r10
     a4a:	94 01       	movw	r18, r8
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <usart_set_baudrate+0x166>
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	44 1f       	adc	r20, r20
     a54:	55 1f       	adc	r21, r21
     a56:	8a 95       	dec	r24
     a58:	d2 f7       	brpl	.-12     	; 0xa4e <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     a5a:	da 01       	movw	r26, r20
     a5c:	c9 01       	movw	r24, r18
     a5e:	b6 95       	lsr	r27
     a60:	a7 95       	ror	r26
     a62:	97 95       	ror	r25
     a64:	87 95       	ror	r24
     a66:	bc 01       	movw	r22, r24
     a68:	cd 01       	movw	r24, r26
     a6a:	64 0d       	add	r22, r4
     a6c:	75 1d       	adc	r23, r5
     a6e:	86 1d       	adc	r24, r6
     a70:	97 1d       	adc	r25, r7
     a72:	9d d6       	rcall	.+3386   	; 0x17ae <__udivmodsi4>
     a74:	1c c0       	rjmp	.+56     	; 0xaae <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 0f       	add	r24, r28
     a7a:	a5 01       	movw	r20, r10
     a7c:	94 01       	movw	r18, r8
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <usart_set_baudrate+0x198>
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	44 1f       	adc	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	8a 95       	dec	r24
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     a8c:	da 01       	movw	r26, r20
     a8e:	c9 01       	movw	r24, r18
     a90:	b6 95       	lsr	r27
     a92:	a7 95       	ror	r26
     a94:	97 95       	ror	r25
     a96:	87 95       	ror	r24
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	64 0d       	add	r22, r4
     a9e:	75 1d       	adc	r23, r5
     aa0:	86 1d       	adc	r24, r6
     aa2:	97 1d       	adc	r25, r7
     aa4:	84 d6       	rcall	.+3336   	; 0x17ae <__udivmodsi4>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
     aaa:	41 09       	sbc	r20, r1
     aac:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     aae:	83 2f       	mov	r24, r19
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	c2 95       	swap	r28
     ab4:	c0 7f       	andi	r28, 0xF0	; 240
     ab6:	c8 2b       	or	r28, r24
     ab8:	f7 01       	movw	r30, r14
     aba:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     abc:	26 83       	std	Z+6, r18	; 0x06

	return true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	18 c0       	rjmp	.+48     	; 0xaf2 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <usart_set_baudrate+0x202>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     aca:	d5 01       	movw	r26, r10
     acc:	c4 01       	movw	r24, r8
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	aa 1f       	adc	r26, r26
     adc:	bb 1f       	adc	r27, r27
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	48 1a       	sub	r4, r24
     ae8:	59 0a       	sbc	r5, r25
     aea:	6a 0a       	sbc	r6, r26
     aec:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     aee:	c9 ef       	ldi	r28, 0xF9	; 249
     af0:	8c cf       	rjmp	.-232    	; 0xa0a <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	bf 90       	pop	r11
     afe:	af 90       	pop	r10
     b00:	9f 90       	pop	r9
     b02:	8f 90       	pop	r8
     b04:	7f 90       	pop	r7
     b06:	6f 90       	pop	r6
     b08:	5f 90       	pop	r5
     b0a:	4f 90       	pop	r4
     b0c:	08 95       	ret

00000b0e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	09 f4       	brne	.+2      	; 0xb20 <usart_init_rs232+0x12>
     b1e:	e6 c0       	rjmp	.+460    	; 0xcec <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b20:	80 3c       	cpi	r24, 0xC0	; 192
     b22:	91 05       	cpc	r25, r1
     b24:	21 f4       	brne	.+8      	; 0xb2e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b26:	60 e1       	ldi	r22, 0x10	; 16
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	cd dd       	rcall	.-1126   	; 0x6c6 <sysclk_enable_module>
     b2c:	df c0       	rjmp	.+446    	; 0xcec <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b2e:	c0 38       	cpi	r28, 0x80	; 128
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	d8 07       	cpc	r29, r24
     b34:	21 f4       	brne	.+8      	; 0xb3e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	c5 dd       	rcall	.-1142   	; 0x6c6 <sysclk_enable_module>
     b3c:	d7 c0       	rjmp	.+430    	; 0xcec <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b3e:	c1 15       	cp	r28, r1
     b40:	e1 e0       	ldi	r30, 0x01	; 1
     b42:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b44:	21 f4       	brne	.+8      	; 0xb4e <usart_init_rs232+0x40>
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	bd dd       	rcall	.-1158   	; 0x6c6 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b4c:	cf c0       	rjmp	.+414    	; 0xcec <usart_init_rs232+0x1de>
     b4e:	c0 38       	cpi	r28, 0x80	; 128
     b50:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b52:	df 07       	cpc	r29, r31
     b54:	21 f4       	brne	.+8      	; 0xb5e <usart_init_rs232+0x50>
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	b5 dd       	rcall	.-1174   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b5c:	c7 c0       	rjmp	.+398    	; 0xcec <usart_init_rs232+0x1de>
     b5e:	c0 39       	cpi	r28, 0x90	; 144
     b60:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b62:	d8 07       	cpc	r29, r24
     b64:	21 f4       	brne	.+8      	; 0xb6e <usart_init_rs232+0x60>
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	ad dd       	rcall	.-1190   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b6c:	bf c0       	rjmp	.+382    	; 0xcec <usart_init_rs232+0x1de>
     b6e:	c1 15       	cp	r28, r1
     b70:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b72:	de 07       	cpc	r29, r30
     b74:	21 f4       	brne	.+8      	; 0xb7e <usart_init_rs232+0x70>
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b7a:	a5 dd       	rcall	.-1206   	; 0x6c6 <sysclk_enable_module>
     b7c:	b7 c0       	rjmp	.+366    	; 0xcec <usart_init_rs232+0x1de>
     b7e:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b80:	f2 e0       	ldi	r31, 0x02	; 2
     b82:	df 07       	cpc	r29, r31
     b84:	21 f4       	brne	.+8      	; 0xb8e <usart_init_rs232+0x80>
     b86:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	9d dd       	rcall	.-1222   	; 0x6c6 <sysclk_enable_module>
     b8c:	af c0       	rjmp	.+350    	; 0xcec <usart_init_rs232+0x1de>
     b8e:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	d8 07       	cpc	r29, r24
     b94:	21 f4       	brne	.+8      	; 0xb9e <usart_init_rs232+0x90>
     b96:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	95 dd       	rcall	.-1238   	; 0x6c6 <sysclk_enable_module>
     b9c:	a7 c0       	rjmp	.+334    	; 0xcec <usart_init_rs232+0x1de>
     b9e:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     ba0:	e8 e0       	ldi	r30, 0x08	; 8
     ba2:	de 07       	cpc	r29, r30
     ba4:	21 f4       	brne	.+8      	; 0xbae <usart_init_rs232+0xa0>
     ba6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	8d dd       	rcall	.-1254   	; 0x6c6 <sysclk_enable_module>
     bac:	9f c0       	rjmp	.+318    	; 0xcec <usart_init_rs232+0x1de>
     bae:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bb0:	f9 e0       	ldi	r31, 0x09	; 9
     bb2:	df 07       	cpc	r29, r31
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_init_rs232+0xb0>
     bb6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	85 dd       	rcall	.-1270   	; 0x6c6 <sysclk_enable_module>
     bbc:	97 c0       	rjmp	.+302    	; 0xcec <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bbe:	c1 15       	cp	r28, r1
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	d8 07       	cpc	r29, r24
     bc4:	21 f4       	brne	.+8      	; 0xbce <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	85 e0       	ldi	r24, 0x05	; 5
     bca:	7d dd       	rcall	.-1286   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bcc:	8f c0       	rjmp	.+286    	; 0xcec <usart_init_rs232+0x1de>
     bce:	c1 15       	cp	r28, r1
     bd0:	eb e0       	ldi	r30, 0x0B	; 11
     bd2:	de 07       	cpc	r29, r30
     bd4:	21 f4       	brne	.+8      	; 0xbde <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	75 dd       	rcall	.-1302   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     bdc:	87 c0       	rjmp	.+270    	; 0xcec <usart_init_rs232+0x1de>
     bde:	c0 34       	cpi	r28, 0x40	; 64
     be0:	f8 e0       	ldi	r31, 0x08	; 8
     be2:	df 07       	cpc	r29, r31
     be4:	21 f4       	brne	.+8      	; 0xbee <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	6d dd       	rcall	.-1318   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     bec:	7f c0       	rjmp	.+254    	; 0xcec <usart_init_rs232+0x1de>
     bee:	c0 34       	cpi	r28, 0x40	; 64
     bf0:	89 e0       	ldi	r24, 0x09	; 9
     bf2:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     bf4:	21 f4       	brne	.+8      	; 0xbfe <usart_init_rs232+0xf0>
     bf6:	62 e0       	ldi	r22, 0x02	; 2
     bf8:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     bfa:	65 dd       	rcall	.-1334   	; 0x6c6 <sysclk_enable_module>
     bfc:	77 c0       	rjmp	.+238    	; 0xcec <usart_init_rs232+0x1de>
     bfe:	c0 34       	cpi	r28, 0x40	; 64
     c00:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c02:	de 07       	cpc	r29, r30
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_init_rs232+0x100>
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c0a:	5d dd       	rcall	.-1350   	; 0x6c6 <sysclk_enable_module>
     c0c:	6f c0       	rjmp	.+222    	; 0xcec <usart_init_rs232+0x1de>
     c0e:	c0 39       	cpi	r28, 0x90	; 144
     c10:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c12:	df 07       	cpc	r29, r31
     c14:	21 f4       	brne	.+8      	; 0xc1e <usart_init_rs232+0x110>
     c16:	64 e0       	ldi	r22, 0x04	; 4
     c18:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c1a:	55 dd       	rcall	.-1366   	; 0x6c6 <sysclk_enable_module>
     c1c:	67 c0       	rjmp	.+206    	; 0xcec <usart_init_rs232+0x1de>
     c1e:	c0 39       	cpi	r28, 0x90	; 144
     c20:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c22:	d8 07       	cpc	r29, r24
     c24:	21 f4       	brne	.+8      	; 0xc2e <usart_init_rs232+0x120>
     c26:	64 e0       	ldi	r22, 0x04	; 4
     c28:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c2a:	4d dd       	rcall	.-1382   	; 0x6c6 <sysclk_enable_module>
     c2c:	5f c0       	rjmp	.+190    	; 0xcec <usart_init_rs232+0x1de>
     c2e:	c0 39       	cpi	r28, 0x90	; 144
     c30:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c32:	de 07       	cpc	r29, r30
     c34:	21 f4       	brne	.+8      	; 0xc3e <usart_init_rs232+0x130>
     c36:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	45 dd       	rcall	.-1398   	; 0x6c6 <sysclk_enable_module>
     c3c:	57 c0       	rjmp	.+174    	; 0xcec <usart_init_rs232+0x1de>
     c3e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c40:	fb e0       	ldi	r31, 0x0B	; 11
     c42:	df 07       	cpc	r29, r31
     c44:	21 f4       	brne	.+8      	; 0xc4e <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c46:	64 e0       	ldi	r22, 0x04	; 4
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	3d dd       	rcall	.-1414   	; 0x6c6 <sysclk_enable_module>
     c4c:	4f c0       	rjmp	.+158    	; 0xcec <usart_init_rs232+0x1de>
     c4e:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	d8 07       	cpc	r29, r24
     c54:	21 f4       	brne	.+8      	; 0xc5e <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c56:	68 e0       	ldi	r22, 0x08	; 8
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	35 dd       	rcall	.-1430   	; 0x6c6 <sysclk_enable_module>
     c5c:	47 c0       	rjmp	.+142    	; 0xcec <usart_init_rs232+0x1de>
     c5e:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c60:	e9 e0       	ldi	r30, 0x09	; 9
     c62:	de 07       	cpc	r29, r30
     c64:	21 f4       	brne	.+8      	; 0xc6e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     c66:	68 e0       	ldi	r22, 0x08	; 8
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	2d dd       	rcall	.-1446   	; 0x6c6 <sysclk_enable_module>
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     c6e:	c0 3a       	cpi	r28, 0xA0	; 160
     c70:	f8 e0       	ldi	r31, 0x08	; 8
     c72:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     c74:	21 f4       	brne	.+8      	; 0xc7e <usart_init_rs232+0x170>
     c76:	60 e1       	ldi	r22, 0x10	; 16
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	25 dd       	rcall	.-1462   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     c7c:	37 c0       	rjmp	.+110    	; 0xcec <usart_init_rs232+0x1de>
     c7e:	c0 3a       	cpi	r28, 0xA0	; 160
     c80:	89 e0       	ldi	r24, 0x09	; 9
     c82:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c84:	21 f4       	brne	.+8      	; 0xc8e <usart_init_rs232+0x180>
     c86:	60 e1       	ldi	r22, 0x10	; 16
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	1d dd       	rcall	.-1478   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <usart_init_rs232+0x1de>
     c8e:	c0 3a       	cpi	r28, 0xA0	; 160
     c90:	ea e0       	ldi	r30, 0x0A	; 10
     c92:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     c94:	21 f4       	brne	.+8      	; 0xc9e <usart_init_rs232+0x190>
     c96:	60 e1       	ldi	r22, 0x10	; 16
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	15 dd       	rcall	.-1494   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     c9c:	27 c0       	rjmp	.+78     	; 0xcec <usart_init_rs232+0x1de>
     c9e:	c0 3a       	cpi	r28, 0xA0	; 160
     ca0:	fb e0       	ldi	r31, 0x0B	; 11
     ca2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     ca4:	21 f4       	brne	.+8      	; 0xcae <usart_init_rs232+0x1a0>
     ca6:	60 e1       	ldi	r22, 0x10	; 16
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	0d dd       	rcall	.-1510   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     cac:	1f c0       	rjmp	.+62     	; 0xcec <usart_init_rs232+0x1de>
     cae:	c0 3b       	cpi	r28, 0xB0	; 176
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     cb4:	21 f4       	brne	.+8      	; 0xcbe <usart_init_rs232+0x1b0>
     cb6:	60 e2       	ldi	r22, 0x20	; 32
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	05 dd       	rcall	.-1526   	; 0x6c6 <sysclk_enable_module>
     cbc:	17 c0       	rjmp	.+46     	; 0xcec <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     cbe:	c0 3b       	cpi	r28, 0xB0	; 176
     cc0:	e9 e0       	ldi	r30, 0x09	; 9
     cc2:	de 07       	cpc	r29, r30
     cc4:	21 f4       	brne	.+8      	; 0xcce <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     cc6:	60 e2       	ldi	r22, 0x20	; 32
     cc8:	84 e0       	ldi	r24, 0x04	; 4
     cca:	fd dc       	rcall	.-1542   	; 0x6c6 <sysclk_enable_module>
     ccc:	0f c0       	rjmp	.+30     	; 0xcec <usart_init_rs232+0x1de>
     cce:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     cd0:	f4 e0       	ldi	r31, 0x04	; 4
     cd2:	df 07       	cpc	r29, r31
     cd4:	21 f4       	brne	.+8      	; 0xcde <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     cd6:	60 e4       	ldi	r22, 0x40	; 64
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	f5 dc       	rcall	.-1558   	; 0x6c6 <sysclk_enable_module>
     cdc:	07 c0       	rjmp	.+14     	; 0xcec <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     cde:	c0 3a       	cpi	r28, 0xA0	; 160
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ce4:	19 f4       	brne	.+6      	; 0xcec <usart_init_rs232+0x1de>
     ce6:	60 e4       	ldi	r22, 0x40	; 64
     ce8:	85 e0       	ldi	r24, 0x05	; 5
     cea:	ed dc       	rcall	.-1574   	; 0x6c6 <sysclk_enable_module>
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	8f 73       	andi	r24, 0x3F	; 63
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	f8 01       	movw	r30, r16
     cf4:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     cf6:	84 81       	ldd	r24, Z+4	; 0x04
     cf8:	89 2b       	or	r24, r25
     cfa:	96 81       	ldd	r25, Z+6	; 0x06
     cfc:	91 11       	cpse	r25, r1
     cfe:	98 e0       	ldi	r25, 0x08	; 8
     d00:	89 2b       	or	r24, r25
     d02:	8d 83       	std	Y+5, r24	; 0x05
     d04:	f8 01       	movw	r30, r16
     d06:	40 81       	ld	r20, Z
     d08:	51 81       	ldd	r21, Z+1	; 0x01
     d0a:	62 81       	ldd	r22, Z+2	; 0x02
     d0c:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     d0e:	00 e0       	ldi	r16, 0x00	; 0
     d10:	12 e1       	ldi	r17, 0x12	; 18
     d12:	2a e7       	ldi	r18, 0x7A	; 122
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	eb dd       	rcall	.-1066   	; 0x8f0 <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	98 60       	ori	r25, 0x08	; 8
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	90 61       	ori	r25, 0x10	; 16
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     d42:	d9 01       	movw	r26, r18
     d44:	c8 01       	movw	r24, r16
     d46:	b6 95       	lsr	r27
     d48:	a7 95       	ror	r26
     d4a:	97 95       	ror	r25
     d4c:	87 95       	ror	r24
     d4e:	48 17       	cp	r20, r24
     d50:	59 07       	cpc	r21, r25
     d52:	6a 07       	cpc	r22, r26
     d54:	7b 07       	cpc	r23, r27
     d56:	70 f4       	brcc	.+28     	; 0xd74 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     d58:	6a 01       	movw	r12, r20
     d5a:	7b 01       	movw	r14, r22
     d5c:	cc 0c       	add	r12, r12
     d5e:	dd 1c       	adc	r13, r13
     d60:	ee 1c       	adc	r14, r14
     d62:	ff 1c       	adc	r15, r15
     d64:	c9 01       	movw	r24, r18
     d66:	b8 01       	movw	r22, r16
     d68:	a7 01       	movw	r20, r14
     d6a:	96 01       	movw	r18, r12
     d6c:	20 d5       	rcall	.+2624   	; 0x17ae <__udivmodsi4>
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	31 09       	sbc	r19, r1
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     d78:	83 2f       	mov	r24, r19
     d7a:	8f 70       	andi	r24, 0x0F	; 15
     d7c:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     d7e:	2e 83       	std	Y+6, r18	; 0x06
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	08 95       	ret

00000d92 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	1f 92       	push	r1
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	7c 01       	movw	r14, r24
     da8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	09 f4       	brne	.+2      	; 0xdb0 <usart_init_spi+0x1e>
     dae:	b2 c1       	rjmp	.+868    	; 0x1114 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     db0:	80 3c       	cpi	r24, 0xC0	; 192
     db2:	91 05       	cpc	r25, r1
     db4:	21 f4       	brne	.+8      	; 0xdbe <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     db6:	60 e1       	ldi	r22, 0x10	; 16
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	85 dc       	rcall	.-1782   	; 0x6c6 <sysclk_enable_module>
     dbc:	ab c1       	rjmp	.+854    	; 0x1114 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	e8 16       	cp	r14, r24
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	f8 06       	cpc	r15, r24
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	7c dc       	rcall	.-1800   	; 0x6c6 <sysclk_enable_module>
     dce:	a2 c1       	rjmp	.+836    	; 0x1114 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     dd0:	e1 14       	cp	r14, r1
     dd2:	e1 e0       	ldi	r30, 0x01	; 1
     dd4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     dd6:	21 f4       	brne	.+8      	; 0xde0 <usart_init_spi+0x4e>
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	74 dc       	rcall	.-1816   	; 0x6c6 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     dde:	9a c1       	rjmp	.+820    	; 0x1114 <usart_init_spi+0x382>
     de0:	f0 e8       	ldi	r31, 0x80	; 128
     de2:	ef 16       	cp	r14, r31
     de4:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     de6:	ff 06       	cpc	r15, r31
     de8:	21 f4       	brne	.+8      	; 0xdf2 <usart_init_spi+0x60>
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	6b dc       	rcall	.-1834   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     df0:	91 c1       	rjmp	.+802    	; 0x1114 <usart_init_spi+0x382>
     df2:	30 e9       	ldi	r19, 0x90	; 144
     df4:	e3 16       	cp	r14, r19
     df6:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     df8:	f3 06       	cpc	r15, r19
     dfa:	21 f4       	brne	.+8      	; 0xe04 <usart_init_spi+0x72>
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	62 dc       	rcall	.-1852   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     e02:	88 c1       	rjmp	.+784    	; 0x1114 <usart_init_spi+0x382>
     e04:	e1 14       	cp	r14, r1
     e06:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     e08:	f8 06       	cpc	r15, r24
     e0a:	21 f4       	brne	.+8      	; 0xe14 <usart_init_spi+0x82>
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	5a dc       	rcall	.-1868   	; 0x6c6 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     e12:	80 c1       	rjmp	.+768    	; 0x1114 <usart_init_spi+0x382>
     e14:	e0 e4       	ldi	r30, 0x40	; 64
     e16:	ee 16       	cp	r14, r30
     e18:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     e1a:	fe 06       	cpc	r15, r30
     e1c:	21 f4       	brne	.+8      	; 0xe26 <usart_init_spi+0x94>
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     e22:	51 dc       	rcall	.-1886   	; 0x6c6 <sysclk_enable_module>
     e24:	77 c1       	rjmp	.+750    	; 0x1114 <usart_init_spi+0x382>
     e26:	f0 e2       	ldi	r31, 0x20	; 32
     e28:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     e2a:	f3 e0       	ldi	r31, 0x03	; 3
     e2c:	ff 06       	cpc	r15, r31
     e2e:	21 f4       	brne	.+8      	; 0xe38 <usart_init_spi+0xa6>
     e30:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	48 dc       	rcall	.-1904   	; 0x6c6 <sysclk_enable_module>
     e36:	6e c1       	rjmp	.+732    	; 0x1114 <usart_init_spi+0x382>
     e38:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     e3a:	38 e0       	ldi	r19, 0x08	; 8
     e3c:	f3 06       	cpc	r15, r19
     e3e:	21 f4       	brne	.+8      	; 0xe48 <usart_init_spi+0xb6>
     e40:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	40 dc       	rcall	.-1920   	; 0x6c6 <sysclk_enable_module>
     e46:	66 c1       	rjmp	.+716    	; 0x1114 <usart_init_spi+0x382>
     e48:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     e4a:	89 e0       	ldi	r24, 0x09	; 9
     e4c:	f8 06       	cpc	r15, r24
     e4e:	21 f4       	brne	.+8      	; 0xe58 <usart_init_spi+0xc6>
     e50:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	38 dc       	rcall	.-1936   	; 0x6c6 <sysclk_enable_module>
     e56:	5e c1       	rjmp	.+700    	; 0x1114 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     e58:	e1 14       	cp	r14, r1
     e5a:	ea e0       	ldi	r30, 0x0A	; 10
     e5c:	fe 06       	cpc	r15, r30
     e5e:	21 f4       	brne	.+8      	; 0xe68 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	30 dc       	rcall	.-1952   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     e66:	56 c1       	rjmp	.+684    	; 0x1114 <usart_init_spi+0x382>
     e68:	e1 14       	cp	r14, r1
     e6a:	fb e0       	ldi	r31, 0x0B	; 11
     e6c:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     e6e:	21 f4       	brne	.+8      	; 0xe78 <usart_init_spi+0xe6>
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	28 dc       	rcall	.-1968   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     e76:	4e c1       	rjmp	.+668    	; 0x1114 <usart_init_spi+0x382>
     e78:	30 e4       	ldi	r19, 0x40	; 64
     e7a:	e3 16       	cp	r14, r19
     e7c:	38 e0       	ldi	r19, 0x08	; 8
     e7e:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     e80:	21 f4       	brne	.+8      	; 0xe8a <usart_init_spi+0xf8>
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	1f dc       	rcall	.-1986   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     e88:	45 c1       	rjmp	.+650    	; 0x1114 <usart_init_spi+0x382>
     e8a:	80 e4       	ldi	r24, 0x40	; 64
     e8c:	e8 16       	cp	r14, r24
     e8e:	89 e0       	ldi	r24, 0x09	; 9
     e90:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     e92:	21 f4       	brne	.+8      	; 0xe9c <usart_init_spi+0x10a>
     e94:	62 e0       	ldi	r22, 0x02	; 2
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	16 dc       	rcall	.-2004   	; 0x6c6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     e9a:	3c c1       	rjmp	.+632    	; 0x1114 <usart_init_spi+0x382>
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	ee 16       	cp	r14, r30
     ea0:	ea e0       	ldi	r30, 0x0A	; 10
     ea2:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     ea4:	21 f4       	brne	.+8      	; 0xeae <usart_init_spi+0x11c>
     ea6:	62 e0       	ldi	r22, 0x02	; 2
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	0d dc       	rcall	.-2022   	; 0x6c6 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     eac:	33 c1       	rjmp	.+614    	; 0x1114 <usart_init_spi+0x382>
     eae:	f0 e9       	ldi	r31, 0x90	; 144
     eb0:	ef 16       	cp	r14, r31
     eb2:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     eb4:	ff 06       	cpc	r15, r31
     eb6:	21 f4       	brne	.+8      	; 0xec0 <usart_init_spi+0x12e>
     eb8:	64 e0       	ldi	r22, 0x04	; 4
     eba:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     ebc:	04 dc       	rcall	.-2040   	; 0x6c6 <sysclk_enable_module>
     ebe:	2a c1       	rjmp	.+596    	; 0x1114 <usart_init_spi+0x382>
     ec0:	30 e9       	ldi	r19, 0x90	; 144
     ec2:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     ec4:	39 e0       	ldi	r19, 0x09	; 9
     ec6:	f3 06       	cpc	r15, r19
     ec8:	21 f4       	brne	.+8      	; 0xed2 <usart_init_spi+0x140>
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     ece:	fb db       	rcall	.-2058   	; 0x6c6 <sysclk_enable_module>
     ed0:	21 c1       	rjmp	.+578    	; 0x1114 <usart_init_spi+0x382>
     ed2:	80 e9       	ldi	r24, 0x90	; 144
     ed4:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     ed6:	8a e0       	ldi	r24, 0x0A	; 10
     ed8:	f8 06       	cpc	r15, r24
     eda:	21 f4       	brne	.+8      	; 0xee4 <usart_init_spi+0x152>
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     ee0:	f2 db       	rcall	.-2076   	; 0x6c6 <sysclk_enable_module>
     ee2:	18 c1       	rjmp	.+560    	; 0x1114 <usart_init_spi+0x382>
     ee4:	e0 e9       	ldi	r30, 0x90	; 144
     ee6:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     ee8:	eb e0       	ldi	r30, 0x0B	; 11
     eea:	fe 06       	cpc	r15, r30
     eec:	21 f4       	brne	.+8      	; 0xef6 <usart_init_spi+0x164>
     eee:	64 e0       	ldi	r22, 0x04	; 4
     ef0:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ef2:	e9 db       	rcall	.-2094   	; 0x6c6 <sysclk_enable_module>
     ef4:	0f c1       	rjmp	.+542    	; 0x1114 <usart_init_spi+0x382>
     ef6:	f0 ec       	ldi	r31, 0xC0	; 192
     ef8:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     efa:	f8 e0       	ldi	r31, 0x08	; 8
     efc:	ff 06       	cpc	r15, r31
     efe:	21 f4       	brne	.+8      	; 0xf08 <usart_init_spi+0x176>
     f00:	68 e0       	ldi	r22, 0x08	; 8
     f02:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     f04:	e0 db       	rcall	.-2112   	; 0x6c6 <sysclk_enable_module>
     f06:	06 c1       	rjmp	.+524    	; 0x1114 <usart_init_spi+0x382>
     f08:	30 ec       	ldi	r19, 0xC0	; 192
     f0a:	e3 16       	cp	r14, r19
     f0c:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     f0e:	f3 06       	cpc	r15, r19
     f10:	21 f4       	brne	.+8      	; 0xf1a <usart_init_spi+0x188>
     f12:	68 e0       	ldi	r22, 0x08	; 8
     f14:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     f16:	d7 db       	rcall	.-2130   	; 0x6c6 <sysclk_enable_module>
     f18:	fd c0       	rjmp	.+506    	; 0x1114 <usart_init_spi+0x382>
     f1a:	80 ea       	ldi	r24, 0xA0	; 160
     f1c:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     f1e:	88 e0       	ldi	r24, 0x08	; 8
     f20:	f8 06       	cpc	r15, r24
     f22:	61 f4       	brne	.+24     	; 0xf3c <usart_init_spi+0x1aa>
     f24:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	ce db       	rcall	.-2148   	; 0x6c6 <sysclk_enable_module>
     f2a:	e0 ea       	ldi	r30, 0xA0	; 160
     f2c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	8f 7e       	andi	r24, 0xEF	; 239
     f32:	84 83       	std	Z+4, r24	; 0x04
     f34:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	22 50       	subi	r18, 0x02	; 2
     f3a:	4c c0       	rjmp	.+152    	; 0xfd4 <usart_init_spi+0x242>
     f3c:	f0 ea       	ldi	r31, 0xA0	; 160
     f3e:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     f40:	f9 e0       	ldi	r31, 0x09	; 9
     f42:	ff 06       	cpc	r15, r31
     f44:	21 f4       	brne	.+8      	; 0xf4e <usart_init_spi+0x1bc>
     f46:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	bd db       	rcall	.-2182   	; 0x6c6 <sysclk_enable_module>
     f4c:	e3 c0       	rjmp	.+454    	; 0x1114 <usart_init_spi+0x382>
     f4e:	30 ea       	ldi	r19, 0xA0	; 160
     f50:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     f52:	3a e0       	ldi	r19, 0x0A	; 10
     f54:	f3 06       	cpc	r15, r19
     f56:	21 f4       	brne	.+8      	; 0xf60 <usart_init_spi+0x1ce>
     f58:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	b4 db       	rcall	.-2200   	; 0x6c6 <sysclk_enable_module>
     f5e:	da c0       	rjmp	.+436    	; 0x1114 <usart_init_spi+0x382>
     f60:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     f62:	e8 16       	cp	r14, r24
     f64:	8b e0       	ldi	r24, 0x0B	; 11
     f66:	f8 06       	cpc	r15, r24
     f68:	21 f4       	brne	.+8      	; 0xf72 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     f6a:	60 e1       	ldi	r22, 0x10	; 16
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	ab db       	rcall	.-2218   	; 0x6c6 <sysclk_enable_module>
     f70:	d1 c0       	rjmp	.+418    	; 0x1114 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     f72:	e0 eb       	ldi	r30, 0xB0	; 176
     f74:	ee 16       	cp	r14, r30
     f76:	e8 e0       	ldi	r30, 0x08	; 8
     f78:	fe 06       	cpc	r15, r30
     f7a:	21 f4       	brne	.+8      	; 0xf84 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     f7c:	60 e2       	ldi	r22, 0x20	; 32
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	a2 db       	rcall	.-2236   	; 0x6c6 <sysclk_enable_module>
     f82:	c8 c0       	rjmp	.+400    	; 0x1114 <usart_init_spi+0x382>
     f84:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     f86:	ef 16       	cp	r14, r31
     f88:	f9 e0       	ldi	r31, 0x09	; 9
     f8a:	ff 06       	cpc	r15, r31
     f8c:	21 f4       	brne	.+8      	; 0xf96 <usart_init_spi+0x204>
     f8e:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	99 db       	rcall	.-2254   	; 0x6c6 <sysclk_enable_module>
     f94:	bf c0       	rjmp	.+382    	; 0x1114 <usart_init_spi+0x382>
     f96:	30 e8       	ldi	r19, 0x80	; 128
     f98:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     f9a:	34 e0       	ldi	r19, 0x04	; 4
     f9c:	f3 06       	cpc	r15, r19
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <usart_init_spi+0x216>
     fa0:	60 e4       	ldi	r22, 0x40	; 64
     fa2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     fa4:	90 db       	rcall	.-2272   	; 0x6c6 <sysclk_enable_module>
     fa6:	b6 c0       	rjmp	.+364    	; 0x1114 <usart_init_spi+0x382>
     fa8:	80 ea       	ldi	r24, 0xA0	; 160
     faa:	e8 16       	cp	r14, r24
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	f8 06       	cpc	r15, r24
     fb0:	21 f4       	brne	.+8      	; 0xfba <usart_init_spi+0x228>
     fb2:	60 e4       	ldi	r22, 0x40	; 64
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	87 db       	rcall	.-2290   	; 0x6c6 <sysclk_enable_module>
     fb8:	ad c0       	rjmp	.+346    	; 0x1114 <usart_init_spi+0x382>
     fba:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	8f 7e       	andi	r24, 0xEF	; 239
     fc0:	84 83       	std	Z+4, r24	; 0x04
     fc2:	fb 01       	movw	r30, r22
     fc4:	24 81       	ldd	r18, Z+4	; 0x04
     fc6:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     fc8:	c7 01       	movw	r24, r14
     fca:	f0 ea       	ldi	r31, 0xA0	; 160
     fcc:	ef 16       	cp	r14, r31
     fce:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     fd0:	ff 06       	cpc	r15, r31
     fd2:	49 f4       	brne	.+18     	; 0xfe6 <usart_init_spi+0x254>
     fd4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
     fd8:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     fda:	a5 c0       	rjmp	.+330    	; 0x1126 <usart_init_spi+0x394>
     fdc:	0f 2e       	mov	r0, r31
     fde:	f1 e1       	ldi	r31, 0x11	; 17
     fe0:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     fe2:	f0 2d       	mov	r31, r0
     fe4:	a4 c0       	rjmp	.+328    	; 0x112e <usart_init_spi+0x39c>
     fe6:	80 3b       	cpi	r24, 0xB0	; 176
     fe8:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     fea:	93 07       	cpc	r25, r19
     fec:	91 f0       	breq	.+36     	; 0x1012 <usart_init_spi+0x280>
     fee:	80 3a       	cpi	r24, 0xA0	; 160
     ff0:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     ff2:	9e 07       	cpc	r25, r30
     ff4:	49 f4       	brne	.+18     	; 0x1008 <usart_init_spi+0x276>
     ff6:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
     ffa:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     ffc:	9b c0       	rjmp	.+310    	; 0x1134 <usart_init_spi+0x3a2>
     ffe:	0f 2e       	mov	r0, r31
    1000:	f9 e1       	ldi	r31, 0x19	; 25
    1002:	df 2e       	mov	r13, r31
    1004:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1006:	16 c0       	rjmp	.+44     	; 0x1034 <usart_init_spi+0x2a2>
    1008:	80 3b       	cpi	r24, 0xB0	; 176
    100a:	f9 e0       	ldi	r31, 0x09	; 9
    100c:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    100e:	f1 f0       	breq	.+60     	; 0x104c <usart_init_spi+0x2ba>
    1010:	04 c0       	rjmp	.+8      	; 0x101a <usart_init_spi+0x288>
    1012:	0f 2e       	mov	r0, r31
    1014:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1016:	df 2e       	mov	r13, r31
    1018:	f0 2d       	mov	r31, r0
    101a:	80 3a       	cpi	r24, 0xA0	; 160
    101c:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    101e:	93 07       	cpc	r25, r19
    1020:	49 f4       	brne	.+18     	; 0x1034 <usart_init_spi+0x2a2>
    1022:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1026:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1028:	8a c0       	rjmp	.+276    	; 0x113e <usart_init_spi+0x3ac>
    102a:	0f 2e       	mov	r0, r31
    102c:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    102e:	df 2e       	mov	r13, r31
    1030:	f0 2d       	mov	r31, r0
    1032:	15 c0       	rjmp	.+42     	; 0x105e <usart_init_spi+0x2cc>
    1034:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1036:	9b 40       	sbci	r25, 0x0B	; 11
    1038:	91 f4       	brne	.+36     	; 0x105e <usart_init_spi+0x2cc>
    103a:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    103e:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1040:	0a c0       	rjmp	.+20     	; 0x1056 <usart_init_spi+0x2c4>
    1042:	0f 2e       	mov	r0, r31
    1044:	f9 e2       	ldi	r31, 0x29	; 41
    1046:	df 2e       	mov	r13, r31
    1048:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    104a:	09 c0       	rjmp	.+18     	; 0x105e <usart_init_spi+0x2cc>
    104c:	0f 2e       	mov	r0, r31
    104e:	fd e1       	ldi	r31, 0x1D	; 29
    1050:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1052:	f0 2d       	mov	r31, r0
    1054:	04 c0       	rjmp	.+8      	; 0x105e <usart_init_spi+0x2cc>
    1056:	0f 2e       	mov	r0, r31
    1058:	fd e2       	ldi	r31, 0x2D	; 45
    105a:	df 2e       	mov	r13, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	ed 2d       	mov	r30, r13
    1060:	e6 95       	lsr	r30
    1062:	e6 95       	lsr	r30
    1064:	e6 95       	lsr	r30
    1066:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1068:	e3 9f       	mul	r30, r19
    106a:	f0 01       	movw	r30, r0
    106c:	11 24       	eor	r1, r1
    106e:	fa 5f       	subi	r31, 0xFA	; 250
    1070:	3d 2d       	mov	r19, r13
    1072:	37 70       	andi	r19, 0x07	; 7
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1078:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <usart_init_spi+0x2ee>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1084:	81 83       	std	Z+1, r24	; 0x01
    1086:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1088:	10 f0       	brcs	.+4      	; 0x108e <usart_init_spi+0x2fc>
    108a:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <usart_init_spi+0x2fe>
    108e:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    1090:	df 01       	movw	r26, r30
	return flags;
    1092:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1094:	a3 0f       	add	r26, r19
    1096:	b1 1d       	adc	r27, r1
    1098:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    109a:	99 83       	std	Y+1, r25	; 0x01
    109c:	f8 94       	cli
    109e:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10a0:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    10a2:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    10a4:	2c 93       	st	X, r18
    10a6:	9c 91       	ld	r25, X
    10a8:	94 2b       	or	r25, r20
    10aa:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    10ac:	3f bf       	out	0x3f, r19	; 63
    10ae:	85 83       	std	Z+5, r24	; 0x05
    10b0:	f7 01       	movw	r30, r14
    10b2:	85 81       	ldd	r24, Z+5	; 0x05
    10b4:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    10b6:	85 83       	std	Z+5, r24	; 0x05
    10b8:	f8 01       	movw	r30, r16
    10ba:	84 81       	ldd	r24, Z+4	; 0x04
    10bc:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	29 f4       	brne	.+10     	; 0x10cc <usart_init_spi+0x33a>
    10c2:	f7 01       	movw	r30, r14
    10c4:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	85 83       	std	Z+5, r24	; 0x05
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <usart_init_spi+0x342>
    10cc:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    10ce:	85 81       	ldd	r24, Z+5	; 0x05
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	85 83       	std	Z+5, r24	; 0x05
    10d4:	f8 01       	movw	r30, r16
    10d6:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    10d8:	88 23       	and	r24, r24
    10da:	29 f0       	breq	.+10     	; 0x10e6 <usart_init_spi+0x354>
    10dc:	f7 01       	movw	r30, r14
    10de:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    10e0:	84 60       	ori	r24, 0x04	; 4
    10e2:	85 83       	std	Z+5, r24	; 0x05
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <usart_init_spi+0x35c>
    10e6:	f7 01       	movw	r30, r14
    10e8:	85 81       	ldd	r24, Z+5	; 0x05
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	85 83       	std	Z+5, r24	; 0x05
    10ee:	f8 01       	movw	r30, r16
    10f0:	40 81       	ld	r20, Z
    10f2:	51 81       	ldd	r21, Z+1	; 0x01
    10f4:	62 81       	ldd	r22, Z+2	; 0x02
    10f6:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    10f8:	00 e0       	ldi	r16, 0x00	; 0
    10fa:	12 e1       	ldi	r17, 0x12	; 18
    10fc:	2a e7       	ldi	r18, 0x7A	; 122
    10fe:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1100:	c7 01       	movw	r24, r14
    1102:	16 de       	rcall	.-980    	; 0xd30 <usart_spi_set_baudrate>
    1104:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1106:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	84 83       	std	Z+4, r24	; 0x04
    110c:	84 81       	ldd	r24, Z+4	; 0x04
    110e:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1110:	84 83       	std	Z+4, r24	; 0x04
    1112:	1a c0       	rjmp	.+52     	; 0x1148 <usart_init_spi+0x3b6>
    1114:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1116:	84 81       	ldd	r24, Z+4	; 0x04
    1118:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    111a:	84 83       	std	Z+4, r24	; 0x04
    111c:	f8 01       	movw	r30, r16
    111e:	24 81       	ldd	r18, Z+4	; 0x04
    1120:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1122:	c7 01       	movw	r24, r14
    1124:	60 cf       	rjmp	.-320    	; 0xfe6 <usart_init_spi+0x254>
    1126:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1128:	f5 e1       	ldi	r31, 0x15	; 21
    112a:	df 2e       	mov	r13, r31
    112c:	f0 2d       	mov	r31, r0
    112e:	80 ea       	ldi	r24, 0xA0	; 160
    1130:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1132:	6a cf       	rjmp	.-300    	; 0x1008 <usart_init_spi+0x276>
    1134:	0f 2e       	mov	r0, r31
    1136:	fd e1       	ldi	r31, 0x1D	; 29
    1138:	df 2e       	mov	r13, r31
    113a:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    113c:	7b cf       	rjmp	.-266    	; 0x1034 <usart_init_spi+0x2a2>
    113e:	0f 2e       	mov	r0, r31
    1140:	f5 e2       	ldi	r31, 0x25	; 37
    1142:	df 2e       	mov	r13, r31
    1144:	f0 2d       	mov	r31, r0
    1146:	8b cf       	rjmp	.-234    	; 0x105e <usart_init_spi+0x2cc>
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	08 95       	ret

0000115a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    115c:	61 50       	subi	r22, 0x01	; 1
    115e:	71 09       	sbc	r23, r1
    1160:	81 09       	sbc	r24, r1
    1162:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1164:	61 15       	cp	r22, r1
    1166:	71 05       	cpc	r23, r1
    1168:	81 05       	cpc	r24, r1
    116a:	91 05       	cpc	r25, r1
    116c:	b9 f7       	brne	.-18     	; 0x115c <__portable_avr_delay_cycles+0x2>
    116e:	08 95       	ret

00001170 <getCharacter>:
		int userInput = getCharacter(input);
		displayCharacter(userInput);
	}
}

int getCharacter(int input) {
    1170:	fc 01       	movw	r30, r24
	if(input == 13)
    1172:	8d 30       	cpi	r24, 0x0D	; 13
    1174:	91 05       	cpc	r25, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <getCharacter+0xa>
    1178:	91 c0       	rjmp	.+290    	; 0x129c <getCharacter+0x12c>
	return 100;
	
	if(input > 96 && input < 128){
    117a:	81 56       	subi	r24, 0x61	; 97
    117c:	91 09       	sbc	r25, r1
    117e:	4f 97       	sbiw	r24, 0x1f	; 31
    1180:	08 f4       	brcc	.+2      	; 0x1184 <getCharacter+0x14>
		input -= 32;
    1182:	b0 97       	sbiw	r30, 0x20	; 32
	}
	
	if(input < 48 || (input > 57 && input < 65) || input > 90){
    1184:	cf 01       	movw	r24, r30
    1186:	c0 97       	sbiw	r24, 0x30	; 48
    1188:	8b 32       	cpi	r24, 0x2B	; 43
    118a:	91 05       	cpc	r25, r1
    118c:	08 f0       	brcs	.+2      	; 0x1190 <getCharacter+0x20>
    118e:	89 c0       	rjmp	.+274    	; 0x12a2 <getCharacter+0x132>
    1190:	0a 97       	sbiw	r24, 0x0a	; 10
    1192:	07 97       	sbiw	r24, 0x07	; 7
    1194:	08 f4       	brcc	.+2      	; 0x1198 <getCharacter+0x28>
    1196:	88 c0       	rjmp	.+272    	; 0x12a8 <getCharacter+0x138>
	}
	
	char character = (char)input;
	
	int x;
	switch(character){
    1198:	8e 2f       	mov	r24, r30
    119a:	ee 0f       	add	r30, r30
    119c:	99 0b       	sbc	r25, r25
    119e:	aa 0b       	sbc	r26, r26
    11a0:	bb 0b       	sbc	r27, r27
    11a2:	fc 01       	movw	r30, r24
    11a4:	b0 97       	sbiw	r30, 0x20	; 32
    11a6:	eb 33       	cpi	r30, 0x3B	; 59
    11a8:	f1 05       	cpc	r31, r1
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <getCharacter+0x3e>
    11ac:	80 c0       	rjmp	.+256    	; 0x12ae <getCharacter+0x13e>
    11ae:	88 27       	eor	r24, r24
    11b0:	e2 50       	subi	r30, 0x02	; 2
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	1d c3       	rjmp	.+1594   	; 0x17f2 <__tablejump2__>
		//int x;
		case 'A':
		x = 0;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	08 95       	ret
		break;
		case 'B':
		x = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11c2:	08 95       	ret
		case 'C':
		x = 2;
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11c8:	08 95       	ret
		case 'D':
		x = 3;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11ce:	08 95       	ret
		case 'E':
		x = 4;
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11d4:	08 95       	ret
		case 'F':
		x = 5;
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11da:	08 95       	ret
		case 'G':
		x = 6;
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11e0:	08 95       	ret
		case 'H':
		x = 7;
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11e6:	08 95       	ret
		case 'I':
		x = 8;
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11ec:	08 95       	ret
		case 'J':
		x = 9;
    11ee:	89 e0       	ldi	r24, 0x09	; 9
    11f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11f2:	08 95       	ret
		case 'K':
		x = 10;
    11f4:	8a e0       	ldi	r24, 0x0A	; 10
    11f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11f8:	08 95       	ret
		case 'L':
		x = 11;
    11fa:	8b e0       	ldi	r24, 0x0B	; 11
    11fc:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11fe:	08 95       	ret
		case 'M':
		x = 12;
    1200:	8c e0       	ldi	r24, 0x0C	; 12
    1202:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1204:	08 95       	ret
		case 'N':
		x = 13;
    1206:	8d e0       	ldi	r24, 0x0D	; 13
    1208:	90 e0       	ldi	r25, 0x00	; 0
		break;
    120a:	08 95       	ret
		case 'O':
		x = 14;
    120c:	8e e0       	ldi	r24, 0x0E	; 14
    120e:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1210:	08 95       	ret
		case 'P':
		x = 15;
    1212:	8f e0       	ldi	r24, 0x0F	; 15
    1214:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1216:	08 95       	ret
		case 'Q':
		x = 16;
    1218:	80 e1       	ldi	r24, 0x10	; 16
    121a:	90 e0       	ldi	r25, 0x00	; 0
		break;
    121c:	08 95       	ret
		case 'R':
		x = 17;
    121e:	81 e1       	ldi	r24, 0x11	; 17
    1220:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1222:	08 95       	ret
		case 'S':
		x = 18;
    1224:	82 e1       	ldi	r24, 0x12	; 18
    1226:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1228:	08 95       	ret
		case 'T':
		x = 19;
    122a:	83 e1       	ldi	r24, 0x13	; 19
    122c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    122e:	08 95       	ret
		case 'U':
		x = 20;
    1230:	84 e1       	ldi	r24, 0x14	; 20
    1232:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1234:	08 95       	ret
		case 'V':
		x = 21;
    1236:	85 e1       	ldi	r24, 0x15	; 21
    1238:	90 e0       	ldi	r25, 0x00	; 0
		break;
    123a:	08 95       	ret
		case 'W':
		x = 22;
    123c:	86 e1       	ldi	r24, 0x16	; 22
    123e:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1240:	08 95       	ret
		case 'X':
		x = 23;
    1242:	87 e1       	ldi	r24, 0x17	; 23
    1244:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1246:	08 95       	ret
		case 'Y':
		x = 24;
    1248:	88 e1       	ldi	r24, 0x18	; 24
    124a:	90 e0       	ldi	r25, 0x00	; 0
		break;
    124c:	08 95       	ret
		case 'Z':
		x = 25;
    124e:	89 e1       	ldi	r24, 0x19	; 25
    1250:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1252:	08 95       	ret
		case ' ':
		x = 26;
    1254:	8a e1       	ldi	r24, 0x1A	; 26
    1256:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1258:	08 95       	ret
		case '1':
		x = 27;
    125a:	8b e1       	ldi	r24, 0x1B	; 27
    125c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    125e:	08 95       	ret
		case '2':
		x = 28;
    1260:	8c e1       	ldi	r24, 0x1C	; 28
    1262:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1264:	08 95       	ret
		case '3':
		x = 29;
    1266:	8d e1       	ldi	r24, 0x1D	; 29
    1268:	90 e0       	ldi	r25, 0x00	; 0
		break;
    126a:	08 95       	ret
		case '4':
		x = 30;
    126c:	8e e1       	ldi	r24, 0x1E	; 30
    126e:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1270:	08 95       	ret
		case '5':
		x = 31;
    1272:	8f e1       	ldi	r24, 0x1F	; 31
    1274:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1276:	08 95       	ret
		case '6':
		x = 32;
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	90 e0       	ldi	r25, 0x00	; 0
		break;
    127c:	08 95       	ret
		case '7':
		x = 33;
    127e:	81 e2       	ldi	r24, 0x21	; 33
    1280:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1282:	08 95       	ret
		case '8':
		x = 34;
    1284:	82 e2       	ldi	r24, 0x22	; 34
    1286:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1288:	08 95       	ret
		case '9':
		x = 35;
    128a:	83 e2       	ldi	r24, 0x23	; 35
    128c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    128e:	08 95       	ret
		case '0':
		x = 36;
    1290:	84 e2       	ldi	r24, 0x24	; 36
    1292:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1294:	08 95       	ret
		case '.':
		x = 37;
    1296:	85 e2       	ldi	r24, 0x25	; 37
    1298:	90 e0       	ldi	r25, 0x00	; 0
		break;
    129a:	08 95       	ret
	}
}

int getCharacter(int input) {
	if(input == 13)
	return 100;
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	08 95       	ret
	if(input > 96 && input < 128){
		input -= 32;
	}
	
	if(input < 48 || (input > 57 && input < 65) || input > 90){
		return 26;
    12a2:	8a e1       	ldi	r24, 0x1A	; 26
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	8a e1       	ldi	r24, 0x1A	; 26
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret
	}
	
	char character = (char)input;
	
	int x;
	switch(character){
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	return x;
}
    12b2:	08 95       	ret

000012b4 <resetScreen>:
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}

void resetScreen()
{
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    12d4:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <page_address>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    12da:	0f 2e       	mov	r0, r31
    12dc:	fb e2       	ldi	r31, 0x2B	; 43
    12de:	8f 2e       	mov	r8, r31
    12e0:	f0 2d       	mov	r31, r0
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    12e2:	00 ea       	ldi	r16, 0xA0	; 160
    12e4:	19 e0       	ldi	r17, 0x09	; 9
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12e6:	0f 2e       	mov	r0, r31
    12e8:	f0 e6       	ldi	r31, 0x60	; 96
    12ea:	ef 2e       	mov	r14, r31
    12ec:	f6 e0       	ldi	r31, 0x06	; 6
    12ee:	ff 2e       	mov	r15, r31
    12f0:	f0 2d       	mov	r31, r0
    12f2:	aa 24       	eor	r10, r10
    12f4:	a3 94       	inc	r10
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12f6:	b0 2e       	mov	r11, r16
    12f8:	c1 2e       	mov	r12, r17
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12fa:	68 94       	set
    12fc:	99 24       	eor	r9, r9
    12fe:	96 f8       	bld	r9, 6
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	80 6b       	ori	r24, 0xB0	; 176
    1304:	d8 2e       	mov	r13, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1306:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1308:	be 01       	movw	r22, r28
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	c8 01       	movw	r24, r16
    1310:	60 da       	rcall	.-2880   	; 0x7d2 <usart_spi_select_device>
    1312:	f7 01       	movw	r30, r14
    1314:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1316:	f8 01       	movw	r30, r16
    1318:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    131a:	85 ff       	sbrs	r24, 5
    131c:	fc cf       	rjmp	.-8      	; 0x1316 <resetScreen+0x62>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    131e:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1320:	f8 01       	movw	r30, r16
    1322:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1324:	86 ff       	sbrs	r24, 6
    1326:	fc cf       	rjmp	.-8      	; 0x1320 <resetScreen+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1328:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    132a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    132c:	be 01       	movw	r22, r28
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	c8 01       	movw	r24, r16
    1334:	64 da       	rcall	.-2872   	; 0x7fe <usart_spi_deselect_device>
		st7565r_set_page_address(page_address);
		for (column_address = 0; column_address < 128; column_address++) {
    1336:	10 92 d9 21 	sts	0x21D9, r1	; 0x8021d9 <column_address>
    133a:	d1 2c       	mov	r13, r1
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    133c:	8d 2d       	mov	r24, r13
    133e:	8f 77       	andi	r24, 0x7F	; 127
    1340:	82 95       	swap	r24
    1342:	8f 70       	andi	r24, 0x0F	; 15
    1344:	80 61       	ori	r24, 0x10	; 16
    1346:	78 2e       	mov	r7, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1348:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    134a:	be 01       	movw	r22, r28
    134c:	6f 5f       	subi	r22, 0xFF	; 255
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8b 2d       	mov	r24, r11
    1352:	9c 2d       	mov	r25, r12
    1354:	3e da       	rcall	.-2948   	; 0x7d2 <usart_spi_select_device>
    1356:	f7 01       	movw	r30, r14
    1358:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    135a:	f8 01       	movw	r30, r16
    135c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    135e:	85 ff       	sbrs	r24, 5
    1360:	fc cf       	rjmp	.-8      	; 0x135a <resetScreen+0xa6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1362:	70 82       	st	Z, r7
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1364:	f8 01       	movw	r30, r16
    1366:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1368:	86 ff       	sbrs	r24, 6
    136a:	fc cf       	rjmp	.-8      	; 0x1364 <resetScreen+0xb0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    136c:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    136e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1370:	be 01       	movw	r22, r28
    1372:	6f 5f       	subi	r22, 0xFF	; 255
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8b 2d       	mov	r24, r11
    1378:	9c 2d       	mov	r25, r12
    137a:	41 da       	rcall	.-2942   	; 0x7fe <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    137c:	fd 2d       	mov	r31, r13
    137e:	ff 70       	andi	r31, 0x0F	; 15
    1380:	df 2e       	mov	r13, r31
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1382:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1384:	be 01       	movw	r22, r28
    1386:	6f 5f       	subi	r22, 0xFF	; 255
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8b 2d       	mov	r24, r11
    138c:	9c 2d       	mov	r25, r12
    138e:	21 da       	rcall	.-3006   	; 0x7d2 <usart_spi_select_device>
    1390:	f7 01       	movw	r30, r14
    1392:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1394:	f8 01       	movw	r30, r16
    1396:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1398:	85 ff       	sbrs	r24, 5
    139a:	fc cf       	rjmp	.-8      	; 0x1394 <resetScreen+0xe0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    139c:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    139e:	f8 01       	movw	r30, r16
    13a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13a2:	86 ff       	sbrs	r24, 6
    13a4:	fc cf       	rjmp	.-8      	; 0x139e <resetScreen+0xea>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13a6:	91 82       	std	Z+1, r9	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13a8:	80 81       	ld	r24, Z
    13aa:	be 01       	movw	r22, r28
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8b 2d       	mov	r24, r11
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    13b2:	9c 2d       	mov	r25, r12
    13b4:	24 da       	rcall	.-3000   	; 0x7fe <usart_spi_deselect_device>
    13b6:	89 82       	std	Y+1, r8	; 0x01
    13b8:	be 01       	movw	r22, r28
    13ba:	6f 5f       	subi	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8b 2d       	mov	r24, r11
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13c0:	9c 2d       	mov	r25, r12
    13c2:	07 da       	rcall	.-3058   	; 0x7d2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13c4:	f7 01       	movw	r30, r14
    13c6:	a5 82       	std	Z+5, r10	; 0x05
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13c8:	f8 01       	movw	r30, r16
    13ca:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13cc:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13ce:	fc cf       	rjmp	.-8      	; 0x13c8 <resetScreen+0x114>
    13d0:	10 82       	st	Z, r1
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13d2:	f8 01       	movw	r30, r16
    13d4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13d6:	86 ff       	sbrs	r24, 6
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13d8:	fc cf       	rjmp	.-8      	; 0x13d2 <resetScreen+0x11e>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13da:	91 82       	std	Z+1, r9	; 0x01
    13dc:	80 81       	ld	r24, Z
    13de:	f7 01       	movw	r30, r14
    13e0:	a6 82       	std	Z+6, r10	; 0x06
    13e2:	be 01       	movw	r22, r28
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8b 2d       	mov	r24, r11
    13ea:	9c 2d       	mov	r25, r12
    13ec:	08 da       	rcall	.-3056   	; 0x7fe <usart_spi_deselect_device>
    13ee:	d0 90 d9 21 	lds	r13, 0x21D9	; 0x8021d9 <column_address>
    13f2:	d3 94       	inc	r13
    13f4:	d0 92 d9 21 	sts	0x21D9, r13	; 0x8021d9 <column_address>

void resetScreen()
{
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    13f8:	dd 20       	and	r13, r13
    13fa:	0c f0       	brlt	.+2      	; 0x13fe <resetScreen+0x14a>
    13fc:	9f cf       	rjmp	.-194    	; 0x133c <resetScreen+0x88>
    13fe:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <page_address>
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <page_address>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1408:	85 30       	cpi	r24, 0x05	; 5
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    140a:	08 f4       	brcc	.+2      	; 0x140e <resetScreen+0x15a>
    140c:	79 cf       	rjmp	.-270    	; 0x1300 <resetScreen+0x4c>
    140e:	8b e2       	ldi	r24, 0x2B	; 43
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	be 01       	movw	r22, r28
    1414:	6f 5f       	subi	r22, 0xFF	; 255
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	80 ea       	ldi	r24, 0xA0	; 160
    141a:	99 e0       	ldi	r25, 0x09	; 9
    141c:	da d9       	rcall	.-3148   	; 0x7d2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1424:	e0 ea       	ldi	r30, 0xA0	; 160
    1426:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1428:	81 81       	ldd	r24, Z+1	; 0x01
    142a:	85 ff       	sbrs	r24, 5
    142c:	fd cf       	rjmp	.-6      	; 0x1428 <resetScreen+0x174>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    142e:	80 eb       	ldi	r24, 0xB0	; 176
    1430:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1434:	e0 ea       	ldi	r30, 0xA0	; 160
    1436:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1438:	81 81       	ldd	r24, Z+1	; 0x01
    143a:	86 ff       	sbrs	r24, 6
    143c:	fd cf       	rjmp	.-6      	; 0x1438 <resetScreen+0x184>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    143e:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1440:	f9 e0       	ldi	r31, 0x09	; 9
    1442:	80 e4       	ldi	r24, 0x40	; 64
    1444:	81 83       	std	Z+1, r24	; 0x01
    1446:	80 81       	ld	r24, Z
    1448:	be 01       	movw	r22, r28
    144a:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1450:	99 e0       	ldi	r25, 0x09	; 9
    1452:	d5 d9       	rcall	.-3158   	; 0x7fe <usart_spi_deselect_device>
    1454:	8b e2       	ldi	r24, 0x2B	; 43
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	be 01       	movw	r22, r28
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	80 ea       	ldi	r24, 0xA0	; 160
    1460:	99 e0       	ldi	r25, 0x09	; 9
    1462:	b7 d9       	rcall	.-3218   	; 0x7d2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    146a:	e0 ea       	ldi	r30, 0xA0	; 160
    146c:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	85 ff       	sbrs	r24, 5
    1472:	fd cf       	rjmp	.-6      	; 0x146e <resetScreen+0x1ba>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    147a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    147c:	f9 e0       	ldi	r31, 0x09	; 9
    147e:	81 81       	ldd	r24, Z+1	; 0x01
    1480:	86 ff       	sbrs	r24, 6
    1482:	fd cf       	rjmp	.-6      	; 0x147e <resetScreen+0x1ca>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1484:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1486:	f9 e0       	ldi	r31, 0x09	; 9
    1488:	80 e4       	ldi	r24, 0x40	; 64
    148a:	81 83       	std	Z+1, r24	; 0x01
    148c:	80 81       	ld	r24, Z
    148e:	be 01       	movw	r22, r28
    1490:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1496:	99 e0       	ldi	r25, 0x09	; 9
    1498:	b2 d9       	rcall	.-3228   	; 0x7fe <usart_spi_deselect_device>
    149a:	8b e2       	ldi	r24, 0x2B	; 43
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	be 01       	movw	r22, r28
    14a0:	6f 5f       	subi	r22, 0xFF	; 255
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	80 ea       	ldi	r24, 0xA0	; 160
    14a6:	99 e0       	ldi	r25, 0x09	; 9
    14a8:	94 d9       	rcall	.-3288   	; 0x7d2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14b0:	e0 ea       	ldi	r30, 0xA0	; 160
    14b2:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14b4:	81 81       	ldd	r24, Z+1	; 0x01
    14b6:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14b8:	fd cf       	rjmp	.-6      	; 0x14b4 <resetScreen+0x200>
    14ba:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    14be:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    14c0:	f9 e0       	ldi	r31, 0x09	; 9
    14c2:	81 81       	ldd	r24, Z+1	; 0x01
    14c4:	86 ff       	sbrs	r24, 6
    14c6:	fd cf       	rjmp	.-6      	; 0x14c2 <resetScreen+0x20e>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    14c8:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    14ca:	f9 e0       	ldi	r31, 0x09	; 9
    14cc:	80 e4       	ldi	r24, 0x40	; 64
    14ce:	81 83       	std	Z+1, r24	; 0x01
    14d0:	80 81       	ld	r24, Z
    14d2:	be 01       	movw	r22, r28
    14d4:	6f 5f       	subi	r22, 0xFF	; 255
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}

	st7565r_set_page_address(0);
	st7565r_set_column_address(0);
    14d8:	80 ea       	ldi	r24, 0xA0	; 160
    14da:	99 e0       	ldi	r25, 0x09	; 9
    14dc:	90 d9       	rcall	.-3296   	; 0x7fe <usart_spi_deselect_device>
    14de:	0f 90       	pop	r0
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	bf 90       	pop	r11
    14f2:	af 90       	pop	r10
    14f4:	9f 90       	pop	r9
    14f6:	8f 90       	pop	r8
    14f8:	7f 90       	pop	r7
    14fa:	08 95       	ret

000014fc <displayCharacter>:
	}
	return x;
}

void displayCharacter(uint8_t character)
{
    14fc:	6f 92       	push	r6
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	1f 92       	push	r1
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	18 2f       	mov	r17, r24
    1520:	80 e1       	ldi	r24, 0x10	; 16
    1522:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	// set addresses at beginning of display
	gpio_set_pin_low(NHD_C12832A1Z_BACKLIGHT); //turns backlight off

	if (character == 37) {
    1526:	15 32       	cpi	r17, 0x25	; 37
    1528:	09 f0       	breq	.+2      	; 0x152c <displayCharacter+0x30>
    152a:	f8 c0       	rjmp	.+496    	; 0x171c <displayCharacter+0x220>
		start_line_address += 7;
    152c:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <__data_end>
		st7565r_set_display_start_line_address(start_line_address++);
    1530:	98 e0       	ldi	r25, 0x08	; 8
    1532:	98 0f       	add	r25, r24
    1534:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <__data_end>
 */
static inline void st7565r_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
    1538:	07 e0       	ldi	r16, 0x07	; 7
    153a:	08 0f       	add	r16, r24
    153c:	0f 73       	andi	r16, 0x3F	; 63
    153e:	00 64       	ori	r16, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1540:	8b e2       	ldi	r24, 0x2B	; 43
    1542:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1544:	be 01       	movw	r22, r28
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	80 ea       	ldi	r24, 0xA0	; 160
    154c:	99 e0       	ldi	r25, 0x09	; 9
    154e:	41 d9       	rcall	.-3454   	; 0x7d2 <usart_spi_select_device>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1556:	e0 ea       	ldi	r30, 0xA0	; 160
    1558:	f9 e0       	ldi	r31, 0x09	; 9
    155a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    155c:	85 ff       	sbrs	r24, 5
    155e:	fd cf       	rjmp	.-6      	; 0x155a <displayCharacter+0x5e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1560:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1564:	e0 ea       	ldi	r30, 0xA0	; 160
    1566:	f9 e0       	ldi	r31, 0x09	; 9
    1568:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    156a:	86 ff       	sbrs	r24, 6
    156c:	fd cf       	rjmp	.-6      	; 0x1568 <displayCharacter+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    156e:	e0 ea       	ldi	r30, 0xA0	; 160
    1570:	f9 e0       	ldi	r31, 0x09	; 9
    1572:	80 e4       	ldi	r24, 0x40	; 64
    1574:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1576:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1578:	be 01       	movw	r22, r28
    157a:	6f 5f       	subi	r22, 0xFF	; 255
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	80 ea       	ldi	r24, 0xA0	; 160
    1580:	99 e0       	ldi	r25, 0x09	; 9
    1582:	3d d9       	rcall	.-3462   	; 0x7fe <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1584:	8b e2       	ldi	r24, 0x2B	; 43
    1586:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1588:	be 01       	movw	r22, r28
    158a:	6f 5f       	subi	r22, 0xFF	; 255
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	80 ea       	ldi	r24, 0xA0	; 160
    1590:	99 e0       	ldi	r25, 0x09	; 9
    1592:	1f d9       	rcall	.-3522   	; 0x7d2 <usart_spi_select_device>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    159a:	e0 ea       	ldi	r30, 0xA0	; 160
    159c:	f9 e0       	ldi	r31, 0x09	; 9
    159e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15a0:	85 ff       	sbrs	r24, 5
    15a2:	fd cf       	rjmp	.-6      	; 0x159e <displayCharacter+0xa2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15a4:	80 e1       	ldi	r24, 0x10	; 16
    15a6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15aa:	e0 ea       	ldi	r30, 0xA0	; 160
    15ac:	f9 e0       	ldi	r31, 0x09	; 9
    15ae:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15b0:	86 ff       	sbrs	r24, 6
    15b2:	fd cf       	rjmp	.-6      	; 0x15ae <displayCharacter+0xb2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15b4:	e0 ea       	ldi	r30, 0xA0	; 160
    15b6:	f9 e0       	ldi	r31, 0x09	; 9
    15b8:	80 e4       	ldi	r24, 0x40	; 64
    15ba:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    15bc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    15be:	be 01       	movw	r22, r28
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	80 ea       	ldi	r24, 0xA0	; 160
    15c6:	99 e0       	ldi	r25, 0x09	; 9
    15c8:	1a d9       	rcall	.-3532   	; 0x7fe <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    15ca:	8b e2       	ldi	r24, 0x2B	; 43
    15cc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	80 ea       	ldi	r24, 0xA0	; 160
    15d6:	99 e0       	ldi	r25, 0x09	; 9
    15d8:	fc d8       	rcall	.-3592   	; 0x7d2 <usart_spi_select_device>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    15e0:	e0 ea       	ldi	r30, 0xA0	; 160
    15e2:	f9 e0       	ldi	r31, 0x09	; 9
    15e4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15e6:	85 ff       	sbrs	r24, 5
    15e8:	fd cf       	rjmp	.-6      	; 0x15e4 <displayCharacter+0xe8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15ea:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15ee:	e0 ea       	ldi	r30, 0xA0	; 160
    15f0:	f9 e0       	ldi	r31, 0x09	; 9
    15f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15f4:	86 ff       	sbrs	r24, 6
    15f6:	fd cf       	rjmp	.-6      	; 0x15f2 <displayCharacter+0xf6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15f8:	e0 ea       	ldi	r30, 0xA0	; 160
    15fa:	f9 e0       	ldi	r31, 0x09	; 9
    15fc:	80 e4       	ldi	r24, 0x40	; 64
    15fe:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1600:	80 81       	ld	r24, Z
    1602:	be 01       	movw	r22, r28
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	80 ea       	ldi	r24, 0xA0	; 160
    160a:	99 e0       	ldi	r25, 0x09	; 9
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
    160c:	f8 d8       	rcall	.-3600   	; 0x7fe <usart_spi_deselect_device>
    160e:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <page_address>
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <page_address>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    1618:	8f 70       	andi	r24, 0x0F	; 15
    161a:	08 2f       	mov	r16, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    161c:	00 6b       	ori	r16, 0xB0	; 176
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    161e:	8b e2       	ldi	r24, 0x2B	; 43
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	be 01       	movw	r22, r28
    1624:	6f 5f       	subi	r22, 0xFF	; 255
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	80 ea       	ldi	r24, 0xA0	; 160
    162a:	99 e0       	ldi	r25, 0x09	; 9
    162c:	d2 d8       	rcall	.-3676   	; 0x7d2 <usart_spi_select_device>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1634:	e0 ea       	ldi	r30, 0xA0	; 160
    1636:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    163c:	fd cf       	rjmp	.-6      	; 0x1638 <displayCharacter+0x13c>
    163e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1642:	e0 ea       	ldi	r30, 0xA0	; 160
    1644:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1646:	81 81       	ldd	r24, Z+1	; 0x01
    1648:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    164a:	fd cf       	rjmp	.-6      	; 0x1646 <displayCharacter+0x14a>
    164c:	e0 ea       	ldi	r30, 0xA0	; 160
    164e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1650:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1652:	81 83       	std	Z+1, r24	; 0x01
    1654:	80 81       	ld	r24, Z
    1656:	be 01       	movw	r22, r28
    1658:	6f 5f       	subi	r22, 0xFF	; 255
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	80 ea       	ldi	r24, 0xA0	; 160
    165e:	99 e0       	ldi	r25, 0x09	; 9
	}

	int i;
	if (character == 100) {
		resetScreen();
    1660:	ce d8       	rcall	.-3684   	; 0x7fe <usart_spi_deselect_device>
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <displayCharacter+0x16c>
    1664:	27 de       	rcall	.-946    	; 0x12b4 <resetScreen>
    1666:	51 c0       	rjmp	.+162    	; 0x170a <displayCharacter+0x20e>
    1668:	81 2f       	mov	r24, r17
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	7c 01       	movw	r14, r24
    166e:	ee 0c       	add	r14, r14
    1670:	ff 1c       	adc	r15, r15
    1672:	e8 0e       	add	r14, r24
    1674:	f9 1e       	adc	r15, r25
    1676:	97 01       	movw	r18, r14
    1678:	22 0f       	add	r18, r18
    167a:	33 1f       	adc	r19, r19
    167c:	22 0f       	add	r18, r18
    167e:	33 1f       	adc	r19, r19
    1680:	a9 01       	movw	r20, r18
    1682:	45 5e       	subi	r20, 0xE5	; 229
    1684:	5f 4d       	sbci	r21, 0xDF	; 223
    1686:	7a 01       	movw	r14, r20
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	6c 01       	movw	r12, r24
    168c:	cc 0c       	add	r12, r12
    168e:	dd 1c       	adc	r13, r13
    1690:	8c 0d       	add	r24, r12
    1692:	9d 1d       	adc	r25, r13
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	fc 01       	movw	r30, r24
    169e:	e5 5e       	subi	r30, 0xE5	; 229
    16a0:	ff 4d       	sbci	r31, 0xDF	; 223
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    16a2:	6f 01       	movw	r12, r30
    16a4:	0f 2e       	mov	r0, r31
    16a6:	fb e2       	ldi	r31, 0x2B	; 43
    16a8:	6f 2e       	mov	r6, r31
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    16aa:	f0 2d       	mov	r31, r0
    16ac:	00 ea       	ldi	r16, 0xA0	; 160
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    16ae:	19 e0       	ldi	r17, 0x09	; 9
    16b0:	0f 2e       	mov	r0, r31
    16b2:	f0 e6       	ldi	r31, 0x60	; 96
    16b4:	af 2e       	mov	r10, r31
    16b6:	f6 e0       	ldi	r31, 0x06	; 6
    16b8:	bf 2e       	mov	r11, r31
    16ba:	f0 2d       	mov	r31, r0
    16bc:	99 24       	eor	r9, r9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    16be:	93 94       	inc	r9
    16c0:	68 94       	set
    16c2:	77 24       	eor	r7, r7
	}
	else {
		for (i = 0; i < 6; i++)
		{
			st7565r_write_data(Characters[character][i]);
    16c4:	76 f8       	bld	r7, 6
    16c6:	f7 01       	movw	r30, r14
    16c8:	80 80       	ld	r8, Z
    16ca:	f2 e0       	ldi	r31, 0x02	; 2
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    16cc:	ef 0e       	add	r14, r31
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    16ce:	f1 1c       	adc	r15, r1
    16d0:	69 82       	std	Y+1, r6	; 0x01
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	c8 01       	movw	r24, r16
    16da:	7b d8       	rcall	.-3850   	; 0x7d2 <usart_spi_select_device>
    16dc:	f5 01       	movw	r30, r10
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    16de:	95 82       	std	Z+5, r9	; 0x05
    16e0:	f8 01       	movw	r30, r16
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    16e2:	81 81       	ldd	r24, Z+1	; 0x01
    16e4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    16e6:	fc cf       	rjmp	.-8      	; 0x16e0 <displayCharacter+0x1e4>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    16e8:	80 82       	st	Z, r8
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    16ea:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    16ec:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    16ee:	86 ff       	sbrs	r24, 6
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    16f0:	fc cf       	rjmp	.-8      	; 0x16ea <displayCharacter+0x1ee>
    16f2:	71 82       	std	Z+1, r7	; 0x01
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    16f4:	80 81       	ld	r24, Z
    16f6:	f5 01       	movw	r30, r10
    16f8:	96 82       	std	Z+6, r9	; 0x06
    16fa:	be 01       	movw	r22, r28
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
	int i;
	if (character == 100) {
		resetScreen();
	}
	else {
		for (i = 0; i < 6; i++)
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	c8 01       	movw	r24, r16
    1702:	7d d8       	rcall	.-3846   	; 0x7fe <usart_spi_deselect_device>
		{
			st7565r_write_data(Characters[character][i]);
		}
	}
	delay_ms(100);
    1704:	ec 14       	cp	r14, r12
    1706:	fd 04       	cpc	r15, r13
    1708:	f1 f6       	brne	.-68     	; 0x16c6 <displayCharacter+0x1ca>
    170a:	66 ed       	ldi	r22, 0xD6	; 214
    170c:	78 e0       	ldi	r23, 0x08	; 8
    170e:	82 e0       	ldi	r24, 0x02	; 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	23 dd       	rcall	.-1466   	; 0x115a <__portable_avr_delay_cycles>
    1714:	80 e1       	ldi	r24, 0x10	; 16
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    1716:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
	}

	int i;
	if (character == 100) {
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <displayCharacter+0x228>
    171c:	14 36       	cpi	r17, 0x64	; 100
    171e:	09 f0       	breq	.+2      	; 0x1722 <displayCharacter+0x226>
			st7565r_write_data(Characters[character][i]);
		}
	}
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    1720:	a3 cf       	rjmp	.-186    	; 0x1668 <displayCharacter+0x16c>
    1722:	a0 cf       	rjmp	.-192    	; 0x1664 <displayCharacter+0x168>
    1724:	0f 90       	pop	r0
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	9f 90       	pop	r9
    173c:	8f 90       	pop	r8
    173e:	7f 90       	pop	r7
    1740:	6f 90       	pop	r6
    1742:	08 95       	ret

00001744 <main>:
uint8_t column_address;
//! store the LCD controller start draw line
uint8_t start_line_address = 0;

int main(void)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	64 97       	sbiw	r28, 0x14	; 20
    174e:	cd bf       	out	0x3d, r28	; 61
	board_init();
    1750:	de bf       	out	0x3e, r29	; 62
	sysclk_init();
    1752:	6b d8       	rcall	.-3882   	; 0x82a <board_init>
    1754:	0e 94 2a 03 	call	0x654	; 0x654 <sysclk_init>
    1758:	80 e1       	ldi	r24, 0x10	; 16
    175a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	// initialize the interface (SPI), ST7565R LCD controller and LCD
	st7565r_init();

	// set addresses at beginning of display
	resetScreen();
    175e:	0e 94 66 01 	call	0x2cc	; 0x2cc <st7565r_init>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    1762:	a8 dd       	rcall	.-1200   	; 0x12b4 <resetScreen>
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	70 e2       	ldi	r23, 0x20	; 32
    1768:	80 ea       	ldi	r24, 0xA0	; 160

	uint8_t tx_buf[] = "\n\rEnter a message: ";
    176a:	98 e0       	ldi	r25, 0x08	; 8
    176c:	d0 d9       	rcall	.-3168   	; 0xb0e <usart_init_rs232>
    176e:	84 e1       	ldi	r24, 0x14	; 20
    1770:	e7 e0       	ldi	r30, 0x07	; 7
    1772:	f0 e2       	ldi	r31, 0x20	; 32
    1774:	de 01       	movw	r26, r28
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	01 90       	ld	r0, Z+
    177a:	0d 92       	st	X+, r0
    177c:	8a 95       	dec	r24
    177e:	e1 f7       	brne	.-8      	; 0x1778 <main+0x34>
    1780:	8e 01       	movw	r16, r28
    1782:	0f 5f       	subi	r16, 0xFF	; 255
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	7e 01       	movw	r14, r28
    1788:	81 e8       	ldi	r24, 0x81	; 129
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    178a:	e8 0e       	add	r14, r24
    178c:	f1 1c       	adc	r15, r1
    178e:	f8 01       	movw	r30, r16
    1790:	61 91       	ld	r22, Z+
    1792:	8f 01       	movw	r16, r30
    1794:	80 ea       	ldi	r24, 0xA0	; 160
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);

	uint8_t tx_buf[] = "\n\rEnter a message: ";
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
    1796:	98 e0       	ldi	r25, 0x08	; 8
    1798:	9d d8       	rcall	.-3782   	; 0x8d4 <usart_putchar>
		//}
	//}

	uint8_t input;
	while (true) {
		input = usart_getchar(USART_SERIAL_EXAMPLE);
    179a:	0e 15       	cp	r16, r14
    179c:	1f 05       	cpc	r17, r15
		int userInput = getCharacter(input);
    179e:	b9 f7       	brne	.-18     	; 0x178e <main+0x4a>
    17a0:	80 ea       	ldi	r24, 0xA0	; 160
		displayCharacter(userInput);
    17a2:	98 e0       	ldi	r25, 0x08	; 8
    17a4:	9f d8       	rcall	.-3778   	; 0x8e4 <usart_getchar>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	e3 dc       	rcall	.-1594   	; 0x1170 <getCharacter>
    17aa:	a8 de       	rcall	.-688    	; 0x14fc <displayCharacter>
    17ac:	f9 cf       	rjmp	.-14     	; 0x17a0 <main+0x5c>

000017ae <__udivmodsi4>:
    17ae:	a1 e2       	ldi	r26, 0x21	; 33
    17b0:	1a 2e       	mov	r1, r26
    17b2:	aa 1b       	sub	r26, r26
    17b4:	bb 1b       	sub	r27, r27
    17b6:	fd 01       	movw	r30, r26
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <__udivmodsi4_ep>

000017ba <__udivmodsi4_loop>:
    17ba:	aa 1f       	adc	r26, r26
    17bc:	bb 1f       	adc	r27, r27
    17be:	ee 1f       	adc	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	a2 17       	cp	r26, r18
    17c4:	b3 07       	cpc	r27, r19
    17c6:	e4 07       	cpc	r30, r20
    17c8:	f5 07       	cpc	r31, r21
    17ca:	20 f0       	brcs	.+8      	; 0x17d4 <__udivmodsi4_ep>
    17cc:	a2 1b       	sub	r26, r18
    17ce:	b3 0b       	sbc	r27, r19
    17d0:	e4 0b       	sbc	r30, r20
    17d2:	f5 0b       	sbc	r31, r21

000017d4 <__udivmodsi4_ep>:
    17d4:	66 1f       	adc	r22, r22
    17d6:	77 1f       	adc	r23, r23
    17d8:	88 1f       	adc	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	1a 94       	dec	r1
    17de:	69 f7       	brne	.-38     	; 0x17ba <__udivmodsi4_loop>
    17e0:	60 95       	com	r22
    17e2:	70 95       	com	r23
    17e4:	80 95       	com	r24
    17e6:	90 95       	com	r25
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	bd 01       	movw	r22, r26
    17ee:	cf 01       	movw	r24, r30
    17f0:	08 95       	ret

000017f2 <__tablejump2__>:
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	88 1f       	adc	r24, r24
    17f8:	8b bf       	out	0x3b, r24	; 59
    17fa:	07 90       	elpm	r0, Z+
    17fc:	f6 91       	elpm	r31, Z
    17fe:	e0 2d       	mov	r30, r0
    1800:	19 94       	eijmp

00001802 <_exit>:
    1802:	f8 94       	cli

00001804 <__stop_program>:
    1804:	ff cf       	rjmp	.-2      	; 0x1804 <__stop_program>

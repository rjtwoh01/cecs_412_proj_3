
USART_EXAMPLE3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00802000  00000890  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007375  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003a29  00000000  00000000  00007e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002747  00000000  00000000  0000b83e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  0000df88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002e338  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001366  00000000  00000000  0003c528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0003d88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a56c  00000000  00000000  0003d96e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
   6:	00 00       	nop
   8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
   a:	00 00       	nop
   c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
   e:	00 00       	nop
  10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
  12:	00 00       	nop
  14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
  16:	00 00       	nop
  18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
  1e:	00 00       	nop
  20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
  22:	00 00       	nop
  24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
  26:	00 00       	nop
  28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
  2e:	00 00       	nop
  30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
  36:	00 00       	nop
  38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
  3e:	00 00       	nop
  40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
  42:	00 00       	nop
  44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
  46:	00 00       	nop
  48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
  4e:	00 00       	nop
  50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
  52:	00 00       	nop
  54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
  56:	00 00       	nop
  58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
  5e:	00 00       	nop
  60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
  62:	00 00       	nop
  64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
  66:	00 00       	nop
  68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
  6e:	00 00       	nop
  70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
  72:	00 00       	nop
  74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
  76:	00 00       	nop
  78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
  7e:	00 00       	nop
  80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
  82:	00 00       	nop
  84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
  86:	00 00       	nop
  88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
  8e:	00 00       	nop
  90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
  92:	00 00       	nop
  94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
  96:	00 00       	nop
  98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
  be:	00 00       	nop
  c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
  da:	00 00       	nop
  dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
  de:	00 00       	nop
  e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a2 c0       	rjmp	.+324    	; 0x22a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a0 c0       	rjmp	.+320    	; 0x22a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9e c0       	rjmp	.+316    	; 0x22a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9c c0       	rjmp	.+312    	; 0x22a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9a c0       	rjmp	.+308    	; 0x22a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	98 c0       	rjmp	.+304    	; 0x22a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	96 c0       	rjmp	.+300    	; 0x22a <__bad_interrupt>
  fe:	00 00       	nop
 100:	94 c0       	rjmp	.+296    	; 0x22a <__bad_interrupt>
 102:	00 00       	nop
 104:	92 c0       	rjmp	.+292    	; 0x22a <__bad_interrupt>
 106:	00 00       	nop
 108:	90 c0       	rjmp	.+288    	; 0x22a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8e c0       	rjmp	.+284    	; 0x22a <__bad_interrupt>
 10e:	00 00       	nop
 110:	8c c0       	rjmp	.+280    	; 0x22a <__bad_interrupt>
 112:	00 00       	nop
 114:	8a c0       	rjmp	.+276    	; 0x22a <__bad_interrupt>
 116:	00 00       	nop
 118:	88 c0       	rjmp	.+272    	; 0x22a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	86 c0       	rjmp	.+268    	; 0x22a <__bad_interrupt>
 11e:	00 00       	nop
 120:	84 c0       	rjmp	.+264    	; 0x22a <__bad_interrupt>
 122:	00 00       	nop
 124:	82 c0       	rjmp	.+260    	; 0x22a <__bad_interrupt>
 126:	00 00       	nop
 128:	80 c0       	rjmp	.+256    	; 0x22a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7e c0       	rjmp	.+252    	; 0x22a <__bad_interrupt>
 12e:	00 00       	nop
 130:	7c c0       	rjmp	.+248    	; 0x22a <__bad_interrupt>
 132:	00 00       	nop
 134:	7a c0       	rjmp	.+244    	; 0x22a <__bad_interrupt>
 136:	00 00       	nop
 138:	78 c0       	rjmp	.+240    	; 0x22a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	76 c0       	rjmp	.+236    	; 0x22a <__bad_interrupt>
 13e:	00 00       	nop
 140:	74 c0       	rjmp	.+232    	; 0x22a <__bad_interrupt>
 142:	00 00       	nop
 144:	72 c0       	rjmp	.+228    	; 0x22a <__bad_interrupt>
 146:	00 00       	nop
 148:	70 c0       	rjmp	.+224    	; 0x22a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6e c0       	rjmp	.+220    	; 0x22a <__bad_interrupt>
 14e:	00 00       	nop
 150:	6c c0       	rjmp	.+216    	; 0x22a <__bad_interrupt>
 152:	00 00       	nop
 154:	6a c0       	rjmp	.+212    	; 0x22a <__bad_interrupt>
 156:	00 00       	nop
 158:	68 c0       	rjmp	.+208    	; 0x22a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	66 c0       	rjmp	.+204    	; 0x22a <__bad_interrupt>
 15e:	00 00       	nop
 160:	64 c0       	rjmp	.+200    	; 0x22a <__bad_interrupt>
 162:	00 00       	nop
 164:	62 c0       	rjmp	.+196    	; 0x22a <__bad_interrupt>
 166:	00 00       	nop
 168:	60 c0       	rjmp	.+192    	; 0x22a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5e c0       	rjmp	.+188    	; 0x22a <__bad_interrupt>
 16e:	00 00       	nop
 170:	5c c0       	rjmp	.+184    	; 0x22a <__bad_interrupt>
 172:	00 00       	nop
 174:	5a c0       	rjmp	.+180    	; 0x22a <__bad_interrupt>
 176:	00 00       	nop
 178:	58 c0       	rjmp	.+176    	; 0x22a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	56 c0       	rjmp	.+172    	; 0x22a <__bad_interrupt>
 17e:	00 00       	nop
 180:	54 c0       	rjmp	.+168    	; 0x22a <__bad_interrupt>
 182:	00 00       	nop
 184:	52 c0       	rjmp	.+164    	; 0x22a <__bad_interrupt>
 186:	00 00       	nop
 188:	50 c0       	rjmp	.+160    	; 0x22a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4e c0       	rjmp	.+156    	; 0x22a <__bad_interrupt>
 18e:	00 00       	nop
 190:	4c c0       	rjmp	.+152    	; 0x22a <__bad_interrupt>
 192:	00 00       	nop
 194:	4a c0       	rjmp	.+148    	; 0x22a <__bad_interrupt>
 196:	00 00       	nop
 198:	48 c0       	rjmp	.+144    	; 0x22a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	46 c0       	rjmp	.+140    	; 0x22a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	44 c0       	rjmp	.+136    	; 0x22a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	42 c0       	rjmp	.+132    	; 0x22a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	40 c0       	rjmp	.+128    	; 0x22a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3c c0       	rjmp	.+120    	; 0x22a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3a c0       	rjmp	.+116    	; 0x22a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	38 c0       	rjmp	.+112    	; 0x22a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	36 c0       	rjmp	.+108    	; 0x22a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	34 c0       	rjmp	.+104    	; 0x22a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	32 c0       	rjmp	.+100    	; 0x22a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	30 c0       	rjmp	.+96     	; 0x22a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2e c0       	rjmp	.+92     	; 0x22a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2c c0       	rjmp	.+88     	; 0x22a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2a c0       	rjmp	.+84     	; 0x22a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	28 c0       	rjmp	.+80     	; 0x22a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	26 c0       	rjmp	.+76     	; 0x22a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	22 c0       	rjmp	.+68     	; 0x22a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1c c0       	rjmp	.+56     	; 0x22a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	18 c0       	rjmp	.+48     	; 0x22a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e0 e9       	ldi	r30, 0x90	; 144
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ae 32       	cpi	r26, 0x2E	; 46
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	b4 d2       	rcall	.+1384   	; 0x790 <main>
 228:	31 c3       	rjmp	.+1634   	; 0x88c <_exit>

0000022a <__bad_interrupt>:
 22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 232:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 236:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 23a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 23e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 242:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 246:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 24a:	08 95       	ret

0000024c <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	1f 92       	push	r1
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 256:	9f b7       	in	r25, 0x3f	; 63
 258:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 25a:	f8 94       	cli
	return flags;
 25c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 25e:	e8 2f       	mov	r30, r24
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	e0 59       	subi	r30, 0x90	; 144
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	60 95       	com	r22
 268:	80 81       	ld	r24, Z
 26a:	68 23       	and	r22, r24
 26c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 26e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 282:	c6 2f       	mov	r28, r22
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	de 01       	movw	r26, r28
 288:	02 2e       	mov	r0, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <ioport_configure_port_pin+0x18>
 28c:	b5 95       	asr	r27
 28e:	a7 95       	ror	r26
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <ioport_configure_port_pin+0x14>
 294:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 296:	50 8b       	std	Z+16, r21	; 0x10
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 29e:	28 30       	cpi	r18, 0x08	; 8
 2a0:	31 05       	cpc	r19, r1
 2a2:	89 f7       	brne	.-30     	; 0x286 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2a4:	40 ff       	sbrs	r20, 0
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 2a8:	41 ff       	sbrs	r20, 1
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2ac:	fc 01       	movw	r30, r24
 2ae:	65 83       	std	Z+5, r22	; 0x05
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2b2:	fc 01       	movw	r30, r24
 2b4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2b6:	fc 01       	movw	r30, r24
 2b8:	61 83       	std	Z+1, r22	; 0x01
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2bc:	fc 01       	movw	r30, r24
 2be:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2c6:	43 e0       	ldi	r20, 0x03	; 3
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 ee       	ldi	r24, 0xE0	; 224
 2ce:	97 e0       	ldi	r25, 0x07	; 7
 2d0:	d3 df       	rcall	.-90     	; 0x278 <ioport_configure_port_pin>
 2d2:	43 e0       	ldi	r20, 0x03	; 3
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	80 ee       	ldi	r24, 0xE0	; 224
 2da:	97 e0       	ldi	r25, 0x07	; 7
 2dc:	cd df       	rcall	.-102    	; 0x278 <ioport_configure_port_pin>
 2de:	43 e0       	ldi	r20, 0x03	; 3
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	60 e1       	ldi	r22, 0x10	; 16
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	96 e0       	ldi	r25, 0x06	; 6
 2e8:	c7 df       	rcall	.-114    	; 0x278 <ioport_configure_port_pin>
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	50 e4       	ldi	r21, 0x40	; 64
 2ee:	60 e2       	ldi	r22, 0x20	; 32
 2f0:	80 e6       	ldi	r24, 0x60	; 96
 2f2:	96 e0       	ldi	r25, 0x06	; 6
 2f4:	c1 df       	rcall	.-126    	; 0x278 <ioport_configure_port_pin>
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	5b e1       	ldi	r21, 0x1B	; 27
 2fa:	60 e2       	ldi	r22, 0x20	; 32
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	96 e0       	ldi	r25, 0x06	; 6
 300:	bb df       	rcall	.-138    	; 0x278 <ioport_configure_port_pin>
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	5b e1       	ldi	r21, 0x1B	; 27
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	80 ea       	ldi	r24, 0xA0	; 160
 30a:	96 e0       	ldi	r25, 0x06	; 6
 30c:	b5 df       	rcall	.-150    	; 0x278 <ioport_configure_port_pin>
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	5b e1       	ldi	r21, 0x1B	; 27
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	80 ea       	ldi	r24, 0xA0	; 160
 316:	96 e0       	ldi	r25, 0x06	; 6
 318:	af df       	rcall	.-162    	; 0x278 <ioport_configure_port_pin>
 31a:	43 e0       	ldi	r20, 0x03	; 3
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	68 e0       	ldi	r22, 0x08	; 8
 320:	80 e4       	ldi	r24, 0x40	; 64
 322:	96 e0       	ldi	r25, 0x06	; 6
 324:	a9 df       	rcall	.-174    	; 0x278 <ioport_configure_port_pin>
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	80 e4       	ldi	r24, 0x40	; 64
 32e:	96 e0       	ldi	r25, 0x06	; 6
 330:	a3 cf       	rjmp	.-186    	; 0x278 <ioport_configure_port_pin>
 332:	08 95       	ret

00000334 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 334:	fc 01       	movw	r30, r24
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	95 ff       	sbrs	r25, 5
 33a:	fd cf       	rjmp	.-6      	; 0x336 <usart_putchar+0x2>
 33c:	60 83       	st	Z, r22
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <usart_getchar>:
 344:	fc 01       	movw	r30, r24
 346:	91 81       	ldd	r25, Z+1	; 0x01
 348:	99 23       	and	r25, r25
 34a:	ec f7       	brge	.-6      	; 0x346 <usart_getchar+0x2>
 34c:	80 81       	ld	r24, Z
 34e:	08 95       	ret

00000350 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 350:	4f 92       	push	r4
 352:	5f 92       	push	r5
 354:	6f 92       	push	r6
 356:	7f 92       	push	r7
 358:	8f 92       	push	r8
 35a:	9f 92       	push	r9
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	7c 01       	movw	r14, r24
 36c:	4a 01       	movw	r8, r20
 36e:	5b 01       	movw	r10, r22
 370:	28 01       	movw	r4, r16
 372:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 374:	fc 01       	movw	r30, r24
 376:	84 81       	ldd	r24, Z+4	; 0x04
 378:	82 ff       	sbrs	r24, 2
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 37c:	d9 01       	movw	r26, r18
 37e:	c8 01       	movw	r24, r16
 380:	68 94       	set
 382:	12 f8       	bld	r1, 2
 384:	b6 95       	lsr	r27
 386:	a7 95       	ror	r26
 388:	97 95       	ror	r25
 38a:	87 95       	ror	r24
 38c:	16 94       	lsr	r1
 38e:	d1 f7       	brne	.-12     	; 0x384 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 390:	b9 01       	movw	r22, r18
 392:	a8 01       	movw	r20, r16
 394:	03 2e       	mov	r0, r19
 396:	36 e1       	ldi	r19, 0x16	; 22
 398:	76 95       	lsr	r23
 39a:	67 95       	ror	r22
 39c:	57 95       	ror	r21
 39e:	47 95       	ror	r20
 3a0:	3a 95       	dec	r19
 3a2:	d1 f7       	brne	.-12     	; 0x398 <usart_set_baudrate+0x48>
 3a4:	30 2d       	mov	r19, r0
 3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
 3a8:	d9 01       	movw	r26, r18
 3aa:	c8 01       	movw	r24, r16
 3ac:	68 94       	set
 3ae:	13 f8       	bld	r1, 3
 3b0:	b6 95       	lsr	r27
 3b2:	a7 95       	ror	r26
 3b4:	97 95       	ror	r25
 3b6:	87 95       	ror	r24
 3b8:	16 94       	lsr	r1
 3ba:	d1 f7       	brne	.-12     	; 0x3b0 <usart_set_baudrate+0x60>
		min_rate /= 2;
 3bc:	b9 01       	movw	r22, r18
 3be:	a8 01       	movw	r20, r16
 3c0:	03 2e       	mov	r0, r19
 3c2:	37 e1       	ldi	r19, 0x17	; 23
 3c4:	76 95       	lsr	r23
 3c6:	67 95       	ror	r22
 3c8:	57 95       	ror	r21
 3ca:	47 95       	ror	r20
 3cc:	3a 95       	dec	r19
 3ce:	d1 f7       	brne	.-12     	; 0x3c4 <usart_set_baudrate+0x74>
 3d0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 3d2:	88 15       	cp	r24, r8
 3d4:	99 05       	cpc	r25, r9
 3d6:	aa 05       	cpc	r26, r10
 3d8:	bb 05       	cpc	r27, r11
 3da:	08 f4       	brcc	.+2      	; 0x3de <usart_set_baudrate+0x8e>
 3dc:	a2 c0       	rjmp	.+324    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 3de:	84 16       	cp	r8, r20
 3e0:	95 06       	cpc	r9, r21
 3e2:	a6 06       	cpc	r10, r22
 3e4:	b7 06       	cpc	r11, r23
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <usart_set_baudrate+0x9a>
 3e8:	9e c0       	rjmp	.+316    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 3ea:	f7 01       	movw	r30, r14
 3ec:	84 81       	ldd	r24, Z+4	; 0x04
 3ee:	82 fd       	sbrc	r24, 2
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <usart_set_baudrate+0xaa>
		baud *= 2;
 3f2:	88 0c       	add	r8, r8
 3f4:	99 1c       	adc	r9, r9
 3f6:	aa 1c       	adc	r10, r10
 3f8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 3fa:	c3 01       	movw	r24, r6
 3fc:	b2 01       	movw	r22, r4
 3fe:	a5 01       	movw	r20, r10
 400:	94 01       	movw	r18, r8
 402:	22 d2       	rcall	.+1092   	; 0x848 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 404:	2f 3f       	cpi	r18, 0xFF	; 255
 406:	31 05       	cpc	r19, r1
 408:	41 05       	cpc	r20, r1
 40a:	51 05       	cpc	r21, r1
 40c:	08 f4       	brcc	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	8d c0       	rjmp	.+282    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	a0 e0       	ldi	r26, 0x00	; 0
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	c9 ef       	ldi	r28, 0xF9	; 249
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	4a 07       	cpc	r20, r26
 422:	5b 07       	cpc	r21, r27
 424:	58 f0       	brcs	.+22     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			break;
		}

		limit <<= 1;
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
 42e:	cd 3f       	cpi	r28, 0xFD	; 253
 430:	0c f4       	brge	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			limit |= 1;
 432:	81 60       	ori	r24, 0x01	; 1
 434:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 436:	c7 30       	cpi	r28, 0x07	; 7
 438:	89 f7       	brne	.-30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 43a:	4d c0       	rjmp	.+154    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 43c:	cc 23       	and	r28, r28
 43e:	0c f0       	brlt	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	4a c0       	rjmp	.+148    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 442:	d5 01       	movw	r26, r10
 444:	c4 01       	movw	r24, r8
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	48 1a       	sub	r4, r24
 460:	59 0a       	sbc	r5, r25
 462:	6a 0a       	sbc	r6, r26
 464:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 466:	ce 3f       	cpi	r28, 0xFE	; 254
 468:	ec f4       	brge	.+58     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 46a:	8d ef       	ldi	r24, 0xFD	; 253
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	8c 1b       	sub	r24, r28
 470:	91 09       	sbc	r25, r1
 472:	c7 fd       	sbrc	r28, 7
 474:	93 95       	inc	r25
 476:	04 c0       	rjmp	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 478:	44 0c       	add	r4, r4
 47a:	55 1c       	adc	r5, r5
 47c:	66 1c       	adc	r6, r6
 47e:	77 1c       	adc	r7, r7
 480:	8a 95       	dec	r24
 482:	d2 f7       	brpl	.-12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 484:	d5 01       	movw	r26, r10
 486:	c4 01       	movw	r24, r8
 488:	b6 95       	lsr	r27
 48a:	a7 95       	ror	r26
 48c:	97 95       	ror	r25
 48e:	87 95       	ror	r24
 490:	bc 01       	movw	r22, r24
 492:	cd 01       	movw	r24, r26
 494:	64 0d       	add	r22, r4
 496:	75 1d       	adc	r23, r5
 498:	86 1d       	adc	r24, r6
 49a:	97 1d       	adc	r25, r7
 49c:	a5 01       	movw	r20, r10
 49e:	94 01       	movw	r18, r8
 4a0:	d3 d1       	rcall	.+934    	; 0x848 <__udivmodsi4>
 4a2:	35 c0       	rjmp	.+106    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		} else {
			baud <<= exp + 3;
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	8c 0f       	add	r24, r28
 4a8:	a5 01       	movw	r20, r10
 4aa:	94 01       	movw	r18, r8
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	44 1f       	adc	r20, r20
 4b4:	55 1f       	adc	r21, r21
 4b6:	8a 95       	dec	r24
 4b8:	d2 f7       	brpl	.-12     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
			div = (cpu_hz + baud / 2) / baud;
 4ba:	da 01       	movw	r26, r20
 4bc:	c9 01       	movw	r24, r18
 4be:	b6 95       	lsr	r27
 4c0:	a7 95       	ror	r26
 4c2:	97 95       	ror	r25
 4c4:	87 95       	ror	r24
 4c6:	bc 01       	movw	r22, r24
 4c8:	cd 01       	movw	r24, r26
 4ca:	64 0d       	add	r22, r4
 4cc:	75 1d       	adc	r23, r5
 4ce:	86 1d       	adc	r24, r6
 4d0:	97 1d       	adc	r25, r7
 4d2:	ba d1       	rcall	.+884    	; 0x848 <__udivmodsi4>
 4d4:	1c c0       	rjmp	.+56     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	8c 0f       	add	r24, r28
 4da:	a5 01       	movw	r20, r10
 4dc:	94 01       	movw	r18, r8
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	44 1f       	adc	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	8a 95       	dec	r24
 4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		div = (cpu_hz + baud / 2) / baud - 1;
 4ec:	da 01       	movw	r26, r20
 4ee:	c9 01       	movw	r24, r18
 4f0:	b6 95       	lsr	r27
 4f2:	a7 95       	ror	r26
 4f4:	97 95       	ror	r25
 4f6:	87 95       	ror	r24
 4f8:	bc 01       	movw	r22, r24
 4fa:	cd 01       	movw	r24, r26
 4fc:	64 0d       	add	r22, r4
 4fe:	75 1d       	adc	r23, r5
 500:	86 1d       	adc	r24, r6
 502:	97 1d       	adc	r25, r7
 504:	a1 d1       	rcall	.+834    	; 0x848 <__udivmodsi4>
 506:	21 50       	subi	r18, 0x01	; 1
 508:	31 09       	sbc	r19, r1
 50a:	41 09       	sbc	r20, r1
 50c:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 50e:	83 2f       	mov	r24, r19
 510:	8f 70       	andi	r24, 0x0F	; 15
 512:	c2 95       	swap	r28
 514:	c0 7f       	andi	r28, 0xF0	; 240
 516:	c8 2b       	or	r28, r24
 518:	f7 01       	movw	r30, r14
 51a:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 51c:	26 83       	std	Z+6, r18	; 0x06

	return true;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	18 c0       	rjmp	.+48     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	16 c0       	rjmp	.+44     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	14 c0       	rjmp	.+40     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 52a:	d5 01       	movw	r26, r10
 52c:	c4 01       	movw	r24, r8
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	aa 1f       	adc	r26, r26
 53c:	bb 1f       	adc	r27, r27
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	48 1a       	sub	r4, r24
 548:	59 0a       	sbc	r5, r25
 54a:	6a 0a       	sbc	r6, r26
 54c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 54e:	c9 ef       	ldi	r28, 0xF9	; 249
 550:	8c cf       	rjmp	.-232    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	bf 90       	pop	r11
 55e:	af 90       	pop	r10
 560:	9f 90       	pop	r9
 562:	8f 90       	pop	r8
 564:	7f 90       	pop	r7
 566:	6f 90       	pop	r6
 568:	5f 90       	pop	r5
 56a:	4f 90       	pop	r4
 56c:	08 95       	ret

0000056e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
 578:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	09 f4       	brne	.+2      	; 0x580 <usart_init_rs232+0x12>
 57e:	e6 c0       	rjmp	.+460    	; 0x74c <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 580:	80 3c       	cpi	r24, 0xC0	; 192
 582:	91 05       	cpc	r25, r1
 584:	21 f4       	brne	.+8      	; 0x58e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 586:	60 e1       	ldi	r22, 0x10	; 16
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	60 de       	rcall	.-832    	; 0x24c <sysclk_enable_module>
 58c:	df c0       	rjmp	.+446    	; 0x74c <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 58e:	c0 38       	cpi	r28, 0x80	; 128
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	d8 07       	cpc	r29, r24
 594:	21 f4       	brne	.+8      	; 0x59e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	58 de       	rcall	.-848    	; 0x24c <sysclk_enable_module>
 59c:	d7 c0       	rjmp	.+430    	; 0x74c <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 59e:	c1 15       	cp	r28, r1
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 5a4:	21 f4       	brne	.+8      	; 0x5ae <usart_init_rs232+0x40>
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	50 de       	rcall	.-864    	; 0x24c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 5ac:	cf c0       	rjmp	.+414    	; 0x74c <usart_init_rs232+0x1de>
 5ae:	c0 38       	cpi	r28, 0x80	; 128
 5b0:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 5b2:	df 07       	cpc	r29, r31
 5b4:	21 f4       	brne	.+8      	; 0x5be <usart_init_rs232+0x50>
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	48 de       	rcall	.-880    	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 5bc:	c7 c0       	rjmp	.+398    	; 0x74c <usart_init_rs232+0x1de>
 5be:	c0 39       	cpi	r28, 0x90	; 144
 5c0:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 5c2:	d8 07       	cpc	r29, r24
 5c4:	21 f4       	brne	.+8      	; 0x5ce <usart_init_rs232+0x60>
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	40 de       	rcall	.-896    	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 5cc:	bf c0       	rjmp	.+382    	; 0x74c <usart_init_rs232+0x1de>
 5ce:	c1 15       	cp	r28, r1
 5d0:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 5d2:	de 07       	cpc	r29, r30
 5d4:	21 f4       	brne	.+8      	; 0x5de <usart_init_rs232+0x70>
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 5da:	38 de       	rcall	.-912    	; 0x24c <sysclk_enable_module>
 5dc:	b7 c0       	rjmp	.+366    	; 0x74c <usart_init_rs232+0x1de>
 5de:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 5e0:	f2 e0       	ldi	r31, 0x02	; 2
 5e2:	df 07       	cpc	r29, r31
 5e4:	21 f4       	brne	.+8      	; 0x5ee <usart_init_rs232+0x80>
 5e6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	30 de       	rcall	.-928    	; 0x24c <sysclk_enable_module>
 5ec:	af c0       	rjmp	.+350    	; 0x74c <usart_init_rs232+0x1de>
 5ee:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	d8 07       	cpc	r29, r24
 5f4:	21 f4       	brne	.+8      	; 0x5fe <usart_init_rs232+0x90>
 5f6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	28 de       	rcall	.-944    	; 0x24c <sysclk_enable_module>
 5fc:	a7 c0       	rjmp	.+334    	; 0x74c <usart_init_rs232+0x1de>
 5fe:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 600:	e8 e0       	ldi	r30, 0x08	; 8
 602:	de 07       	cpc	r29, r30
 604:	21 f4       	brne	.+8      	; 0x60e <usart_init_rs232+0xa0>
 606:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	20 de       	rcall	.-960    	; 0x24c <sysclk_enable_module>
 60c:	9f c0       	rjmp	.+318    	; 0x74c <usart_init_rs232+0x1de>
 60e:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 610:	f9 e0       	ldi	r31, 0x09	; 9
 612:	df 07       	cpc	r29, r31
 614:	21 f4       	brne	.+8      	; 0x61e <usart_init_rs232+0xb0>
 616:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	18 de       	rcall	.-976    	; 0x24c <sysclk_enable_module>
 61c:	97 c0       	rjmp	.+302    	; 0x74c <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 61e:	c1 15       	cp	r28, r1
 620:	8a e0       	ldi	r24, 0x0A	; 10
 622:	d8 07       	cpc	r29, r24
 624:	21 f4       	brne	.+8      	; 0x62e <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	85 e0       	ldi	r24, 0x05	; 5
 62a:	10 de       	rcall	.-992    	; 0x24c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 62c:	8f c0       	rjmp	.+286    	; 0x74c <usart_init_rs232+0x1de>
 62e:	c1 15       	cp	r28, r1
 630:	eb e0       	ldi	r30, 0x0B	; 11
 632:	de 07       	cpc	r29, r30
 634:	21 f4       	brne	.+8      	; 0x63e <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	86 e0       	ldi	r24, 0x06	; 6
 63a:	08 de       	rcall	.-1008   	; 0x24c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 63c:	87 c0       	rjmp	.+270    	; 0x74c <usart_init_rs232+0x1de>
 63e:	c0 34       	cpi	r28, 0x40	; 64
 640:	f8 e0       	ldi	r31, 0x08	; 8
 642:	df 07       	cpc	r29, r31
 644:	21 f4       	brne	.+8      	; 0x64e <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 646:	62 e0       	ldi	r22, 0x02	; 2
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	00 de       	rcall	.-1024   	; 0x24c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 64c:	7f c0       	rjmp	.+254    	; 0x74c <usart_init_rs232+0x1de>
 64e:	c0 34       	cpi	r28, 0x40	; 64
 650:	89 e0       	ldi	r24, 0x09	; 9
 652:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 654:	21 f4       	brne	.+8      	; 0x65e <usart_init_rs232+0xf0>
 656:	62 e0       	ldi	r22, 0x02	; 2
 658:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 65a:	f8 dd       	rcall	.-1040   	; 0x24c <sysclk_enable_module>
 65c:	77 c0       	rjmp	.+238    	; 0x74c <usart_init_rs232+0x1de>
 65e:	c0 34       	cpi	r28, 0x40	; 64
 660:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 662:	de 07       	cpc	r29, r30
 664:	21 f4       	brne	.+8      	; 0x66e <usart_init_rs232+0x100>
 666:	62 e0       	ldi	r22, 0x02	; 2
 668:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 66a:	f0 dd       	rcall	.-1056   	; 0x24c <sysclk_enable_module>
 66c:	6f c0       	rjmp	.+222    	; 0x74c <usart_init_rs232+0x1de>
 66e:	c0 39       	cpi	r28, 0x90	; 144
 670:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 672:	df 07       	cpc	r29, r31
 674:	21 f4       	brne	.+8      	; 0x67e <usart_init_rs232+0x110>
 676:	64 e0       	ldi	r22, 0x04	; 4
 678:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 67a:	e8 dd       	rcall	.-1072   	; 0x24c <sysclk_enable_module>
 67c:	67 c0       	rjmp	.+206    	; 0x74c <usart_init_rs232+0x1de>
 67e:	c0 39       	cpi	r28, 0x90	; 144
 680:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 682:	d8 07       	cpc	r29, r24
 684:	21 f4       	brne	.+8      	; 0x68e <usart_init_rs232+0x120>
 686:	64 e0       	ldi	r22, 0x04	; 4
 688:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 68a:	e0 dd       	rcall	.-1088   	; 0x24c <sysclk_enable_module>
 68c:	5f c0       	rjmp	.+190    	; 0x74c <usart_init_rs232+0x1de>
 68e:	c0 39       	cpi	r28, 0x90	; 144
 690:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 692:	de 07       	cpc	r29, r30
 694:	21 f4       	brne	.+8      	; 0x69e <usart_init_rs232+0x130>
 696:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	d8 dd       	rcall	.-1104   	; 0x24c <sysclk_enable_module>
 69c:	57 c0       	rjmp	.+174    	; 0x74c <usart_init_rs232+0x1de>
 69e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 6a0:	fb e0       	ldi	r31, 0x0B	; 11
 6a2:	df 07       	cpc	r29, r31
 6a4:	21 f4       	brne	.+8      	; 0x6ae <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 6a6:	64 e0       	ldi	r22, 0x04	; 4
 6a8:	86 e0       	ldi	r24, 0x06	; 6
 6aa:	d0 dd       	rcall	.-1120   	; 0x24c <sysclk_enable_module>
 6ac:	4f c0       	rjmp	.+158    	; 0x74c <usart_init_rs232+0x1de>
 6ae:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	d8 07       	cpc	r29, r24
 6b4:	21 f4       	brne	.+8      	; 0x6be <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 6b6:	68 e0       	ldi	r22, 0x08	; 8
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	c8 dd       	rcall	.-1136   	; 0x24c <sysclk_enable_module>
 6bc:	47 c0       	rjmp	.+142    	; 0x74c <usart_init_rs232+0x1de>
 6be:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 6c0:	e9 e0       	ldi	r30, 0x09	; 9
 6c2:	de 07       	cpc	r29, r30
 6c4:	21 f4       	brne	.+8      	; 0x6ce <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 6c6:	68 e0       	ldi	r22, 0x08	; 8
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	c0 dd       	rcall	.-1152   	; 0x24c <sysclk_enable_module>
 6cc:	3f c0       	rjmp	.+126    	; 0x74c <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 6ce:	c0 3a       	cpi	r28, 0xA0	; 160
 6d0:	f8 e0       	ldi	r31, 0x08	; 8
 6d2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 6d4:	21 f4       	brne	.+8      	; 0x6de <usart_init_rs232+0x170>
 6d6:	60 e1       	ldi	r22, 0x10	; 16
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	b8 dd       	rcall	.-1168   	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 6dc:	37 c0       	rjmp	.+110    	; 0x74c <usart_init_rs232+0x1de>
 6de:	c0 3a       	cpi	r28, 0xA0	; 160
 6e0:	89 e0       	ldi	r24, 0x09	; 9
 6e2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 6e4:	21 f4       	brne	.+8      	; 0x6ee <usart_init_rs232+0x180>
 6e6:	60 e1       	ldi	r22, 0x10	; 16
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	b0 dd       	rcall	.-1184   	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 6ec:	2f c0       	rjmp	.+94     	; 0x74c <usart_init_rs232+0x1de>
 6ee:	c0 3a       	cpi	r28, 0xA0	; 160
 6f0:	ea e0       	ldi	r30, 0x0A	; 10
 6f2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 6f4:	21 f4       	brne	.+8      	; 0x6fe <usart_init_rs232+0x190>
 6f6:	60 e1       	ldi	r22, 0x10	; 16
 6f8:	85 e0       	ldi	r24, 0x05	; 5
 6fa:	a8 dd       	rcall	.-1200   	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 6fc:	27 c0       	rjmp	.+78     	; 0x74c <usart_init_rs232+0x1de>
 6fe:	c0 3a       	cpi	r28, 0xA0	; 160
 700:	fb e0       	ldi	r31, 0x0B	; 11
 702:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 704:	21 f4       	brne	.+8      	; 0x70e <usart_init_rs232+0x1a0>
 706:	60 e1       	ldi	r22, 0x10	; 16
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	a0 dd       	rcall	.-1216   	; 0x24c <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 70c:	1f c0       	rjmp	.+62     	; 0x74c <usart_init_rs232+0x1de>
 70e:	c0 3b       	cpi	r28, 0xB0	; 176
 710:	88 e0       	ldi	r24, 0x08	; 8
 712:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 714:	21 f4       	brne	.+8      	; 0x71e <usart_init_rs232+0x1b0>
 716:	60 e2       	ldi	r22, 0x20	; 32
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	98 dd       	rcall	.-1232   	; 0x24c <sysclk_enable_module>
 71c:	17 c0       	rjmp	.+46     	; 0x74c <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 71e:	c0 3b       	cpi	r28, 0xB0	; 176
 720:	e9 e0       	ldi	r30, 0x09	; 9
 722:	de 07       	cpc	r29, r30
 724:	21 f4       	brne	.+8      	; 0x72e <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 726:	60 e2       	ldi	r22, 0x20	; 32
 728:	84 e0       	ldi	r24, 0x04	; 4
 72a:	90 dd       	rcall	.-1248   	; 0x24c <sysclk_enable_module>
 72c:	0f c0       	rjmp	.+30     	; 0x74c <usart_init_rs232+0x1de>
 72e:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 730:	f4 e0       	ldi	r31, 0x04	; 4
 732:	df 07       	cpc	r29, r31
 734:	21 f4       	brne	.+8      	; 0x73e <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 736:	60 e4       	ldi	r22, 0x40	; 64
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	88 dd       	rcall	.-1264   	; 0x24c <sysclk_enable_module>
 73c:	07 c0       	rjmp	.+14     	; 0x74c <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 73e:	c0 3a       	cpi	r28, 0xA0	; 160
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 744:	19 f4       	brne	.+6      	; 0x74c <usart_init_rs232+0x1de>
 746:	60 e4       	ldi	r22, 0x40	; 64
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	80 dd       	rcall	.-1280   	; 0x24c <sysclk_enable_module>
 74c:	8d 81       	ldd	r24, Y+5	; 0x05
 74e:	8f 73       	andi	r24, 0x3F	; 63
 750:	8d 83       	std	Y+5, r24	; 0x05
 752:	f8 01       	movw	r30, r16
 754:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 756:	84 81       	ldd	r24, Z+4	; 0x04
 758:	89 2b       	or	r24, r25
 75a:	96 81       	ldd	r25, Z+6	; 0x06
 75c:	91 11       	cpse	r25, r1
 75e:	98 e0       	ldi	r25, 0x08	; 8
 760:	89 2b       	or	r24, r25
 762:	8d 83       	std	Y+5, r24	; 0x05
 764:	f8 01       	movw	r30, r16
 766:	40 81       	ld	r20, Z
 768:	51 81       	ldd	r21, Z+1	; 0x01
 76a:	62 81       	ldd	r22, Z+2	; 0x02
 76c:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 76e:	00 e8       	ldi	r16, 0x80	; 128
 770:	14 e8       	ldi	r17, 0x84	; 132
 772:	2e e1       	ldi	r18, 0x1E	; 30
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	ce 01       	movw	r24, r28
 778:	eb dd       	rcall	.-1066   	; 0x350 <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 77a:	9c 81       	ldd	r25, Y+4	; 0x04
 77c:	98 60       	ori	r25, 0x08	; 8
 77e:	9c 83       	std	Y+4, r25	; 0x04
 780:	9c 81       	ldd	r25, Y+4	; 0x04
 782:	90 61       	ori	r25, 0x10	; 16
 784:	9c 83       	std	Y+4, r25	; 0x04
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <main>:
#include <asf.h>

/*! \brief Main function.
*/
int main(void)
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	a7 97       	sbiw	r28, 0x27	; 39
 79a:	cd bf       	out	0x3d, r28	; 61
 79c:	de bf       	out	0x3e, r29	; 62
	uint8_t tx_buf[] = "\n\rEnter the numbers you want to add:\n ";
 79e:	87 e2       	ldi	r24, 0x27	; 39
 7a0:	e7 e0       	ldi	r30, 0x07	; 7
 7a2:	f0 e2       	ldi	r31, 0x20	; 32
 7a4:	8e 01       	movw	r16, r28
 7a6:	0f 5f       	subi	r16, 0xFF	; 255
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	d8 01       	movw	r26, r16
 7ac:	01 90       	ld	r0, Z+
 7ae:	0d 92       	st	X+, r0
 7b0:	8a 95       	dec	r24
	/* Initialize the board.
	* The board-specific conf_board.h file contains the configuration of
	* the board initialization.
	*/
	board_init();
	sysclk_init();
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x1c>
 7b4:	88 dd       	rcall	.-1264   	; 0x2c6 <board_init>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
 7b6:	3a dd       	rcall	.-1420   	; 0x22c <sysclk_init>
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	70 e2       	ldi	r23, 0x20	; 32
 7bc:	80 ea       	ldi	r24, 0xA0	; 160
 7be:	98 e0       	ldi	r25, 0x08	; 8
 7c0:	d6 de       	rcall	.-596    	; 0x56e <usart_init_rs232>
 7c2:	b0 2e       	mov	r11, r16
 7c4:	c1 2e       	mov	r12, r17
 7c6:	7e 01       	movw	r14, r28
 7c8:	85 e2       	ldi	r24, 0x25	; 37
 7ca:	e8 0e       	add	r14, r24

	// Send "message header"
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
 7cc:	f1 1c       	adc	r15, r1
 7ce:	f8 01       	movw	r30, r16
 7d0:	61 91       	ld	r22, Z+
 7d2:	8f 01       	movw	r16, r30
 7d4:	80 ea       	ldi	r24, 0xA0	; 160
 7d6:	98 e0       	ldi	r25, 0x08	; 8

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);

	// Send "message header"
	for (i = 0; i < tx_length; i++) {
 7d8:	ad dd       	rcall	.-1190   	; 0x334 <usart_putchar>
 7da:	e0 16       	cp	r14, r16
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
	}
	// Get and echo a character forever, specific '\r' processing.
	while (true) {
		received_byte = usart_getchar(USART_SERIAL_EXAMPLE);
 7dc:	f1 06       	cpc	r15, r17
 7de:	b9 f7       	brne	.-18     	; 0x7ce <main+0x3e>
 7e0:	80 ea       	ldi	r24, 0xA0	; 160
 7e2:	98 e0       	ldi	r25, 0x08	; 8
		if (received_byte == '\r') {
 7e4:	af dd       	rcall	.-1186   	; 0x344 <usart_getchar>
 7e6:	8d 30       	cpi	r24, 0x0D	; 13
 7e8:	61 f4       	brne	.+24     	; 0x802 <main+0x72>
			for (i = 0; i < tx_length; i++) {
				usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
 7ea:	0b 2d       	mov	r16, r11
 7ec:	1c 2d       	mov	r17, r12
 7ee:	f8 01       	movw	r30, r16
 7f0:	61 91       	ld	r22, Z+
 7f2:	8f 01       	movw	r16, r30
	}
	// Get and echo a character forever, specific '\r' processing.
	while (true) {
		received_byte = usart_getchar(USART_SERIAL_EXAMPLE);
		if (received_byte == '\r') {
			for (i = 0; i < tx_length; i++) {
 7f4:	80 ea       	ldi	r24, 0xA0	; 160
 7f6:	98 e0       	ldi	r25, 0x08	; 8
 7f8:	9d dd       	rcall	.-1222   	; 0x334 <usart_putchar>
				usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
			}
		} else
		num1=usart_getchar(USART_SERIAL_EXAMPLE);
 7fa:	e0 16       	cp	r14, r16
 7fc:	f1 06       	cpc	r15, r17
 7fe:	b9 f7       	brne	.-18     	; 0x7ee <main+0x5e>
		usart_putchar(USART_SERIAL_EXAMPLE,num1);
 800:	04 c0       	rjmp	.+8      	; 0x80a <main+0x7a>
 802:	80 ea       	ldi	r24, 0xA0	; 160
 804:	98 e0       	ldi	r25, 0x08	; 8
		usart_putchar(USART_SERIAL_EXAMPLE, '+' );
 806:	9e dd       	rcall	.-1220   	; 0x344 <usart_getchar>
 808:	d8 2e       	mov	r13, r24
 80a:	6d 2d       	mov	r22, r13
 80c:	80 ea       	ldi	r24, 0xA0	; 160
		num2=usart_getchar(USART_SERIAL_EXAMPLE);
 80e:	98 e0       	ldi	r25, 0x08	; 8
 810:	91 dd       	rcall	.-1246   	; 0x334 <usart_putchar>
 812:	6b e2       	ldi	r22, 0x2B	; 43
 814:	80 ea       	ldi	r24, 0xA0	; 160
		usart_putchar(USART_SERIAL_EXAMPLE,num2);
 816:	98 e0       	ldi	r25, 0x08	; 8
 818:	8d dd       	rcall	.-1254   	; 0x334 <usart_putchar>
 81a:	80 ea       	ldi	r24, 0xA0	; 160
 81c:	98 e0       	ldi	r25, 0x08	; 8
		usart_putchar(USART_SERIAL_EXAMPLE, '=');
 81e:	92 dd       	rcall	.-1244   	; 0x344 <usart_getchar>
 820:	18 2f       	mov	r17, r24
 822:	68 2f       	mov	r22, r24
 824:	80 ea       	ldi	r24, 0xA0	; 160
		num3=num1-48;
		num4=num2-48;
		out=num3+num4;
		out1=out+48;
		if(out>=48 ||out<=66){
			usart_putchar(USART_SERIAL_EXAMPLE, out1);
 826:	98 e0       	ldi	r25, 0x08	; 8
 828:	85 dd       	rcall	.-1270   	; 0x334 <usart_putchar>
 82a:	6d e3       	ldi	r22, 0x3D	; 61
 82c:	80 ea       	ldi	r24, 0xA0	; 160
 82e:	98 e0       	ldi	r25, 0x08	; 8
 830:	81 dd       	rcall	.-1278   	; 0x334 <usart_putchar>
 832:	6d 2d       	mov	r22, r13
		usart_putchar(USART_SERIAL_EXAMPLE, '\r'); }
 834:	61 0f       	add	r22, r17
 836:	60 53       	subi	r22, 0x30	; 48
 838:	80 ea       	ldi	r24, 0xA0	; 160
 83a:	98 e0       	ldi	r25, 0x08	; 8
 83c:	7b dd       	rcall	.-1290   	; 0x334 <usart_putchar>
 83e:	6d e0       	ldi	r22, 0x0D	; 13
 840:	80 ea       	ldi	r24, 0xA0	; 160
 842:	98 e0       	ldi	r25, 0x08	; 8
 844:	77 dd       	rcall	.-1298   	; 0x334 <usart_putchar>
 846:	cc cf       	rjmp	.-104    	; 0x7e0 <main+0x50>

00000848 <__udivmodsi4>:
 848:	a1 e2       	ldi	r26, 0x21	; 33
 84a:	1a 2e       	mov	r1, r26
 84c:	aa 1b       	sub	r26, r26
 84e:	bb 1b       	sub	r27, r27
 850:	fd 01       	movw	r30, r26
 852:	0d c0       	rjmp	.+26     	; 0x86e <__udivmodsi4_ep>

00000854 <__udivmodsi4_loop>:
 854:	aa 1f       	adc	r26, r26
 856:	bb 1f       	adc	r27, r27
 858:	ee 1f       	adc	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	a2 17       	cp	r26, r18
 85e:	b3 07       	cpc	r27, r19
 860:	e4 07       	cpc	r30, r20
 862:	f5 07       	cpc	r31, r21
 864:	20 f0       	brcs	.+8      	; 0x86e <__udivmodsi4_ep>
 866:	a2 1b       	sub	r26, r18
 868:	b3 0b       	sbc	r27, r19
 86a:	e4 0b       	sbc	r30, r20
 86c:	f5 0b       	sbc	r31, r21

0000086e <__udivmodsi4_ep>:
 86e:	66 1f       	adc	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	1a 94       	dec	r1
 878:	69 f7       	brne	.-38     	; 0x854 <__udivmodsi4_loop>
 87a:	60 95       	com	r22
 87c:	70 95       	com	r23
 87e:	80 95       	com	r24
 880:	90 95       	com	r25
 882:	9b 01       	movw	r18, r22
 884:	ac 01       	movw	r20, r24
 886:	bd 01       	movw	r22, r26
 888:	cf 01       	movw	r24, r30
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>

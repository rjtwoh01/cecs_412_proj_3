
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  00000e20  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a122  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004166  00000000  00000000  0000b21a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c58  00000000  00000000  0000f380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e8  00000000  00000000  00012fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002ee4b  00000000  00000000  000133c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024ab  00000000  00000000  0004220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  000446b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ab61  00000000  00000000  000448c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
   6:	00 00       	nop
   8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
   a:	00 00       	nop
   c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
   e:	00 00       	nop
  10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
  12:	00 00       	nop
  14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
  16:	00 00       	nop
  18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
  1e:	00 00       	nop
  20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
  22:	00 00       	nop
  24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
  26:	00 00       	nop
  28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
  2e:	00 00       	nop
  30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
  36:	00 00       	nop
  38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
  3e:	00 00       	nop
  40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
  42:	00 00       	nop
  44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
  46:	00 00       	nop
  48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
  4e:	00 00       	nop
  50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
  52:	00 00       	nop
  54:	ea c0       	rjmp	.+468    	; 0x22a <__bad_interrupt>
  56:	00 00       	nop
  58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
  5e:	00 00       	nop
  60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
  62:	00 00       	nop
  64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
  66:	00 00       	nop
  68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
  6e:	00 00       	nop
  70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
  72:	00 00       	nop
  74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
  76:	00 00       	nop
  78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
  7e:	00 00       	nop
  80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
  82:	00 00       	nop
  84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
  86:	00 00       	nop
  88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
  8e:	00 00       	nop
  90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
  92:	00 00       	nop
  94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
  96:	00 00       	nop
  98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
  be:	00 00       	nop
  c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
  da:	00 00       	nop
  dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
  de:	00 00       	nop
  e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a2 c0       	rjmp	.+324    	; 0x22a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a0 c0       	rjmp	.+320    	; 0x22a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9e c0       	rjmp	.+316    	; 0x22a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9c c0       	rjmp	.+312    	; 0x22a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9a c0       	rjmp	.+308    	; 0x22a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	98 c0       	rjmp	.+304    	; 0x22a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	96 c0       	rjmp	.+300    	; 0x22a <__bad_interrupt>
  fe:	00 00       	nop
 100:	94 c0       	rjmp	.+296    	; 0x22a <__bad_interrupt>
 102:	00 00       	nop
 104:	92 c0       	rjmp	.+292    	; 0x22a <__bad_interrupt>
 106:	00 00       	nop
 108:	90 c0       	rjmp	.+288    	; 0x22a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8e c0       	rjmp	.+284    	; 0x22a <__bad_interrupt>
 10e:	00 00       	nop
 110:	8c c0       	rjmp	.+280    	; 0x22a <__bad_interrupt>
 112:	00 00       	nop
 114:	8a c0       	rjmp	.+276    	; 0x22a <__bad_interrupt>
 116:	00 00       	nop
 118:	88 c0       	rjmp	.+272    	; 0x22a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	86 c0       	rjmp	.+268    	; 0x22a <__bad_interrupt>
 11e:	00 00       	nop
 120:	84 c0       	rjmp	.+264    	; 0x22a <__bad_interrupt>
 122:	00 00       	nop
 124:	82 c0       	rjmp	.+260    	; 0x22a <__bad_interrupt>
 126:	00 00       	nop
 128:	80 c0       	rjmp	.+256    	; 0x22a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7e c0       	rjmp	.+252    	; 0x22a <__bad_interrupt>
 12e:	00 00       	nop
 130:	7c c0       	rjmp	.+248    	; 0x22a <__bad_interrupt>
 132:	00 00       	nop
 134:	7a c0       	rjmp	.+244    	; 0x22a <__bad_interrupt>
 136:	00 00       	nop
 138:	78 c0       	rjmp	.+240    	; 0x22a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	76 c0       	rjmp	.+236    	; 0x22a <__bad_interrupt>
 13e:	00 00       	nop
 140:	74 c0       	rjmp	.+232    	; 0x22a <__bad_interrupt>
 142:	00 00       	nop
 144:	72 c0       	rjmp	.+228    	; 0x22a <__bad_interrupt>
 146:	00 00       	nop
 148:	70 c0       	rjmp	.+224    	; 0x22a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6e c0       	rjmp	.+220    	; 0x22a <__bad_interrupt>
 14e:	00 00       	nop
 150:	6c c0       	rjmp	.+216    	; 0x22a <__bad_interrupt>
 152:	00 00       	nop
 154:	6a c0       	rjmp	.+212    	; 0x22a <__bad_interrupt>
 156:	00 00       	nop
 158:	68 c0       	rjmp	.+208    	; 0x22a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	66 c0       	rjmp	.+204    	; 0x22a <__bad_interrupt>
 15e:	00 00       	nop
 160:	64 c0       	rjmp	.+200    	; 0x22a <__bad_interrupt>
 162:	00 00       	nop
 164:	62 c0       	rjmp	.+196    	; 0x22a <__bad_interrupt>
 166:	00 00       	nop
 168:	60 c0       	rjmp	.+192    	; 0x22a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5e c0       	rjmp	.+188    	; 0x22a <__bad_interrupt>
 16e:	00 00       	nop
 170:	5c c0       	rjmp	.+184    	; 0x22a <__bad_interrupt>
 172:	00 00       	nop
 174:	5a c0       	rjmp	.+180    	; 0x22a <__bad_interrupt>
 176:	00 00       	nop
 178:	58 c0       	rjmp	.+176    	; 0x22a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	56 c0       	rjmp	.+172    	; 0x22a <__bad_interrupt>
 17e:	00 00       	nop
 180:	54 c0       	rjmp	.+168    	; 0x22a <__bad_interrupt>
 182:	00 00       	nop
 184:	52 c0       	rjmp	.+164    	; 0x22a <__bad_interrupt>
 186:	00 00       	nop
 188:	50 c0       	rjmp	.+160    	; 0x22a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4e c0       	rjmp	.+156    	; 0x22a <__bad_interrupt>
 18e:	00 00       	nop
 190:	4c c0       	rjmp	.+152    	; 0x22a <__bad_interrupt>
 192:	00 00       	nop
 194:	4a c0       	rjmp	.+148    	; 0x22a <__bad_interrupt>
 196:	00 00       	nop
 198:	48 c0       	rjmp	.+144    	; 0x22a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	46 c0       	rjmp	.+140    	; 0x22a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	44 c0       	rjmp	.+136    	; 0x22a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	42 c0       	rjmp	.+132    	; 0x22a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	40 c0       	rjmp	.+128    	; 0x22a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3c c0       	rjmp	.+120    	; 0x22a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3a c0       	rjmp	.+116    	; 0x22a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	38 c0       	rjmp	.+112    	; 0x22a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	36 c0       	rjmp	.+108    	; 0x22a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	34 c0       	rjmp	.+104    	; 0x22a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	32 c0       	rjmp	.+100    	; 0x22a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	30 c0       	rjmp	.+96     	; 0x22a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2e c0       	rjmp	.+92     	; 0x22a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2c c0       	rjmp	.+88     	; 0x22a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2a c0       	rjmp	.+84     	; 0x22a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	28 c0       	rjmp	.+80     	; 0x22a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	26 c0       	rjmp	.+76     	; 0x22a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	22 c0       	rjmp	.+68     	; 0x22a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1c c0       	rjmp	.+56     	; 0x22a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	18 c0       	rjmp	.+48     	; 0x22a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e0 e2       	ldi	r30, 0x20	; 32
 214:	fe e0       	ldi	r31, 0x0E	; 14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 36       	cpi	r26, 0x60	; 96
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	54 d5       	rcall	.+2728   	; 0xcd0 <main>
 228:	f9 c5       	rjmp	.+3058   	; 0xe1c <_exit>

0000022a <__bad_interrupt>:
 22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 22c:	04 c0       	rjmp	.+8      	; 0x236 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 22e:	61 50       	subi	r22, 0x01	; 1
 230:	71 09       	sbc	r23, r1
 232:	81 09       	sbc	r24, r1
 234:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	81 05       	cpc	r24, r1
 23c:	91 05       	cpc	r25, r1
 23e:	b9 f7       	brne	.-18     	; 0x22e <__portable_avr_delay_cycles+0x2>
 240:	08 95       	ret

00000242 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
 242:	bf 92       	push	r11
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	1f 92       	push	r1
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 25a:	00 e0       	ldi	r16, 0x00	; 0
 25c:	16 e0       	ldi	r17, 0x06	; 6
 25e:	68 94       	set
 260:	ff 24       	eor	r15, r15
 262:	f3 f8       	bld	r15, 3
 264:	f8 01       	movw	r30, r16
 266:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
 268:	6e e0       	ldi	r22, 0x0E	; 14
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	dd df       	rcall	.-70     	; 0x22c <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 272:	f8 01       	movw	r30, r16
 274:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
 276:	6e e0       	ldi	r22, 0x0E	; 14
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	d6 df       	rcall	.-84     	; 0x22c <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
 280:	0f 2e       	mov	r0, r31
 282:	fb e2       	ldi	r31, 0x2B	; 43
 284:	bf 2e       	mov	r11, r31
 286:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
 288:	b9 82       	std	Y+1, r11	; 0x01
 28a:	80 ea       	ldi	r24, 0xA0	; 160
 28c:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
 28e:	13 d2       	rcall	.+1062   	; 0x6b6 <usart_spi_init>
 290:	c1 2c       	mov	r12, r1
 292:	d1 2c       	mov	r13, r1
 294:	76 01       	movw	r14, r12
 296:	00 e4       	ldi	r16, 0x40	; 64
 298:	12 e4       	ldi	r17, 0x42	; 66
 29a:	2f e0       	ldi	r18, 0x0F	; 15
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	43 e0       	ldi	r20, 0x03	; 3
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	80 ea       	ldi	r24, 0xA0	; 160
 2a8:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 2aa:	34 d2       	rcall	.+1128   	; 0x714 <usart_spi_setup_device>
 2ac:	00 e6       	ldi	r16, 0x60	; 96
 2ae:	16 e0       	ldi	r17, 0x06	; 6
 2b0:	ff 24       	eor	r15, r15
 2b2:	f3 94       	inc	r15
 2b4:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 2b6:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 2b8:	b9 82       	std	Y+1, r11	; 0x01
 2ba:	be 01       	movw	r22, r28
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	99 e0       	ldi	r25, 0x09	; 9
 2c4:	41 d2       	rcall	.+1154   	; 0x748 <usart_spi_select_device>
 2c6:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 2c8:	f6 82       	std	Z+6, r15	; 0x06
 2ca:	e0 ea       	ldi	r30, 0xA0	; 160
 2cc:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 2ce:	81 81       	ldd	r24, Z+1	; 0x01
 2d0:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 2d2:	fd cf       	rjmp	.-6      	; 0x2ce <st7565r_init+0x8c>
 2d4:	80 ea       	ldi	r24, 0xA0	; 160
 2d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 2da:	e0 ea       	ldi	r30, 0xA0	; 160
 2dc:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 2de:	81 81       	ldd	r24, Z+1	; 0x01
 2e0:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <st7565r_init+0x9c>
 2e4:	e0 ea       	ldi	r30, 0xA0	; 160
 2e6:	f9 e0       	ldi	r31, 0x09	; 9
 2e8:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 2ea:	81 83       	std	Z+1, r24	; 0x01
 2ec:	80 81       	ld	r24, Z
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 2f6:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 2f8:	3d d2       	rcall	.+1146   	; 0x774 <usart_spi_deselect_device>
 2fa:	8b e2       	ldi	r24, 0x2B	; 43
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	be 01       	movw	r22, r28
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	80 ea       	ldi	r24, 0xA0	; 160
 306:	99 e0       	ldi	r25, 0x09	; 9
 308:	1f d2       	rcall	.+1086   	; 0x748 <usart_spi_select_device>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 30c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 310:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 312:	f9 e0       	ldi	r31, 0x09	; 9
 314:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 316:	85 ff       	sbrs	r24, 5
 318:	fd cf       	rjmp	.-6      	; 0x314 <st7565r_init+0xd2>
 31a:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 31c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 320:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 322:	f9 e0       	ldi	r31, 0x09	; 9
 324:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 326:	86 ff       	sbrs	r24, 6
 328:	fd cf       	rjmp	.-6      	; 0x324 <st7565r_init+0xe2>
 32a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 32c:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 32e:	80 e4       	ldi	r24, 0x40	; 64
 330:	81 83       	std	Z+1, r24	; 0x01
 332:	80 81       	ld	r24, Z
 334:	be 01       	movw	r22, r28
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 33a:	80 ea       	ldi	r24, 0xA0	; 160
 33c:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 33e:	1a d2       	rcall	.+1076   	; 0x774 <usart_spi_deselect_device>
 340:	8b e2       	ldi	r24, 0x2B	; 43
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	be 01       	movw	r22, r28
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	99 e0       	ldi	r25, 0x09	; 9
 34e:	fc d1       	rcall	.+1016   	; 0x748 <usart_spi_select_device>
 350:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 352:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 356:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 358:	f9 e0       	ldi	r31, 0x09	; 9
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 35c:	85 ff       	sbrs	r24, 5
 35e:	fd cf       	rjmp	.-6      	; 0x35a <st7565r_init+0x118>
 360:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 362:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 366:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 368:	f9 e0       	ldi	r31, 0x09	; 9
 36a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 36c:	86 ff       	sbrs	r24, 6
 36e:	fd cf       	rjmp	.-6      	; 0x36a <st7565r_init+0x128>
 370:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 372:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	81 83       	std	Z+1, r24	; 0x01
 378:	80 81       	ld	r24, Z
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 380:	80 ea       	ldi	r24, 0xA0	; 160
 382:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 384:	f7 d1       	rcall	.+1006   	; 0x774 <usart_spi_deselect_device>
 386:	8b e2       	ldi	r24, 0x2B	; 43
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	80 ea       	ldi	r24, 0xA0	; 160
 392:	99 e0       	ldi	r25, 0x09	; 9
 394:	d9 d1       	rcall	.+946    	; 0x748 <usart_spi_select_device>
 396:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 398:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 39c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 39e:	f9 e0       	ldi	r31, 0x09	; 9
 3a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 3a2:	85 ff       	sbrs	r24, 5
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <st7565r_init+0x15e>
 3a6:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 3a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 3ac:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 3ae:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 3b0:	81 81       	ldd	r24, Z+1	; 0x01
 3b2:	86 ff       	sbrs	r24, 6
 3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <st7565r_init+0x16e>
 3b6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 3b8:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 3ba:	80 e4       	ldi	r24, 0x40	; 64
 3bc:	81 83       	std	Z+1, r24	; 0x01
 3be:	80 81       	ld	r24, Z
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 3c6:	80 ea       	ldi	r24, 0xA0	; 160
 3c8:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 3ca:	d4 d1       	rcall	.+936    	; 0x774 <usart_spi_deselect_device>
 3cc:	8b e2       	ldi	r24, 0x2B	; 43
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	be 01       	movw	r22, r28
 3d2:	6f 5f       	subi	r22, 0xFF	; 255
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	80 ea       	ldi	r24, 0xA0	; 160
 3d8:	99 e0       	ldi	r25, 0x09	; 9
 3da:	b6 d1       	rcall	.+876    	; 0x748 <usart_spi_select_device>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 3de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 3e2:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 3e4:	f9 e0       	ldi	r31, 0x09	; 9
 3e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 3e8:	85 ff       	sbrs	r24, 5
 3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <st7565r_init+0x1a4>
 3ec:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 3ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 3f2:	e0 ea       	ldi	r30, 0xA0	; 160
 3f4:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 3f6:	81 81       	ldd	r24, Z+1	; 0x01
 3f8:	86 ff       	sbrs	r24, 6
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <st7565r_init+0x1b4>
 3fc:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 3fe:	f9 e0       	ldi	r31, 0x09	; 9
 400:	80 e4       	ldi	r24, 0x40	; 64
 402:	81 83       	std	Z+1, r24	; 0x01
 404:	80 81       	ld	r24, Z
 406:	be 01       	movw	r22, r28
 408:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 40e:	99 e0       	ldi	r25, 0x09	; 9
 410:	b1 d1       	rcall	.+866    	; 0x774 <usart_spi_deselect_device>
 412:	8b e2       	ldi	r24, 0x2B	; 43
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	be 01       	movw	r22, r28
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	80 ea       	ldi	r24, 0xA0	; 160
 41e:	99 e0       	ldi	r25, 0x09	; 9
 420:	93 d1       	rcall	.+806    	; 0x748 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 428:	e0 ea       	ldi	r30, 0xA0	; 160
 42a:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 42c:	81 81       	ldd	r24, Z+1	; 0x01
 42e:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 430:	fd cf       	rjmp	.-6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 432:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 434:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 438:	e0 ea       	ldi	r30, 0xA0	; 160
 43a:	f9 e0       	ldi	r31, 0x09	; 9
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 43e:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 440:	fd cf       	rjmp	.-6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 442:	e0 ea       	ldi	r30, 0xA0	; 160
 444:	f9 e0       	ldi	r31, 0x09	; 9
 446:	80 e4       	ldi	r24, 0x40	; 64
 448:	81 83       	std	Z+1, r24	; 0x01
 44a:	80 81       	ld	r24, Z
 44c:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 452:	80 ea       	ldi	r24, 0xA0	; 160
 454:	99 e0       	ldi	r25, 0x09	; 9
 456:	8e d1       	rcall	.+796    	; 0x774 <usart_spi_deselect_device>
 458:	8b e2       	ldi	r24, 0x2B	; 43
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	be 01       	movw	r22, r28
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	80 ea       	ldi	r24, 0xA0	; 160
 464:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 466:	70 d1       	rcall	.+736    	; 0x748 <usart_spi_select_device>
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 46e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 470:	f9 e0       	ldi	r31, 0x09	; 9
 472:	81 81       	ldd	r24, Z+1	; 0x01
 474:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 476:	fd cf       	rjmp	.-6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 478:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 47c:	e0 ea       	ldi	r30, 0xA0	; 160
 47e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 480:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 482:	86 ff       	sbrs	r24, 6
 484:	fd cf       	rjmp	.-6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 486:	e0 ea       	ldi	r30, 0xA0	; 160
 488:	f9 e0       	ldi	r31, 0x09	; 9
 48a:	80 e4       	ldi	r24, 0x40	; 64
 48c:	81 83       	std	Z+1, r24	; 0x01
 48e:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 490:	be 01       	movw	r22, r28
 492:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	99 e0       	ldi	r25, 0x09	; 9
 49a:	6c d1       	rcall	.+728    	; 0x774 <usart_spi_deselect_device>
 49c:	8b e2       	ldi	r24, 0x2B	; 43
 49e:	89 83       	std	Y+1, r24	; 0x01
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 4a8:	99 e0       	ldi	r25, 0x09	; 9
 4aa:	4e d1       	rcall	.+668    	; 0x748 <usart_spi_select_device>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 4ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 4b2:	e0 ea       	ldi	r30, 0xA0	; 160
 4b4:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 4b6:	81 81       	ldd	r24, Z+1	; 0x01
 4b8:	85 ff       	sbrs	r24, 5
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 4bc:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 4be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 4c2:	e0 ea       	ldi	r30, 0xA0	; 160
 4c4:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 4c6:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 4c8:	86 ff       	sbrs	r24, 6
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4cc:	e0 ea       	ldi	r30, 0xA0	; 160
 4ce:	f9 e0       	ldi	r31, 0x09	; 9
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	81 83       	std	Z+1, r24	; 0x01
 4d4:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 4d6:	be 01       	movw	r22, r28
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	80 ea       	ldi	r24, 0xA0	; 160
 4de:	99 e0       	ldi	r25, 0x09	; 9
 4e0:	49 d1       	rcall	.+658    	; 0x774 <usart_spi_deselect_device>
 4e2:	8b e2       	ldi	r24, 0x2B	; 43
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 4ee:	99 e0       	ldi	r25, 0x09	; 9
 4f0:	2b d1       	rcall	.+598    	; 0x748 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 4f8:	e0 ea       	ldi	r30, 0xA0	; 160
 4fa:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 4fc:	81 81       	ldd	r24, Z+1	; 0x01
 4fe:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 500:	fd cf       	rjmp	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 502:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 504:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 508:	e0 ea       	ldi	r30, 0xA0	; 160
 50a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 50c:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 50e:	86 ff       	sbrs	r24, 6
 510:	fd cf       	rjmp	.-6      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 512:	e0 ea       	ldi	r30, 0xA0	; 160
 514:	f9 e0       	ldi	r31, 0x09	; 9
 516:	80 e4       	ldi	r24, 0x40	; 64
 518:	81 83       	std	Z+1, r24	; 0x01
 51a:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 51c:	be 01       	movw	r22, r28
 51e:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	80 ea       	ldi	r24, 0xA0	; 160
 524:	99 e0       	ldi	r25, 0x09	; 9
 526:	26 d1       	rcall	.+588    	; 0x774 <usart_spi_deselect_device>
 528:	8b e2       	ldi	r24, 0x2B	; 43
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	be 01       	movw	r22, r28
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 532:	80 ea       	ldi	r24, 0xA0	; 160
 534:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 536:	08 d1       	rcall	.+528    	; 0x748 <usart_spi_select_device>
 538:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 53a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 53e:	e0 ea       	ldi	r30, 0xA0	; 160
 540:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 542:	81 81       	ldd	r24, Z+1	; 0x01
 544:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 546:	fd cf       	rjmp	.-6      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 548:	81 e2       	ldi	r24, 0x21	; 33
 54a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 54e:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 550:	f9 e0       	ldi	r31, 0x09	; 9
 552:	81 81       	ldd	r24, Z+1	; 0x01
 554:	86 ff       	sbrs	r24, 6
 556:	fd cf       	rjmp	.-6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 558:	e0 ea       	ldi	r30, 0xA0	; 160
 55a:	f9 e0       	ldi	r31, 0x09	; 9
 55c:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 55e:	81 83       	std	Z+1, r24	; 0x01
 560:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	80 ea       	ldi	r24, 0xA0	; 160
 56a:	99 e0       	ldi	r25, 0x09	; 9
 56c:	03 d1       	rcall	.+518    	; 0x774 <usart_spi_deselect_device>
 56e:	8b e2       	ldi	r24, 0x2B	; 43
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 57a:	99 e0       	ldi	r25, 0x09	; 9
 57c:	e5 d0       	rcall	.+458    	; 0x748 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 584:	e0 ea       	ldi	r30, 0xA0	; 160
 586:	f9 e0       	ldi	r31, 0x09	; 9
 588:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 58a:	85 ff       	sbrs	r24, 5
 58c:	fd cf       	rjmp	.-6      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 58e:	8f ea       	ldi	r24, 0xAF	; 175
 590:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 594:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 596:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 598:	81 81       	ldd	r24, Z+1	; 0x01
 59a:	86 ff       	sbrs	r24, 6
 59c:	fd cf       	rjmp	.-6      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 59e:	e0 ea       	ldi	r30, 0xA0	; 160
 5a0:	f9 e0       	ldi	r31, 0x09	; 9
 5a2:	80 e4       	ldi	r24, 0x40	; 64
 5a4:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
 5a6:	80 81       	ld	r24, Z
 5a8:	be 01       	movw	r22, r28
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	80 ea       	ldi	r24, 0xA0	; 160
 5b0:	99 e0       	ldi	r25, 0x09	; 9
 5b2:	e0 d0       	rcall	.+448    	; 0x774 <usart_spi_deselect_device>
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	bf 90       	pop	r11
 5c8:	08 95       	ret

000005ca <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	1f 92       	push	r1
 5d0:	1f 92       	push	r1
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 5dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 5e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 5e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 5e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 5ec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 5f0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
 5f4:	6c e0       	ldi	r22, 0x0C	; 12
 5f6:	81 e4       	ldi	r24, 0x41	; 65
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	21 d1       	rcall	.+578    	; 0x83e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 5fc:	8f b7       	in	r24, 0x3f	; 63
 5fe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 600:	f8 94       	cli
	return flags;
 602:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 604:	e0 e5       	ldi	r30, 0x50	; 80
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 60e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 610:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 612:	81 ff       	sbrs	r24, 1
 614:	fd cf       	rjmp	.-6      	; 0x610 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	80 e4       	ldi	r24, 0x40	; 64
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	10 d1       	rcall	.+544    	; 0x83e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 61e:	8f b7       	in	r24, 0x3f	; 63
 620:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 622:	f8 94       	cli
	return flags;
 624:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 626:	e0 e5       	ldi	r30, 0x50	; 80
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	8e 7f       	andi	r24, 0xFE	; 254
 62e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 630:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	1f 92       	push	r1
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 646:	9f b7       	in	r25, 0x3f	; 63
 648:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 64a:	f8 94       	cli
	return flags;
 64c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 64e:	e8 2f       	mov	r30, r24
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	e0 59       	subi	r30, 0x90	; 144
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	60 95       	com	r22
 658:	80 81       	ld	r24, Z
 65a:	68 23       	and	r22, r24
 65c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 65e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 660:	0f 90       	pop	r0
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 672:	c6 2f       	mov	r28, r22
 674:	d0 e0       	ldi	r29, 0x00	; 0
 676:	de 01       	movw	r26, r28
 678:	02 2e       	mov	r0, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <ioport_configure_port_pin+0x18>
 67c:	b5 95       	asr	r27
 67e:	a7 95       	ror	r26
 680:	0a 94       	dec	r0
 682:	e2 f7       	brpl	.-8      	; 0x67c <ioport_configure_port_pin+0x14>
 684:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 686:	50 8b       	std	Z+16, r21	; 0x10
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 68e:	28 30       	cpi	r18, 0x08	; 8
 690:	31 05       	cpc	r19, r1
 692:	89 f7       	brne	.-30     	; 0x676 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 694:	40 ff       	sbrs	r20, 0
 696:	0a c0       	rjmp	.+20     	; 0x6ac <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 698:	41 ff       	sbrs	r20, 1
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 69c:	fc 01       	movw	r30, r24
 69e:	65 83       	std	Z+5, r22	; 0x05
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 6a2:	fc 01       	movw	r30, r24
 6a4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 6a6:	fc 01       	movw	r30, r24
 6a8:	61 83       	std	Z+1, r22	; 0x01
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 6ac:	fc 01       	movw	r30, r24
 6ae:	62 83       	std	Z+2, r22	; 0x02
	}
}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
 6b6:	80 3a       	cpi	r24, 0xA0	; 160
 6b8:	28 e0       	ldi	r18, 0x08	; 8
 6ba:	92 07       	cpc	r25, r18
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <usart_spi_init+0x10>
 6be:	60 e1       	ldi	r22, 0x10	; 16
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	bc cf       	rjmp	.-136    	; 0x63c <sysclk_enable_module>
 6c4:	08 95       	ret
 6c6:	80 3b       	cpi	r24, 0xB0	; 176
 6c8:	28 e0       	ldi	r18, 0x08	; 8
 6ca:	92 07       	cpc	r25, r18
 6cc:	21 f4       	brne	.+8      	; 0x6d6 <usart_spi_init+0x20>
 6ce:	60 e2       	ldi	r22, 0x20	; 32
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	b4 cf       	rjmp	.-152    	; 0x63c <sysclk_enable_module>
 6d4:	08 95       	ret
 6d6:	80 3a       	cpi	r24, 0xA0	; 160
 6d8:	29 e0       	ldi	r18, 0x09	; 9
 6da:	92 07       	cpc	r25, r18
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <usart_spi_init+0x30>
 6de:	60 e1       	ldi	r22, 0x10	; 16
 6e0:	84 e0       	ldi	r24, 0x04	; 4
 6e2:	ac cf       	rjmp	.-168    	; 0x63c <sysclk_enable_module>
 6e4:	08 95       	ret
 6e6:	80 3b       	cpi	r24, 0xB0	; 176
 6e8:	29 e0       	ldi	r18, 0x09	; 9
 6ea:	92 07       	cpc	r25, r18
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <usart_spi_init+0x40>
 6ee:	60 e2       	ldi	r22, 0x20	; 32
 6f0:	84 e0       	ldi	r24, 0x04	; 4
 6f2:	a4 cf       	rjmp	.-184    	; 0x63c <sysclk_enable_module>
 6f4:	08 95       	ret
 6f6:	80 3a       	cpi	r24, 0xA0	; 160
 6f8:	2a e0       	ldi	r18, 0x0A	; 10
 6fa:	92 07       	cpc	r25, r18
 6fc:	21 f4       	brne	.+8      	; 0x706 <usart_spi_init+0x50>
 6fe:	60 e1       	ldi	r22, 0x10	; 16
 700:	85 e0       	ldi	r24, 0x05	; 5
 702:	9c cf       	rjmp	.-200    	; 0x63c <sysclk_enable_module>
 704:	08 95       	ret
 706:	80 3a       	cpi	r24, 0xA0	; 160
 708:	9b 40       	sbci	r25, 0x0B	; 11
 70a:	19 f4       	brne	.+6      	; 0x712 <usart_spi_init+0x5c>
 70c:	60 e1       	ldi	r22, 0x10	; 16
 70e:	86 e0       	ldi	r24, 0x06	; 6
 710:	95 cf       	rjmp	.-214    	; 0x63c <sysclk_enable_module>
 712:	08 95       	ret

00000714 <usart_spi_setup_device>:
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	00 d0       	rcall	.+0      	; 0x71e <usart_spi_setup_device+0xa>
 71e:	00 d0       	rcall	.+0      	; 0x720 <usart_spi_setup_device+0xc>
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	09 83       	std	Y+1, r16	; 0x01
 726:	1a 83       	std	Y+2, r17	; 0x02
 728:	2b 83       	std	Y+3, r18	; 0x03
 72a:	3c 83       	std	Y+4, r19	; 0x04
 72c:	4d 83       	std	Y+5, r20	; 0x05
 72e:	1e 82       	std	Y+6, r1	; 0x06
 730:	be 01       	movw	r22, r28
 732:	6f 5f       	subi	r22, 0xFF	; 255
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	ba d0       	rcall	.+372    	; 0x8ac <usart_init_spi>
 738:	26 96       	adiw	r28, 0x06	; 6
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	08 95       	ret

00000748 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
 748:	fb 01       	movw	r30, r22
 74a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 74c:	e8 2f       	mov	r30, r24
 74e:	e6 95       	lsr	r30
 750:	e6 95       	lsr	r30
 752:	e6 95       	lsr	r30
 754:	40 e2       	ldi	r20, 0x20	; 32
 756:	e4 9f       	mul	r30, r20
 758:	f0 01       	movw	r30, r0
 75a:	11 24       	eor	r1, r1
 75c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 75e:	87 70       	andi	r24, 0x07	; 7
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	a9 01       	movw	r20, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <usart_spi_select_device+0x24>
 768:	44 0f       	add	r20, r20
 76a:	55 1f       	adc	r21, r21
 76c:	8a 95       	dec	r24
 76e:	e2 f7       	brpl	.-8      	; 0x768 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 770:	46 83       	std	Z+6, r20	; 0x06
 772:	08 95       	ret

00000774 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
 774:	fb 01       	movw	r30, r22
 776:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 778:	e8 2f       	mov	r30, r24
 77a:	e6 95       	lsr	r30
 77c:	e6 95       	lsr	r30
 77e:	e6 95       	lsr	r30
 780:	40 e2       	ldi	r20, 0x20	; 32
 782:	e4 9f       	mul	r30, r20
 784:	f0 01       	movw	r30, r0
 786:	11 24       	eor	r1, r1
 788:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 78a:	87 70       	andi	r24, 0x07	; 7
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a9 01       	movw	r20, r18
 792:	02 c0       	rjmp	.+4      	; 0x798 <usart_spi_deselect_device+0x24>
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	8a 95       	dec	r24
 79a:	e2 f7       	brpl	.-8      	; 0x794 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 79c:	45 83       	std	Z+5, r20	; 0x05
 79e:	08 95       	ret

000007a0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 7a0:	43 e0       	ldi	r20, 0x03	; 3
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	80 ee       	ldi	r24, 0xE0	; 224
 7a8:	97 e0       	ldi	r25, 0x07	; 7
 7aa:	5e df       	rcall	.-324    	; 0x668 <ioport_configure_port_pin>
 7ac:	43 e0       	ldi	r20, 0x03	; 3
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	80 ee       	ldi	r24, 0xE0	; 224
 7b4:	97 e0       	ldi	r25, 0x07	; 7
 7b6:	58 df       	rcall	.-336    	; 0x668 <ioport_configure_port_pin>
 7b8:	43 e0       	ldi	r20, 0x03	; 3
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	60 e1       	ldi	r22, 0x10	; 16
 7be:	80 e6       	ldi	r24, 0x60	; 96
 7c0:	96 e0       	ldi	r25, 0x06	; 6
 7c2:	52 df       	rcall	.-348    	; 0x668 <ioport_configure_port_pin>
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	50 e4       	ldi	r21, 0x40	; 64
 7c8:	60 e2       	ldi	r22, 0x20	; 32
 7ca:	80 e6       	ldi	r24, 0x60	; 96
 7cc:	96 e0       	ldi	r25, 0x06	; 6
 7ce:	4c df       	rcall	.-360    	; 0x668 <ioport_configure_port_pin>
 7d0:	40 e0       	ldi	r20, 0x00	; 0
 7d2:	5b e1       	ldi	r21, 0x1B	; 27
 7d4:	60 e2       	ldi	r22, 0x20	; 32
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	96 e0       	ldi	r25, 0x06	; 6
 7da:	46 df       	rcall	.-372    	; 0x668 <ioport_configure_port_pin>
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	5b e1       	ldi	r21, 0x1B	; 27
 7e0:	62 e0       	ldi	r22, 0x02	; 2
 7e2:	80 ea       	ldi	r24, 0xA0	; 160
 7e4:	96 e0       	ldi	r25, 0x06	; 6
 7e6:	40 df       	rcall	.-384    	; 0x668 <ioport_configure_port_pin>
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	5b e1       	ldi	r21, 0x1B	; 27
 7ec:	64 e0       	ldi	r22, 0x04	; 4
 7ee:	80 ea       	ldi	r24, 0xA0	; 160
 7f0:	96 e0       	ldi	r25, 0x06	; 6
 7f2:	3a df       	rcall	.-396    	; 0x668 <ioport_configure_port_pin>
 7f4:	43 e0       	ldi	r20, 0x03	; 3
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	62 e0       	ldi	r22, 0x02	; 2
 7fa:	80 e6       	ldi	r24, 0x60	; 96
 7fc:	96 e0       	ldi	r25, 0x06	; 6
 7fe:	34 df       	rcall	.-408    	; 0x668 <ioport_configure_port_pin>
 800:	43 e0       	ldi	r20, 0x03	; 3
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	68 e0       	ldi	r22, 0x08	; 8
 806:	80 e6       	ldi	r24, 0x60	; 96
 808:	96 e0       	ldi	r25, 0x06	; 6
 80a:	2e df       	rcall	.-420    	; 0x668 <ioport_configure_port_pin>
 80c:	43 e0       	ldi	r20, 0x03	; 3
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	68 e0       	ldi	r22, 0x08	; 8
 812:	80 ea       	ldi	r24, 0xA0	; 160
 814:	96 e0       	ldi	r25, 0x06	; 6
 816:	28 df       	rcall	.-432    	; 0x668 <ioport_configure_port_pin>
 818:	43 e0       	ldi	r20, 0x03	; 3
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	80 e6       	ldi	r24, 0x60	; 96
 820:	96 e0       	ldi	r25, 0x06	; 6
 822:	22 df       	rcall	.-444    	; 0x668 <ioport_configure_port_pin>
 824:	43 e0       	ldi	r20, 0x03	; 3
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	68 e0       	ldi	r22, 0x08	; 8
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	96 e0       	ldi	r25, 0x06	; 6
 82e:	1c df       	rcall	.-456    	; 0x668 <ioport_configure_port_pin>
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	60 e1       	ldi	r22, 0x10	; 16
 836:	80 e8       	ldi	r24, 0x80	; 128
 838:	96 e0       	ldi	r25, 0x06	; 6
 83a:	16 cf       	rjmp	.-468    	; 0x668 <ioport_configure_port_pin>
 83c:	08 95       	ret

0000083e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 83e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 840:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 842:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 844:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 846:	60 83       	st	Z, r22
	ret                             // Return to caller
 848:	08 95       	ret

0000084a <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 84a:	cf 92       	push	r12
 84c:	df 92       	push	r13
 84e:	ef 92       	push	r14
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
 85c:	d9 01       	movw	r26, r18
 85e:	c8 01       	movw	r24, r16
 860:	b6 95       	lsr	r27
 862:	a7 95       	ror	r26
 864:	97 95       	ror	r25
 866:	87 95       	ror	r24
 868:	48 17       	cp	r20, r24
 86a:	59 07       	cpc	r21, r25
 86c:	6a 07       	cpc	r22, r26
 86e:	7b 07       	cpc	r23, r27
 870:	70 f4       	brcc	.+28     	; 0x88e <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
 872:	6a 01       	movw	r12, r20
 874:	7b 01       	movw	r14, r22
 876:	cc 0c       	add	r12, r12
 878:	dd 1c       	adc	r13, r13
 87a:	ee 1c       	adc	r14, r14
 87c:	ff 1c       	adc	r15, r15
 87e:	c9 01       	movw	r24, r18
 880:	b8 01       	movw	r22, r16
 882:	a7 01       	movw	r20, r14
 884:	96 01       	movw	r18, r12
 886:	a8 d2       	rcall	.+1360   	; 0xdd8 <__udivmodsi4>
 888:	21 50       	subi	r18, 0x01	; 1
 88a:	31 09       	sbc	r19, r1
 88c:	02 c0       	rjmp	.+4      	; 0x892 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
 892:	83 2f       	mov	r24, r19
 894:	8f 70       	andi	r24, 0x0F	; 15
 896:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
 898:	2e 83       	std	Y+6, r18	; 0x06
}
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	ff 90       	pop	r15
 8a4:	ef 90       	pop	r14
 8a6:	df 90       	pop	r13
 8a8:	cf 90       	pop	r12
 8aa:	08 95       	ret

000008ac <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
 8ac:	df 92       	push	r13
 8ae:	ef 92       	push	r14
 8b0:	ff 92       	push	r15
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	1f 92       	push	r1
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	7c 01       	movw	r14, r24
 8c2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	09 f4       	brne	.+2      	; 0x8ca <usart_init_spi+0x1e>
 8c8:	b2 c1       	rjmp	.+868    	; 0xc2e <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 8ca:	80 3c       	cpi	r24, 0xC0	; 192
 8cc:	91 05       	cpc	r25, r1
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 8d0:	60 e1       	ldi	r22, 0x10	; 16
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	b3 de       	rcall	.-666    	; 0x63c <sysclk_enable_module>
 8d6:	ab c1       	rjmp	.+854    	; 0xc2e <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 8d8:	80 e8       	ldi	r24, 0x80	; 128
 8da:	e8 16       	cp	r14, r24
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	f8 06       	cpc	r15, r24
 8e0:	21 f4       	brne	.+8      	; 0x8ea <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 8e2:	62 e0       	ldi	r22, 0x02	; 2
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	aa de       	rcall	.-684    	; 0x63c <sysclk_enable_module>
 8e8:	a2 c1       	rjmp	.+836    	; 0xc2e <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 8ea:	e1 14       	cp	r14, r1
 8ec:	e1 e0       	ldi	r30, 0x01	; 1
 8ee:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 8f0:	21 f4       	brne	.+8      	; 0x8fa <usart_init_spi+0x4e>
 8f2:	61 e0       	ldi	r22, 0x01	; 1
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	a2 de       	rcall	.-700    	; 0x63c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 8f8:	9a c1       	rjmp	.+820    	; 0xc2e <usart_init_spi+0x382>
 8fa:	f0 e8       	ldi	r31, 0x80	; 128
 8fc:	ef 16       	cp	r14, r31
 8fe:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 900:	ff 06       	cpc	r15, r31
 902:	21 f4       	brne	.+8      	; 0x90c <usart_init_spi+0x60>
 904:	61 e0       	ldi	r22, 0x01	; 1
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	99 de       	rcall	.-718    	; 0x63c <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 90a:	91 c1       	rjmp	.+802    	; 0xc2e <usart_init_spi+0x382>
 90c:	30 e9       	ldi	r19, 0x90	; 144
 90e:	e3 16       	cp	r14, r19
 910:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 912:	f3 06       	cpc	r15, r19
 914:	21 f4       	brne	.+8      	; 0x91e <usart_init_spi+0x72>
 916:	61 e0       	ldi	r22, 0x01	; 1
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	90 de       	rcall	.-736    	; 0x63c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 91c:	88 c1       	rjmp	.+784    	; 0xc2e <usart_init_spi+0x382>
 91e:	e1 14       	cp	r14, r1
 920:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 922:	f8 06       	cpc	r15, r24
 924:	21 f4       	brne	.+8      	; 0x92e <usart_init_spi+0x82>
 926:	62 e0       	ldi	r22, 0x02	; 2
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	88 de       	rcall	.-752    	; 0x63c <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 92c:	80 c1       	rjmp	.+768    	; 0xc2e <usart_init_spi+0x382>
 92e:	e0 e4       	ldi	r30, 0x40	; 64
 930:	ee 16       	cp	r14, r30
 932:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 934:	fe 06       	cpc	r15, r30
 936:	21 f4       	brne	.+8      	; 0x940 <usart_init_spi+0x94>
 938:	62 e0       	ldi	r22, 0x02	; 2
 93a:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 93c:	7f de       	rcall	.-770    	; 0x63c <sysclk_enable_module>
 93e:	77 c1       	rjmp	.+750    	; 0xc2e <usart_init_spi+0x382>
 940:	f0 e2       	ldi	r31, 0x20	; 32
 942:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 944:	f3 e0       	ldi	r31, 0x03	; 3
 946:	ff 06       	cpc	r15, r31
 948:	21 f4       	brne	.+8      	; 0x952 <usart_init_spi+0xa6>
 94a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 94c:	82 e0       	ldi	r24, 0x02	; 2
 94e:	76 de       	rcall	.-788    	; 0x63c <sysclk_enable_module>
 950:	6e c1       	rjmp	.+732    	; 0xc2e <usart_init_spi+0x382>
 952:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 954:	38 e0       	ldi	r19, 0x08	; 8
 956:	f3 06       	cpc	r15, r19
 958:	21 f4       	brne	.+8      	; 0x962 <usart_init_spi+0xb6>
 95a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	6e de       	rcall	.-804    	; 0x63c <sysclk_enable_module>
 960:	66 c1       	rjmp	.+716    	; 0xc2e <usart_init_spi+0x382>
 962:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 964:	89 e0       	ldi	r24, 0x09	; 9
 966:	f8 06       	cpc	r15, r24
 968:	21 f4       	brne	.+8      	; 0x972 <usart_init_spi+0xc6>
 96a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 96c:	84 e0       	ldi	r24, 0x04	; 4
 96e:	66 de       	rcall	.-820    	; 0x63c <sysclk_enable_module>
 970:	5e c1       	rjmp	.+700    	; 0xc2e <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 972:	e1 14       	cp	r14, r1
 974:	ea e0       	ldi	r30, 0x0A	; 10
 976:	fe 06       	cpc	r15, r30
 978:	21 f4       	brne	.+8      	; 0x982 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 97a:	61 e0       	ldi	r22, 0x01	; 1
 97c:	85 e0       	ldi	r24, 0x05	; 5
 97e:	5e de       	rcall	.-836    	; 0x63c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 980:	56 c1       	rjmp	.+684    	; 0xc2e <usart_init_spi+0x382>
 982:	e1 14       	cp	r14, r1
 984:	fb e0       	ldi	r31, 0x0B	; 11
 986:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 988:	21 f4       	brne	.+8      	; 0x992 <usart_init_spi+0xe6>
 98a:	61 e0       	ldi	r22, 0x01	; 1
 98c:	86 e0       	ldi	r24, 0x06	; 6
 98e:	56 de       	rcall	.-852    	; 0x63c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 990:	4e c1       	rjmp	.+668    	; 0xc2e <usart_init_spi+0x382>
 992:	30 e4       	ldi	r19, 0x40	; 64
 994:	e3 16       	cp	r14, r19
 996:	38 e0       	ldi	r19, 0x08	; 8
 998:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_spi+0xf8>
 99c:	62 e0       	ldi	r22, 0x02	; 2
 99e:	83 e0       	ldi	r24, 0x03	; 3
 9a0:	4d de       	rcall	.-870    	; 0x63c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 9a2:	45 c1       	rjmp	.+650    	; 0xc2e <usart_init_spi+0x382>
 9a4:	80 e4       	ldi	r24, 0x40	; 64
 9a6:	e8 16       	cp	r14, r24
 9a8:	89 e0       	ldi	r24, 0x09	; 9
 9aa:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <usart_init_spi+0x10a>
 9ae:	62 e0       	ldi	r22, 0x02	; 2
 9b0:	84 e0       	ldi	r24, 0x04	; 4
 9b2:	44 de       	rcall	.-888    	; 0x63c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 9b4:	3c c1       	rjmp	.+632    	; 0xc2e <usart_init_spi+0x382>
 9b6:	e0 e4       	ldi	r30, 0x40	; 64
 9b8:	ee 16       	cp	r14, r30
 9ba:	ea e0       	ldi	r30, 0x0A	; 10
 9bc:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 9be:	21 f4       	brne	.+8      	; 0x9c8 <usart_init_spi+0x11c>
 9c0:	62 e0       	ldi	r22, 0x02	; 2
 9c2:	85 e0       	ldi	r24, 0x05	; 5
 9c4:	3b de       	rcall	.-906    	; 0x63c <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 9c6:	33 c1       	rjmp	.+614    	; 0xc2e <usart_init_spi+0x382>
 9c8:	f0 e9       	ldi	r31, 0x90	; 144
 9ca:	ef 16       	cp	r14, r31
 9cc:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 9ce:	ff 06       	cpc	r15, r31
 9d0:	21 f4       	brne	.+8      	; 0x9da <usart_init_spi+0x12e>
 9d2:	64 e0       	ldi	r22, 0x04	; 4
 9d4:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 9d6:	32 de       	rcall	.-924    	; 0x63c <sysclk_enable_module>
 9d8:	2a c1       	rjmp	.+596    	; 0xc2e <usart_init_spi+0x382>
 9da:	30 e9       	ldi	r19, 0x90	; 144
 9dc:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 9de:	39 e0       	ldi	r19, 0x09	; 9
 9e0:	f3 06       	cpc	r15, r19
 9e2:	21 f4       	brne	.+8      	; 0x9ec <usart_init_spi+0x140>
 9e4:	64 e0       	ldi	r22, 0x04	; 4
 9e6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 9e8:	29 de       	rcall	.-942    	; 0x63c <sysclk_enable_module>
 9ea:	21 c1       	rjmp	.+578    	; 0xc2e <usart_init_spi+0x382>
 9ec:	80 e9       	ldi	r24, 0x90	; 144
 9ee:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 9f0:	8a e0       	ldi	r24, 0x0A	; 10
 9f2:	f8 06       	cpc	r15, r24
 9f4:	21 f4       	brne	.+8      	; 0x9fe <usart_init_spi+0x152>
 9f6:	64 e0       	ldi	r22, 0x04	; 4
 9f8:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 9fa:	20 de       	rcall	.-960    	; 0x63c <sysclk_enable_module>
 9fc:	18 c1       	rjmp	.+560    	; 0xc2e <usart_init_spi+0x382>
 9fe:	e0 e9       	ldi	r30, 0x90	; 144
 a00:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 a02:	eb e0       	ldi	r30, 0x0B	; 11
 a04:	fe 06       	cpc	r15, r30
 a06:	21 f4       	brne	.+8      	; 0xa10 <usart_init_spi+0x164>
 a08:	64 e0       	ldi	r22, 0x04	; 4
 a0a:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 a0c:	17 de       	rcall	.-978    	; 0x63c <sysclk_enable_module>
 a0e:	0f c1       	rjmp	.+542    	; 0xc2e <usart_init_spi+0x382>
 a10:	f0 ec       	ldi	r31, 0xC0	; 192
 a12:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 a14:	f8 e0       	ldi	r31, 0x08	; 8
 a16:	ff 06       	cpc	r15, r31
 a18:	21 f4       	brne	.+8      	; 0xa22 <usart_init_spi+0x176>
 a1a:	68 e0       	ldi	r22, 0x08	; 8
 a1c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 a1e:	0e de       	rcall	.-996    	; 0x63c <sysclk_enable_module>
 a20:	06 c1       	rjmp	.+524    	; 0xc2e <usart_init_spi+0x382>
 a22:	30 ec       	ldi	r19, 0xC0	; 192
 a24:	e3 16       	cp	r14, r19
 a26:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 a28:	f3 06       	cpc	r15, r19
 a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_spi+0x188>
 a2c:	68 e0       	ldi	r22, 0x08	; 8
 a2e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 a30:	05 de       	rcall	.-1014   	; 0x63c <sysclk_enable_module>
 a32:	fd c0       	rjmp	.+506    	; 0xc2e <usart_init_spi+0x382>
 a34:	80 ea       	ldi	r24, 0xA0	; 160
 a36:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
 a38:	88 e0       	ldi	r24, 0x08	; 8
 a3a:	f8 06       	cpc	r15, r24
 a3c:	61 f4       	brne	.+24     	; 0xa56 <usart_init_spi+0x1aa>
 a3e:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	fc dd       	rcall	.-1032   	; 0x63c <sysclk_enable_module>
 a44:	e0 ea       	ldi	r30, 0xA0	; 160
 a46:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 a48:	84 81       	ldd	r24, Z+4	; 0x04
 a4a:	8f 7e       	andi	r24, 0xEF	; 239
 a4c:	84 83       	std	Z+4, r24	; 0x04
 a4e:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 a50:	24 81       	ldd	r18, Z+4	; 0x04
 a52:	22 50       	subi	r18, 0x02	; 2
 a54:	4c c0       	rjmp	.+152    	; 0xaee <usart_init_spi+0x242>
 a56:	f0 ea       	ldi	r31, 0xA0	; 160
 a58:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 a5a:	f9 e0       	ldi	r31, 0x09	; 9
 a5c:	ff 06       	cpc	r15, r31
 a5e:	21 f4       	brne	.+8      	; 0xa68 <usart_init_spi+0x1bc>
 a60:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 a62:	84 e0       	ldi	r24, 0x04	; 4
 a64:	eb dd       	rcall	.-1066   	; 0x63c <sysclk_enable_module>
 a66:	e3 c0       	rjmp	.+454    	; 0xc2e <usart_init_spi+0x382>
 a68:	30 ea       	ldi	r19, 0xA0	; 160
 a6a:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 a6c:	3a e0       	ldi	r19, 0x0A	; 10
 a6e:	f3 06       	cpc	r15, r19
 a70:	21 f4       	brne	.+8      	; 0xa7a <usart_init_spi+0x1ce>
 a72:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 a74:	85 e0       	ldi	r24, 0x05	; 5
 a76:	e2 dd       	rcall	.-1084   	; 0x63c <sysclk_enable_module>
 a78:	da c0       	rjmp	.+436    	; 0xc2e <usart_init_spi+0x382>
 a7a:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 a7c:	e8 16       	cp	r14, r24
 a7e:	8b e0       	ldi	r24, 0x0B	; 11
 a80:	f8 06       	cpc	r15, r24
 a82:	21 f4       	brne	.+8      	; 0xa8c <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 a84:	60 e1       	ldi	r22, 0x10	; 16
 a86:	86 e0       	ldi	r24, 0x06	; 6
 a88:	d9 dd       	rcall	.-1102   	; 0x63c <sysclk_enable_module>
 a8a:	d1 c0       	rjmp	.+418    	; 0xc2e <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 a8c:	e0 eb       	ldi	r30, 0xB0	; 176
 a8e:	ee 16       	cp	r14, r30
 a90:	e8 e0       	ldi	r30, 0x08	; 8
 a92:	fe 06       	cpc	r15, r30
 a94:	21 f4       	brne	.+8      	; 0xa9e <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 a96:	60 e2       	ldi	r22, 0x20	; 32
 a98:	83 e0       	ldi	r24, 0x03	; 3
 a9a:	d0 dd       	rcall	.-1120   	; 0x63c <sysclk_enable_module>
 a9c:	c8 c0       	rjmp	.+400    	; 0xc2e <usart_init_spi+0x382>
 a9e:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 aa0:	ef 16       	cp	r14, r31
 aa2:	f9 e0       	ldi	r31, 0x09	; 9
 aa4:	ff 06       	cpc	r15, r31
 aa6:	21 f4       	brne	.+8      	; 0xab0 <usart_init_spi+0x204>
 aa8:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 aaa:	84 e0       	ldi	r24, 0x04	; 4
 aac:	c7 dd       	rcall	.-1138   	; 0x63c <sysclk_enable_module>
 aae:	bf c0       	rjmp	.+382    	; 0xc2e <usart_init_spi+0x382>
 ab0:	30 e8       	ldi	r19, 0x80	; 128
 ab2:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 ab4:	34 e0       	ldi	r19, 0x04	; 4
 ab6:	f3 06       	cpc	r15, r19
 ab8:	21 f4       	brne	.+8      	; 0xac2 <usart_init_spi+0x216>
 aba:	60 e4       	ldi	r22, 0x40	; 64
 abc:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 abe:	be dd       	rcall	.-1156   	; 0x63c <sysclk_enable_module>
 ac0:	b6 c0       	rjmp	.+364    	; 0xc2e <usart_init_spi+0x382>
 ac2:	80 ea       	ldi	r24, 0xA0	; 160
 ac4:	e8 16       	cp	r14, r24
 ac6:	84 e0       	ldi	r24, 0x04	; 4
 ac8:	f8 06       	cpc	r15, r24
 aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_spi+0x228>
 acc:	60 e4       	ldi	r22, 0x40	; 64
 ace:	85 e0       	ldi	r24, 0x05	; 5
 ad0:	b5 dd       	rcall	.-1174   	; 0x63c <sysclk_enable_module>
 ad2:	ad c0       	rjmp	.+346    	; 0xc2e <usart_init_spi+0x382>
 ad4:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
 ad6:	84 81       	ldd	r24, Z+4	; 0x04
 ad8:	8f 7e       	andi	r24, 0xEF	; 239
 ada:	84 83       	std	Z+4, r24	; 0x04
 adc:	fb 01       	movw	r30, r22
 ade:	24 81       	ldd	r18, Z+4	; 0x04
 ae0:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
 ae2:	c7 01       	movw	r24, r14
 ae4:	f0 ea       	ldi	r31, 0xA0	; 160
 ae6:	ef 16       	cp	r14, r31
 ae8:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
 aea:	ff 06       	cpc	r15, r31
 aec:	49 f4       	brne	.+18     	; 0xb00 <usart_init_spi+0x254>
 aee:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
 af2:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
 af4:	a5 c0       	rjmp	.+330    	; 0xc40 <usart_init_spi+0x394>
 af6:	0f 2e       	mov	r0, r31
 af8:	f1 e1       	ldi	r31, 0x11	; 17
 afa:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
 afc:	f0 2d       	mov	r31, r0
 afe:	a4 c0       	rjmp	.+328    	; 0xc48 <usart_init_spi+0x39c>
 b00:	80 3b       	cpi	r24, 0xB0	; 176
 b02:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
 b04:	93 07       	cpc	r25, r19
 b06:	91 f0       	breq	.+36     	; 0xb2c <usart_init_spi+0x280>
 b08:	80 3a       	cpi	r24, 0xA0	; 160
 b0a:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
 b0c:	9e 07       	cpc	r25, r30
 b0e:	49 f4       	brne	.+18     	; 0xb22 <usart_init_spi+0x276>
 b10:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
 b14:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
 b16:	9b c0       	rjmp	.+310    	; 0xc4e <usart_init_spi+0x3a2>
 b18:	0f 2e       	mov	r0, r31
 b1a:	f9 e1       	ldi	r31, 0x19	; 25
 b1c:	df 2e       	mov	r13, r31
 b1e:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
 b20:	16 c0       	rjmp	.+44     	; 0xb4e <usart_init_spi+0x2a2>
 b22:	80 3b       	cpi	r24, 0xB0	; 176
 b24:	f9 e0       	ldi	r31, 0x09	; 9
 b26:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
 b28:	f1 f0       	breq	.+60     	; 0xb66 <usart_init_spi+0x2ba>
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <usart_init_spi+0x288>
 b2c:	0f 2e       	mov	r0, r31
 b2e:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
 b30:	df 2e       	mov	r13, r31
 b32:	f0 2d       	mov	r31, r0
 b34:	80 3a       	cpi	r24, 0xA0	; 160
 b36:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
 b38:	93 07       	cpc	r25, r19
 b3a:	49 f4       	brne	.+18     	; 0xb4e <usart_init_spi+0x2a2>
 b3c:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
 b40:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
 b42:	8a c0       	rjmp	.+276    	; 0xc58 <usart_init_spi+0x3ac>
 b44:	0f 2e       	mov	r0, r31
 b46:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
 b48:	df 2e       	mov	r13, r31
 b4a:	f0 2d       	mov	r31, r0
 b4c:	15 c0       	rjmp	.+42     	; 0xb78 <usart_init_spi+0x2cc>
 b4e:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
 b50:	9b 40       	sbci	r25, 0x0B	; 11
 b52:	91 f4       	brne	.+36     	; 0xb78 <usart_init_spi+0x2cc>
 b54:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
 b58:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
 b5a:	0a c0       	rjmp	.+20     	; 0xb70 <usart_init_spi+0x2c4>
 b5c:	0f 2e       	mov	r0, r31
 b5e:	f9 e2       	ldi	r31, 0x29	; 41
 b60:	df 2e       	mov	r13, r31
 b62:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
 b64:	09 c0       	rjmp	.+18     	; 0xb78 <usart_init_spi+0x2cc>
 b66:	0f 2e       	mov	r0, r31
 b68:	fd e1       	ldi	r31, 0x1D	; 29
 b6a:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
 b6c:	f0 2d       	mov	r31, r0
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <usart_init_spi+0x2cc>
 b70:	0f 2e       	mov	r0, r31
 b72:	fd e2       	ldi	r31, 0x2D	; 45
 b74:	df 2e       	mov	r13, r31
 b76:	f0 2d       	mov	r31, r0
 b78:	ed 2d       	mov	r30, r13
 b7a:	e6 95       	lsr	r30
 b7c:	e6 95       	lsr	r30
 b7e:	e6 95       	lsr	r30
 b80:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 b82:	e3 9f       	mul	r30, r19
 b84:	f0 01       	movw	r30, r0
 b86:	11 24       	eor	r1, r1
 b88:	fa 5f       	subi	r31, 0xFA	; 250
 b8a:	3d 2d       	mov	r19, r13
 b8c:	37 70       	andi	r19, 0x07	; 7
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
 b92:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <usart_init_spi+0x2ee>
 b96:	88 0f       	add	r24, r24
 b98:	99 1f       	adc	r25, r25
 b9a:	0a 94       	dec	r0
 b9c:	e2 f7       	brpl	.-8      	; 0xb96 <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
 b9e:	81 83       	std	Z+1, r24	; 0x01
 ba0:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
 ba2:	10 f0       	brcs	.+4      	; 0xba8 <usart_init_spi+0x2fc>
 ba4:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <usart_init_spi+0x2fe>
 ba8:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
 baa:	df 01       	movw	r26, r30
	return flags;
 bac:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
 bae:	a3 0f       	add	r26, r19
 bb0:	b1 1d       	adc	r27, r1
 bb2:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
 bb4:	99 83       	std	Y+1, r25	; 0x01
 bb6:	f8 94       	cli
 bb8:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 bba:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 bbc:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 bbe:	2c 93       	st	X, r18
 bc0:	9c 91       	ld	r25, X
 bc2:	94 2b       	or	r25, r20
 bc4:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
 bc6:	3f bf       	out	0x3f, r19	; 63
 bc8:	85 83       	std	Z+5, r24	; 0x05
 bca:	f7 01       	movw	r30, r14
 bcc:	85 81       	ldd	r24, Z+5	; 0x05
 bce:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
 bd0:	85 83       	std	Z+5, r24	; 0x05
 bd2:	f8 01       	movw	r30, r16
 bd4:	84 81       	ldd	r24, Z+4	; 0x04
 bd6:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
 bd8:	81 30       	cpi	r24, 0x01	; 1
 bda:	29 f4       	brne	.+10     	; 0xbe6 <usart_init_spi+0x33a>
 bdc:	f7 01       	movw	r30, r14
 bde:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
 be0:	82 60       	ori	r24, 0x02	; 2
 be2:	85 83       	std	Z+5, r24	; 0x05
 be4:	04 c0       	rjmp	.+8      	; 0xbee <usart_init_spi+0x342>
 be6:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
 be8:	85 81       	ldd	r24, Z+5	; 0x05
 bea:	8d 7f       	andi	r24, 0xFD	; 253
 bec:	85 83       	std	Z+5, r24	; 0x05
 bee:	f8 01       	movw	r30, r16
 bf0:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
 bf2:	88 23       	and	r24, r24
 bf4:	29 f0       	breq	.+10     	; 0xc00 <usart_init_spi+0x354>
 bf6:	f7 01       	movw	r30, r14
 bf8:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 bfa:	84 60       	ori	r24, 0x04	; 4
 bfc:	85 83       	std	Z+5, r24	; 0x05
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <usart_init_spi+0x35c>
 c00:	f7 01       	movw	r30, r14
 c02:	85 81       	ldd	r24, Z+5	; 0x05
 c04:	8b 7f       	andi	r24, 0xFB	; 251
 c06:	85 83       	std	Z+5, r24	; 0x05
 c08:	f8 01       	movw	r30, r16
 c0a:	40 81       	ld	r20, Z
 c0c:	51 81       	ldd	r21, Z+1	; 0x01
 c0e:	62 81       	ldd	r22, Z+2	; 0x02
 c10:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 c12:	00 e0       	ldi	r16, 0x00	; 0
 c14:	12 e1       	ldi	r17, 0x12	; 18
 c16:	2a e7       	ldi	r18, 0x7A	; 122
 c18:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 c1a:	c7 01       	movw	r24, r14
 c1c:	16 de       	rcall	.-980    	; 0x84a <usart_spi_set_baudrate>
 c1e:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 c20:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
 c22:	88 60       	ori	r24, 0x08	; 8
 c24:	84 83       	std	Z+4, r24	; 0x04
 c26:	84 81       	ldd	r24, Z+4	; 0x04
 c28:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
 c2a:	84 83       	std	Z+4, r24	; 0x04
 c2c:	1a c0       	rjmp	.+52     	; 0xc62 <usart_init_spi+0x3b6>
 c2e:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
 c30:	84 81       	ldd	r24, Z+4	; 0x04
 c32:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
 c34:	84 83       	std	Z+4, r24	; 0x04
 c36:	f8 01       	movw	r30, r16
 c38:	24 81       	ldd	r18, Z+4	; 0x04
 c3a:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
 c3c:	c7 01       	movw	r24, r14
 c3e:	60 cf       	rjmp	.-320    	; 0xb00 <usart_init_spi+0x254>
 c40:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
 c42:	f5 e1       	ldi	r31, 0x15	; 21
 c44:	df 2e       	mov	r13, r31
 c46:	f0 2d       	mov	r31, r0
 c48:	80 ea       	ldi	r24, 0xA0	; 160
 c4a:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
 c4c:	6a cf       	rjmp	.-300    	; 0xb22 <usart_init_spi+0x276>
 c4e:	0f 2e       	mov	r0, r31
 c50:	fd e1       	ldi	r31, 0x1D	; 29
 c52:	df 2e       	mov	r13, r31
 c54:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 c56:	7b cf       	rjmp	.-266    	; 0xb4e <usart_init_spi+0x2a2>
 c58:	0f 2e       	mov	r0, r31
 c5a:	f5 e2       	ldi	r31, 0x25	; 37
 c5c:	df 2e       	mov	r13, r31
 c5e:	f0 2d       	mov	r31, r0
 c60:	8b cf       	rjmp	.-234    	; 0xb78 <usart_init_spi+0x2cc>
 c62:	0f 90       	pop	r0
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	1f 91       	pop	r17
 c6a:	0f 91       	pop	r16
 c6c:	ff 90       	pop	r15
 c6e:	ef 90       	pop	r14
 c70:	df 90       	pop	r13
 c72:	08 95       	ret

00000c74 <st7565r_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
 c74:	1f 93       	push	r17
 c76:	cf 93       	push	r28
 c78:	df 93       	push	r29
 c7a:	1f 92       	push	r1
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
 c80:	18 2f       	mov	r17, r24
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 c82:	8b e2       	ldi	r24, 0x2B	; 43
 c84:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 c86:	be 01       	movw	r22, r28
 c88:	6f 5f       	subi	r22, 0xFF	; 255
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	80 ea       	ldi	r24, 0xA0	; 160
 c8e:	99 e0       	ldi	r25, 0x09	; 9
 c90:	5b dd       	rcall	.-1354   	; 0x748 <usart_spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 c92:	81 e0       	ldi	r24, 0x01	; 1
 c94:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 c98:	e0 ea       	ldi	r30, 0xA0	; 160
 c9a:	f9 e0       	ldi	r31, 0x09	; 9
 c9c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 c9e:	85 ff       	sbrs	r24, 5
 ca0:	fd cf       	rjmp	.-6      	; 0xc9c <st7565r_write_command+0x28>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 ca2:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 ca6:	e0 ea       	ldi	r30, 0xA0	; 160
 ca8:	f9 e0       	ldi	r31, 0x09	; 9
 caa:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 cac:	86 ff       	sbrs	r24, 6
 cae:	fd cf       	rjmp	.-6      	; 0xcaa <st7565r_write_command+0x36>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 cb0:	e0 ea       	ldi	r30, 0xA0	; 160
 cb2:	f9 e0       	ldi	r31, 0x09	; 9
 cb4:	80 e4       	ldi	r24, 0x40	; 64
 cb6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
 cb8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 cba:	be 01       	movw	r22, r28
 cbc:	6f 5f       	subi	r22, 0xFF	; 255
 cbe:	7f 4f       	sbci	r23, 0xFF	; 255
 cc0:	80 ea       	ldi	r24, 0xA0	; 160
 cc2:	99 e0       	ldi	r25, 0x09	; 9
 cc4:	57 dd       	rcall	.-1362   	; 0x774 <usart_spi_deselect_device>
	spi_select_device(ST7565R_SPI, &device);
	ioport_set_pin_low(ST7565R_A0_PIN);
	spi_write_single(ST7565R_SPI, command);
	spi_deselect_device(ST7565R_SPI, &device);
#endif
}
 cc6:	0f 90       	pop	r0
 cc8:	df 91       	pop	r29
 cca:	cf 91       	pop	r28
 ccc:	1f 91       	pop	r17
 cce:	08 95       	ret

00000cd0 <main>:
	0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, //1
	0x62, 0x51, 0x4D, 0x46, 0x00, 0x00, //2
};

int main(void)
{
 cd0:	2f 92       	push	r2
 cd2:	3f 92       	push	r3
 cd4:	4f 92       	push	r4
 cd6:	5f 92       	push	r5
 cd8:	6f 92       	push	r6
 cda:	7f 92       	push	r7
 cdc:	8f 92       	push	r8
 cde:	9f 92       	push	r9
 ce0:	af 92       	push	r10
 ce2:	bf 92       	push	r11
 ce4:	cf 92       	push	r12
 ce6:	df 92       	push	r13
 ce8:	ef 92       	push	r14
 cea:	ff 92       	push	r15
 cec:	0f 93       	push	r16
 cee:	1f 93       	push	r17
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	1f 92       	push	r1
 cf6:	cd b7       	in	r28, 0x3d	; 61
	uint8_t column_address;
	//! store the LCD controller start draw line
	uint8_t start_line_address = 0;

	board_init();
	sysclk_init();
 cf8:	de b7       	in	r29, 0x3e	; 62
 cfa:	52 dd       	rcall	.-1372   	; 0x7a0 <board_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 cfc:	66 dc       	rcall	.-1844   	; 0x5ca <sysclk_init>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 cfe:	80 e1       	ldi	r24, 0x10	; 16
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 d00:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
 d04:	9e da       	rcall	.-2756   	; 0x242 <st7565r_init>
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 d06:	80 eb       	ldi	r24, 0xB0	; 176
 d08:	b5 df       	rcall	.-150    	; 0xc74 <st7565r_write_command>
 d0a:	80 e1       	ldi	r24, 0x10	; 16
 d0c:	b3 df       	rcall	.-154    	; 0xc74 <st7565r_write_command>
 d0e:	80 e0       	ldi	r24, 0x00	; 0
 d10:	b1 df       	rcall	.-158    	; 0xc74 <st7565r_write_command>
 d12:	0f 2e       	mov	r0, r31
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	ef 2e       	mov	r14, r31
 d18:	f0 e2       	ldi	r31, 0x20	; 32
 d1a:	ff 2e       	mov	r15, r31
 d1c:	f0 2d       	mov	r31, r0
 d1e:	0f 2e       	mov	r0, r31
 d20:	f0 e6       	ldi	r31, 0x60	; 96
 d22:	8f 2e       	mov	r8, r31
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 d24:	f0 e2       	ldi	r31, 0x20	; 32
 d26:	9f 2e       	mov	r9, r31
 d28:	f0 2d       	mov	r31, r0
 d2a:	00 ea       	ldi	r16, 0xA0	; 160
 d2c:	19 e0       	ldi	r17, 0x09	; 9
 d2e:	0f 2e       	mov	r0, r31
 d30:	f0 e6       	ldi	r31, 0x60	; 96
 d32:	cf 2e       	mov	r12, r31
 d34:	f6 e0       	ldi	r31, 0x06	; 6
 d36:	df 2e       	mov	r13, r31
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 d38:	f0 2d       	mov	r31, r0
 d3a:	55 24       	eor	r5, r5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 d3c:	53 94       	inc	r5
 d3e:	60 2e       	mov	r6, r16
 d40:	71 2e       	mov	r7, r17
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
 d42:	68 94       	set
 d44:	33 24       	eor	r3, r3
 d46:	36 f8       	bld	r3, 6
 d48:	0f 2e       	mov	r0, r31
 d4a:	fb e2       	ldi	r31, 0x2B	; 43
	//Write message
	for (int i = 0; i < 8; i++) 
	{
		for (int k = 0; k < 6; k++)
		{
			st7565r_write_data(Message[i][k]);
 d4c:	4f 2e       	mov	r4, r31
 d4e:	f0 2d       	mov	r31, r0
 d50:	28 c0       	rjmp	.+80     	; 0xda2 <main+0xd2>
 d52:	f7 01       	movw	r30, r14
	usart_spi_select_device(ST7565R_USART_SPI, &device);
 d54:	20 80       	ld	r2, Z
 d56:	f2 e0       	ldi	r31, 0x02	; 2
 d58:	ef 0e       	add	r14, r31
 d5a:	f1 1c       	adc	r15, r1
 d5c:	49 82       	std	Y+1, r4	; 0x01
 d5e:	be 01       	movw	r22, r28
 d60:	6f 5f       	subi	r22, 0xFF	; 255
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	86 2d       	mov	r24, r6
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
 d66:	97 2d       	mov	r25, r7
 d68:	ef dc       	rcall	.-1570   	; 0x748 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
 d6a:	f6 01       	movw	r30, r12
 d6c:	55 82       	std	Z+5, r5	; 0x05
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
 d6e:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
 d70:	81 81       	ldd	r24, Z+1	; 0x01
 d72:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
 d74:	fc cf       	rjmp	.-8      	; 0xd6e <main+0x9e>
 d76:	20 82       	st	Z, r2
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
 d78:	f8 01       	movw	r30, r16
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 d7a:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
 d7c:	86 ff       	sbrs	r24, 6
 d7e:	fc cf       	rjmp	.-8      	; 0xd78 <main+0xa8>
 d80:	31 82       	std	Z+1, r3	; 0x01
 d82:	80 81       	ld	r24, Z
 d84:	f6 01       	movw	r30, r12
 d86:	56 82       	std	Z+6, r5	; 0x06
 d88:	be 01       	movw	r22, r28
	//}
	
	//Write message
	for (int i = 0; i < 8; i++) 
	{
		for (int k = 0; k < 6; k++)
 d8a:	6f 5f       	subi	r22, 0xFF	; 255
 d8c:	7f 4f       	sbci	r23, 0xFF	; 255
 d8e:	86 2d       	mov	r24, r6
 d90:	97 2d       	mov	r25, r7
			//st7565r_write_data(0x00);
		//}
	//}
	
	//Write message
	for (int i = 0; i < 8; i++) 
 d92:	f0 dc       	rcall	.-1568   	; 0x774 <usart_spi_deselect_device>
 d94:	ea 14       	cp	r14, r10
 d96:	fb 04       	cpc	r15, r11
 d98:	e1 f6       	brne	.-72     	; 0xd52 <main+0x82>
 d9a:	75 01       	movw	r14, r10
 d9c:	8a 14       	cp	r8, r10
 d9e:	9b 04       	cpc	r9, r11
 da0:	29 f0       	breq	.+10     	; 0xdac <main+0xdc>
		for (int k = 0; k < 6; k++)
		{
			st7565r_write_data(Message[i][k]);
		}
	}
 da2:	57 01       	movw	r10, r14
 da4:	fc e0       	ldi	r31, 0x0C	; 12
 da6:	af 0e       	add	r10, r31
 da8:	b1 1c       	adc	r11, r1
 daa:	d3 cf       	rjmp	.-90     	; 0xd52 <main+0x82>
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	0f 90       	pop	r0
 db2:	df 91       	pop	r29
 db4:	cf 91       	pop	r28
 db6:	1f 91       	pop	r17
 db8:	0f 91       	pop	r16
 dba:	ff 90       	pop	r15
 dbc:	ef 90       	pop	r14
 dbe:	df 90       	pop	r13
 dc0:	cf 90       	pop	r12
 dc2:	bf 90       	pop	r11
 dc4:	af 90       	pop	r10
 dc6:	9f 90       	pop	r9
 dc8:	8f 90       	pop	r8
 dca:	7f 90       	pop	r7
 dcc:	6f 90       	pop	r6
 dce:	5f 90       	pop	r5
 dd0:	4f 90       	pop	r4
 dd2:	3f 90       	pop	r3
 dd4:	2f 90       	pop	r2
 dd6:	08 95       	ret

00000dd8 <__udivmodsi4>:
 dd8:	a1 e2       	ldi	r26, 0x21	; 33
 dda:	1a 2e       	mov	r1, r26
 ddc:	aa 1b       	sub	r26, r26
 dde:	bb 1b       	sub	r27, r27
 de0:	fd 01       	movw	r30, r26
 de2:	0d c0       	rjmp	.+26     	; 0xdfe <__udivmodsi4_ep>

00000de4 <__udivmodsi4_loop>:
 de4:	aa 1f       	adc	r26, r26
 de6:	bb 1f       	adc	r27, r27
 de8:	ee 1f       	adc	r30, r30
 dea:	ff 1f       	adc	r31, r31
 dec:	a2 17       	cp	r26, r18
 dee:	b3 07       	cpc	r27, r19
 df0:	e4 07       	cpc	r30, r20
 df2:	f5 07       	cpc	r31, r21
 df4:	20 f0       	brcs	.+8      	; 0xdfe <__udivmodsi4_ep>
 df6:	a2 1b       	sub	r26, r18
 df8:	b3 0b       	sbc	r27, r19
 dfa:	e4 0b       	sbc	r30, r20
 dfc:	f5 0b       	sbc	r31, r21

00000dfe <__udivmodsi4_ep>:
 dfe:	66 1f       	adc	r22, r22
 e00:	77 1f       	adc	r23, r23
 e02:	88 1f       	adc	r24, r24
 e04:	99 1f       	adc	r25, r25
 e06:	1a 94       	dec	r1
 e08:	69 f7       	brne	.-38     	; 0xde4 <__udivmodsi4_loop>
 e0a:	60 95       	com	r22
 e0c:	70 95       	com	r23
 e0e:	80 95       	com	r24
 e10:	90 95       	com	r25
 e12:	9b 01       	movw	r18, r22
 e14:	ac 01       	movw	r20, r24
 e16:	bd 01       	movw	r22, r26
 e18:	cf 01       	movw	r24, r30
 e1a:	08 95       	ret

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
